/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ISource_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ignis { namespace rpc {


IEncoded::~IEncoded() noexcept {
}


void IEncoded::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void IEncoded::__set_bytes(const std::string& val) {
  this->bytes = val;
__isset.bytes = true;
}
std::ostream& operator<<(std::ostream& out, const IEncoded& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IEncoded::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bytes);
          this->__isset.bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IEncoded::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IEncoded");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bytes) {
    xfer += oprot->writeFieldBegin("bytes", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->bytes);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IEncoded &a, IEncoded &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.bytes, b.bytes);
  swap(a.__isset, b.__isset);
}

IEncoded::IEncoded(const IEncoded& other0) {
  name = other0.name;
  bytes = other0.bytes;
  __isset = other0.__isset;
}
IEncoded& IEncoded::operator=(const IEncoded& other1) {
  name = other1.name;
  bytes = other1.bytes;
  __isset = other1.__isset;
  return *this;
}
void IEncoded::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IEncoded(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "bytes="; (__isset.bytes ? (out << to_string(bytes)) : (out << "<null>"));
  out << ")";
}


ISource::~ISource() noexcept {
}


void ISource::__set_obj(const IEncoded& val) {
  this->obj = val;
}

void ISource::__set_params(const std::map<std::string, std::string> & val) {
  this->params = val;
}
std::ostream& operator<<(std::ostream& out, const ISource& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ISource::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_obj = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->obj.read(iprot);
          isset_obj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->params.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _ktype3;
            ::apache::thrift::protocol::TType _vtype4;
            xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              std::string _key7;
              xfer += iprot->readString(_key7);
              std::string& _val8 = this->params[_key7];
              xfer += iprot->readBinary(_val8);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_obj)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ISource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ISource");

  xfer += oprot->writeFieldBegin("obj", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->obj.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("params", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->params.size()));
    std::map<std::string, std::string> ::const_iterator _iter9;
    for (_iter9 = this->params.begin(); _iter9 != this->params.end(); ++_iter9)
    {
      xfer += oprot->writeString(_iter9->first);
      xfer += oprot->writeBinary(_iter9->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ISource &a, ISource &b) {
  using ::std::swap;
  swap(a.obj, b.obj);
  swap(a.params, b.params);
  swap(a.__isset, b.__isset);
}

ISource::ISource(const ISource& other10) {
  obj = other10.obj;
  params = other10.params;
  __isset = other10.__isset;
}
ISource& ISource::operator=(const ISource& other11) {
  obj = other11.obj;
  params = other11.params;
  __isset = other11.__isset;
  return *this;
}
void ISource::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ISource(";
  out << "obj=" << to_string(obj);
  out << ", " << "params=" << to_string(params);
  out << ")";
}

}} // namespace
