/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IPropertiesService_H
#define IPropertiesService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IPropertiesService_types.h"

namespace ignis { namespace rpc { namespace driver {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IPropertiesServiceIf {
 public:
  virtual ~IPropertiesServiceIf() {}
  virtual int64_t newInstance() = 0;
  virtual int64_t newInstance2(const int64_t id) = 0;
  virtual void setProperty(std::string& _return, const int64_t id, const std::string& key, const std::string& value) = 0;
  virtual void getProperty(std::string& _return, const int64_t id, const std::string& key) = 0;
  virtual bool contains(const int64_t id, const std::string& key) = 0;
  virtual void toMap(std::map<std::string, std::string> & _return, const int64_t id, const bool defaults) = 0;
  virtual void fromMap(const int64_t id, const std::map<std::string, std::string> & _map) = 0;
  virtual void load(const int64_t id, const std::string& path) = 0;
  virtual void store(const int64_t id, const std::string& path) = 0;
  virtual void clear(const int64_t id) = 0;
};

class IPropertiesServiceIfFactory {
 public:
  typedef IPropertiesServiceIf Handler;

  virtual ~IPropertiesServiceIfFactory() {}

  virtual IPropertiesServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IPropertiesServiceIf* /* handler */) = 0;
};

class IPropertiesServiceIfSingletonFactory : virtual public IPropertiesServiceIfFactory {
 public:
  IPropertiesServiceIfSingletonFactory(const ::std::shared_ptr<IPropertiesServiceIf>& iface) : iface_(iface) {}
  virtual ~IPropertiesServiceIfSingletonFactory() {}

  virtual IPropertiesServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IPropertiesServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<IPropertiesServiceIf> iface_;
};

class IPropertiesServiceNull : virtual public IPropertiesServiceIf {
 public:
  virtual ~IPropertiesServiceNull() {}
  int64_t newInstance() {
    int64_t _return = 0;
    return _return;
  }
  int64_t newInstance2(const int64_t /* id */) {
    int64_t _return = 0;
    return _return;
  }
  void setProperty(std::string& /* _return */, const int64_t /* id */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void getProperty(std::string& /* _return */, const int64_t /* id */, const std::string& /* key */) {
    return;
  }
  bool contains(const int64_t /* id */, const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
  void toMap(std::map<std::string, std::string> & /* _return */, const int64_t /* id */, const bool /* defaults */) {
    return;
  }
  void fromMap(const int64_t /* id */, const std::map<std::string, std::string> & /* _map */) {
    return;
  }
  void load(const int64_t /* id */, const std::string& /* path */) {
    return;
  }
  void store(const int64_t /* id */, const std::string& /* path */) {
    return;
  }
  void clear(const int64_t /* id */) {
    return;
  }
};


class IPropertiesService_newInstance_args {
 public:

  IPropertiesService_newInstance_args(const IPropertiesService_newInstance_args&);
  IPropertiesService_newInstance_args& operator=(const IPropertiesService_newInstance_args&);
  IPropertiesService_newInstance_args() {
  }

  virtual ~IPropertiesService_newInstance_args() noexcept;

  bool operator == (const IPropertiesService_newInstance_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IPropertiesService_newInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_newInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_newInstance_pargs {
 public:


  virtual ~IPropertiesService_newInstance_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_newInstance_result__isset {
  _IPropertiesService_newInstance_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_newInstance_result__isset;

class IPropertiesService_newInstance_result {
 public:

  IPropertiesService_newInstance_result(const IPropertiesService_newInstance_result&);
  IPropertiesService_newInstance_result& operator=(const IPropertiesService_newInstance_result&);
  IPropertiesService_newInstance_result() : success(0) {
  }

  virtual ~IPropertiesService_newInstance_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_newInstance_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_newInstance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_newInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_newInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_newInstance_presult__isset {
  _IPropertiesService_newInstance_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_newInstance_presult__isset;

class IPropertiesService_newInstance_presult {
 public:


  virtual ~IPropertiesService_newInstance_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_newInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_newInstance2_args__isset {
  _IPropertiesService_newInstance2_args__isset() : id(false) {}
  bool id :1;
} _IPropertiesService_newInstance2_args__isset;

class IPropertiesService_newInstance2_args {
 public:

  IPropertiesService_newInstance2_args(const IPropertiesService_newInstance2_args&);
  IPropertiesService_newInstance2_args& operator=(const IPropertiesService_newInstance2_args&);
  IPropertiesService_newInstance2_args() : id(0) {
  }

  virtual ~IPropertiesService_newInstance2_args() noexcept;
  int64_t id;

  _IPropertiesService_newInstance2_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IPropertiesService_newInstance2_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_newInstance2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_newInstance2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_newInstance2_pargs {
 public:


  virtual ~IPropertiesService_newInstance2_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_newInstance2_result__isset {
  _IPropertiesService_newInstance2_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_newInstance2_result__isset;

class IPropertiesService_newInstance2_result {
 public:

  IPropertiesService_newInstance2_result(const IPropertiesService_newInstance2_result&);
  IPropertiesService_newInstance2_result& operator=(const IPropertiesService_newInstance2_result&);
  IPropertiesService_newInstance2_result() : success(0) {
  }

  virtual ~IPropertiesService_newInstance2_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_newInstance2_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_newInstance2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_newInstance2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_newInstance2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_newInstance2_presult__isset {
  _IPropertiesService_newInstance2_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_newInstance2_presult__isset;

class IPropertiesService_newInstance2_presult {
 public:


  virtual ~IPropertiesService_newInstance2_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_newInstance2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_setProperty_args__isset {
  _IPropertiesService_setProperty_args__isset() : id(false), key(false), value(false) {}
  bool id :1;
  bool key :1;
  bool value :1;
} _IPropertiesService_setProperty_args__isset;

class IPropertiesService_setProperty_args {
 public:

  IPropertiesService_setProperty_args(const IPropertiesService_setProperty_args&);
  IPropertiesService_setProperty_args& operator=(const IPropertiesService_setProperty_args&);
  IPropertiesService_setProperty_args() : id(0), key(), value() {
  }

  virtual ~IPropertiesService_setProperty_args() noexcept;
  int64_t id;
  std::string key;
  std::string value;

  _IPropertiesService_setProperty_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const IPropertiesService_setProperty_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_setProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_setProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_setProperty_pargs {
 public:


  virtual ~IPropertiesService_setProperty_pargs() noexcept;
  const int64_t* id;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_setProperty_result__isset {
  _IPropertiesService_setProperty_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_setProperty_result__isset;

class IPropertiesService_setProperty_result {
 public:

  IPropertiesService_setProperty_result(const IPropertiesService_setProperty_result&);
  IPropertiesService_setProperty_result& operator=(const IPropertiesService_setProperty_result&);
  IPropertiesService_setProperty_result() : success() {
  }

  virtual ~IPropertiesService_setProperty_result() noexcept;
  std::string success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_setProperty_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_setProperty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_setProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_setProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_setProperty_presult__isset {
  _IPropertiesService_setProperty_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_setProperty_presult__isset;

class IPropertiesService_setProperty_presult {
 public:


  virtual ~IPropertiesService_setProperty_presult() noexcept;
  std::string* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_setProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_getProperty_args__isset {
  _IPropertiesService_getProperty_args__isset() : id(false), key(false) {}
  bool id :1;
  bool key :1;
} _IPropertiesService_getProperty_args__isset;

class IPropertiesService_getProperty_args {
 public:

  IPropertiesService_getProperty_args(const IPropertiesService_getProperty_args&);
  IPropertiesService_getProperty_args& operator=(const IPropertiesService_getProperty_args&);
  IPropertiesService_getProperty_args() : id(0), key() {
  }

  virtual ~IPropertiesService_getProperty_args() noexcept;
  int64_t id;
  std::string key;

  _IPropertiesService_getProperty_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_key(const std::string& val);

  bool operator == (const IPropertiesService_getProperty_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_getProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_getProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_getProperty_pargs {
 public:


  virtual ~IPropertiesService_getProperty_pargs() noexcept;
  const int64_t* id;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_getProperty_result__isset {
  _IPropertiesService_getProperty_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_getProperty_result__isset;

class IPropertiesService_getProperty_result {
 public:

  IPropertiesService_getProperty_result(const IPropertiesService_getProperty_result&);
  IPropertiesService_getProperty_result& operator=(const IPropertiesService_getProperty_result&);
  IPropertiesService_getProperty_result() : success() {
  }

  virtual ~IPropertiesService_getProperty_result() noexcept;
  std::string success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_getProperty_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_getProperty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_getProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_getProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_getProperty_presult__isset {
  _IPropertiesService_getProperty_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_getProperty_presult__isset;

class IPropertiesService_getProperty_presult {
 public:


  virtual ~IPropertiesService_getProperty_presult() noexcept;
  std::string* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_getProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_contains_args__isset {
  _IPropertiesService_contains_args__isset() : id(false), key(false) {}
  bool id :1;
  bool key :1;
} _IPropertiesService_contains_args__isset;

class IPropertiesService_contains_args {
 public:

  IPropertiesService_contains_args(const IPropertiesService_contains_args&);
  IPropertiesService_contains_args& operator=(const IPropertiesService_contains_args&);
  IPropertiesService_contains_args() : id(0), key() {
  }

  virtual ~IPropertiesService_contains_args() noexcept;
  int64_t id;
  std::string key;

  _IPropertiesService_contains_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_key(const std::string& val);

  bool operator == (const IPropertiesService_contains_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_contains_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_contains_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_contains_pargs {
 public:


  virtual ~IPropertiesService_contains_pargs() noexcept;
  const int64_t* id;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_contains_result__isset {
  _IPropertiesService_contains_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_contains_result__isset;

class IPropertiesService_contains_result {
 public:

  IPropertiesService_contains_result(const IPropertiesService_contains_result&);
  IPropertiesService_contains_result& operator=(const IPropertiesService_contains_result&);
  IPropertiesService_contains_result() : success(0) {
  }

  virtual ~IPropertiesService_contains_result() noexcept;
  bool success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_contains_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_contains_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_contains_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_contains_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_contains_presult__isset {
  _IPropertiesService_contains_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_contains_presult__isset;

class IPropertiesService_contains_presult {
 public:


  virtual ~IPropertiesService_contains_presult() noexcept;
  bool* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_contains_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_toMap_args__isset {
  _IPropertiesService_toMap_args__isset() : id(false), defaults(false) {}
  bool id :1;
  bool defaults :1;
} _IPropertiesService_toMap_args__isset;

class IPropertiesService_toMap_args {
 public:

  IPropertiesService_toMap_args(const IPropertiesService_toMap_args&);
  IPropertiesService_toMap_args& operator=(const IPropertiesService_toMap_args&);
  IPropertiesService_toMap_args() : id(0), defaults(0) {
  }

  virtual ~IPropertiesService_toMap_args() noexcept;
  int64_t id;
  bool defaults;

  _IPropertiesService_toMap_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_defaults(const bool val);

  bool operator == (const IPropertiesService_toMap_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(defaults == rhs.defaults))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_toMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_toMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_toMap_pargs {
 public:


  virtual ~IPropertiesService_toMap_pargs() noexcept;
  const int64_t* id;
  const bool* defaults;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_toMap_result__isset {
  _IPropertiesService_toMap_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_toMap_result__isset;

class IPropertiesService_toMap_result {
 public:

  IPropertiesService_toMap_result(const IPropertiesService_toMap_result&);
  IPropertiesService_toMap_result& operator=(const IPropertiesService_toMap_result&);
  IPropertiesService_toMap_result() {
  }

  virtual ~IPropertiesService_toMap_result() noexcept;
  std::map<std::string, std::string>  success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_toMap_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_toMap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_toMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_toMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_toMap_presult__isset {
  _IPropertiesService_toMap_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IPropertiesService_toMap_presult__isset;

class IPropertiesService_toMap_presult {
 public:


  virtual ~IPropertiesService_toMap_presult() noexcept;
  std::map<std::string, std::string> * success;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_toMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_fromMap_args__isset {
  _IPropertiesService_fromMap_args__isset() : id(false), _map(false) {}
  bool id :1;
  bool _map :1;
} _IPropertiesService_fromMap_args__isset;

class IPropertiesService_fromMap_args {
 public:

  IPropertiesService_fromMap_args(const IPropertiesService_fromMap_args&);
  IPropertiesService_fromMap_args& operator=(const IPropertiesService_fromMap_args&);
  IPropertiesService_fromMap_args() : id(0) {
  }

  virtual ~IPropertiesService_fromMap_args() noexcept;
  int64_t id;
  std::map<std::string, std::string>  _map;

  _IPropertiesService_fromMap_args__isset __isset;

  void __set_id(const int64_t val);

  void __set__map(const std::map<std::string, std::string> & val);

  bool operator == (const IPropertiesService_fromMap_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(_map == rhs._map))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_fromMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_fromMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_fromMap_pargs {
 public:


  virtual ~IPropertiesService_fromMap_pargs() noexcept;
  const int64_t* id;
  const std::map<std::string, std::string> * _map;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_fromMap_result__isset {
  _IPropertiesService_fromMap_result__isset() : ex(false) {}
  bool ex :1;
} _IPropertiesService_fromMap_result__isset;

class IPropertiesService_fromMap_result {
 public:

  IPropertiesService_fromMap_result(const IPropertiesService_fromMap_result&);
  IPropertiesService_fromMap_result& operator=(const IPropertiesService_fromMap_result&);
  IPropertiesService_fromMap_result() {
  }

  virtual ~IPropertiesService_fromMap_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_fromMap_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_fromMap_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_fromMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_fromMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_fromMap_presult__isset {
  _IPropertiesService_fromMap_presult__isset() : ex(false) {}
  bool ex :1;
} _IPropertiesService_fromMap_presult__isset;

class IPropertiesService_fromMap_presult {
 public:


  virtual ~IPropertiesService_fromMap_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_fromMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_load_args__isset {
  _IPropertiesService_load_args__isset() : id(false), path(false) {}
  bool id :1;
  bool path :1;
} _IPropertiesService_load_args__isset;

class IPropertiesService_load_args {
 public:

  IPropertiesService_load_args(const IPropertiesService_load_args&);
  IPropertiesService_load_args& operator=(const IPropertiesService_load_args&);
  IPropertiesService_load_args() : id(0), path() {
  }

  virtual ~IPropertiesService_load_args() noexcept;
  int64_t id;
  std::string path;

  _IPropertiesService_load_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_path(const std::string& val);

  bool operator == (const IPropertiesService_load_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_load_pargs {
 public:


  virtual ~IPropertiesService_load_pargs() noexcept;
  const int64_t* id;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_load_result__isset {
  _IPropertiesService_load_result__isset() : ex(false) {}
  bool ex :1;
} _IPropertiesService_load_result__isset;

class IPropertiesService_load_result {
 public:

  IPropertiesService_load_result(const IPropertiesService_load_result&);
  IPropertiesService_load_result& operator=(const IPropertiesService_load_result&);
  IPropertiesService_load_result() {
  }

  virtual ~IPropertiesService_load_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_load_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_load_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_load_presult__isset {
  _IPropertiesService_load_presult__isset() : ex(false) {}
  bool ex :1;
} _IPropertiesService_load_presult__isset;

class IPropertiesService_load_presult {
 public:


  virtual ~IPropertiesService_load_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_load_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_store_args__isset {
  _IPropertiesService_store_args__isset() : id(false), path(false) {}
  bool id :1;
  bool path :1;
} _IPropertiesService_store_args__isset;

class IPropertiesService_store_args {
 public:

  IPropertiesService_store_args(const IPropertiesService_store_args&);
  IPropertiesService_store_args& operator=(const IPropertiesService_store_args&);
  IPropertiesService_store_args() : id(0), path() {
  }

  virtual ~IPropertiesService_store_args() noexcept;
  int64_t id;
  std::string path;

  _IPropertiesService_store_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_path(const std::string& val);

  bool operator == (const IPropertiesService_store_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_store_pargs {
 public:


  virtual ~IPropertiesService_store_pargs() noexcept;
  const int64_t* id;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_store_result__isset {
  _IPropertiesService_store_result__isset() : ex(false) {}
  bool ex :1;
} _IPropertiesService_store_result__isset;

class IPropertiesService_store_result {
 public:

  IPropertiesService_store_result(const IPropertiesService_store_result&);
  IPropertiesService_store_result& operator=(const IPropertiesService_store_result&);
  IPropertiesService_store_result() {
  }

  virtual ~IPropertiesService_store_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_store_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_store_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_store_presult__isset {
  _IPropertiesService_store_presult__isset() : ex(false) {}
  bool ex :1;
} _IPropertiesService_store_presult__isset;

class IPropertiesService_store_presult {
 public:


  virtual ~IPropertiesService_store_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IPropertiesService_clear_args__isset {
  _IPropertiesService_clear_args__isset() : id(false) {}
  bool id :1;
} _IPropertiesService_clear_args__isset;

class IPropertiesService_clear_args {
 public:

  IPropertiesService_clear_args(const IPropertiesService_clear_args&);
  IPropertiesService_clear_args& operator=(const IPropertiesService_clear_args&);
  IPropertiesService_clear_args() : id(0) {
  }

  virtual ~IPropertiesService_clear_args() noexcept;
  int64_t id;

  _IPropertiesService_clear_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IPropertiesService_clear_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_clear_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_clear_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPropertiesService_clear_pargs {
 public:


  virtual ~IPropertiesService_clear_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_clear_result__isset {
  _IPropertiesService_clear_result__isset() : ex(false) {}
  bool ex :1;
} _IPropertiesService_clear_result__isset;

class IPropertiesService_clear_result {
 public:

  IPropertiesService_clear_result(const IPropertiesService_clear_result&);
  IPropertiesService_clear_result& operator=(const IPropertiesService_clear_result&);
  IPropertiesService_clear_result() {
  }

  virtual ~IPropertiesService_clear_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_clear_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IPropertiesService_clear_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPropertiesService_clear_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPropertiesService_clear_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPropertiesService_clear_presult__isset {
  _IPropertiesService_clear_presult__isset() : ex(false) {}
  bool ex :1;
} _IPropertiesService_clear_presult__isset;

class IPropertiesService_clear_presult {
 public:


  virtual ~IPropertiesService_clear_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IPropertiesService_clear_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IPropertiesServiceClient : virtual public IPropertiesServiceIf {
 public:
  IPropertiesServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IPropertiesServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t newInstance();
  void send_newInstance();
  int64_t recv_newInstance();
  int64_t newInstance2(const int64_t id);
  void send_newInstance2(const int64_t id);
  int64_t recv_newInstance2();
  void setProperty(std::string& _return, const int64_t id, const std::string& key, const std::string& value);
  void send_setProperty(const int64_t id, const std::string& key, const std::string& value);
  void recv_setProperty(std::string& _return);
  void getProperty(std::string& _return, const int64_t id, const std::string& key);
  void send_getProperty(const int64_t id, const std::string& key);
  void recv_getProperty(std::string& _return);
  bool contains(const int64_t id, const std::string& key);
  void send_contains(const int64_t id, const std::string& key);
  bool recv_contains();
  void toMap(std::map<std::string, std::string> & _return, const int64_t id, const bool defaults);
  void send_toMap(const int64_t id, const bool defaults);
  void recv_toMap(std::map<std::string, std::string> & _return);
  void fromMap(const int64_t id, const std::map<std::string, std::string> & _map);
  void send_fromMap(const int64_t id, const std::map<std::string, std::string> & _map);
  void recv_fromMap();
  void load(const int64_t id, const std::string& path);
  void send_load(const int64_t id, const std::string& path);
  void recv_load();
  void store(const int64_t id, const std::string& path);
  void send_store(const int64_t id, const std::string& path);
  void recv_store();
  void clear(const int64_t id);
  void send_clear(const int64_t id);
  void recv_clear();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IPropertiesServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IPropertiesServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IPropertiesServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_newInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_contains(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_toMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fromMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IPropertiesServiceProcessor(::std::shared_ptr<IPropertiesServiceIf> iface) :
    iface_(iface) {
    processMap_["newInstance"] = &IPropertiesServiceProcessor::process_newInstance;
    processMap_["newInstance2"] = &IPropertiesServiceProcessor::process_newInstance2;
    processMap_["setProperty"] = &IPropertiesServiceProcessor::process_setProperty;
    processMap_["getProperty"] = &IPropertiesServiceProcessor::process_getProperty;
    processMap_["contains"] = &IPropertiesServiceProcessor::process_contains;
    processMap_["toMap"] = &IPropertiesServiceProcessor::process_toMap;
    processMap_["fromMap"] = &IPropertiesServiceProcessor::process_fromMap;
    processMap_["load"] = &IPropertiesServiceProcessor::process_load;
    processMap_["store"] = &IPropertiesServiceProcessor::process_store;
    processMap_["clear"] = &IPropertiesServiceProcessor::process_clear;
  }

  virtual ~IPropertiesServiceProcessor() {}
};

class IPropertiesServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IPropertiesServiceProcessorFactory(const ::std::shared_ptr< IPropertiesServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< IPropertiesServiceIfFactory > handlerFactory_;
};

class IPropertiesServiceMultiface : virtual public IPropertiesServiceIf {
 public:
  IPropertiesServiceMultiface(std::vector<std::shared_ptr<IPropertiesServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IPropertiesServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<IPropertiesServiceIf> > ifaces_;
  IPropertiesServiceMultiface() {}
  void add(::std::shared_ptr<IPropertiesServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t newInstance() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance();
    }
    return ifaces_[i]->newInstance();
  }

  int64_t newInstance2(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance2(id);
    }
    return ifaces_[i]->newInstance2(id);
  }

  void setProperty(std::string& _return, const int64_t id, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setProperty(_return, id, key, value);
    }
    ifaces_[i]->setProperty(_return, id, key, value);
    return;
  }

  void getProperty(std::string& _return, const int64_t id, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProperty(_return, id, key);
    }
    ifaces_[i]->getProperty(_return, id, key);
    return;
  }

  bool contains(const int64_t id, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->contains(id, key);
    }
    return ifaces_[i]->contains(id, key);
  }

  void toMap(std::map<std::string, std::string> & _return, const int64_t id, const bool defaults) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->toMap(_return, id, defaults);
    }
    ifaces_[i]->toMap(_return, id, defaults);
    return;
  }

  void fromMap(const int64_t id, const std::map<std::string, std::string> & _map) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fromMap(id, _map);
    }
    ifaces_[i]->fromMap(id, _map);
  }

  void load(const int64_t id, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load(id, path);
    }
    ifaces_[i]->load(id, path);
  }

  void store(const int64_t id, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->store(id, path);
    }
    ifaces_[i]->store(id, path);
  }

  void clear(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear(id);
    }
    ifaces_[i]->clear(id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IPropertiesServiceConcurrentClient : virtual public IPropertiesServiceIf {
 public:
  IPropertiesServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IPropertiesServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t newInstance();
  int32_t send_newInstance();
  int64_t recv_newInstance(const int32_t seqid);
  int64_t newInstance2(const int64_t id);
  int32_t send_newInstance2(const int64_t id);
  int64_t recv_newInstance2(const int32_t seqid);
  void setProperty(std::string& _return, const int64_t id, const std::string& key, const std::string& value);
  int32_t send_setProperty(const int64_t id, const std::string& key, const std::string& value);
  void recv_setProperty(std::string& _return, const int32_t seqid);
  void getProperty(std::string& _return, const int64_t id, const std::string& key);
  int32_t send_getProperty(const int64_t id, const std::string& key);
  void recv_getProperty(std::string& _return, const int32_t seqid);
  bool contains(const int64_t id, const std::string& key);
  int32_t send_contains(const int64_t id, const std::string& key);
  bool recv_contains(const int32_t seqid);
  void toMap(std::map<std::string, std::string> & _return, const int64_t id, const bool defaults);
  int32_t send_toMap(const int64_t id, const bool defaults);
  void recv_toMap(std::map<std::string, std::string> & _return, const int32_t seqid);
  void fromMap(const int64_t id, const std::map<std::string, std::string> & _map);
  int32_t send_fromMap(const int64_t id, const std::map<std::string, std::string> & _map);
  void recv_fromMap(const int32_t seqid);
  void load(const int64_t id, const std::string& path);
  int32_t send_load(const int64_t id, const std::string& path);
  void recv_load(const int32_t seqid);
  void store(const int64_t id, const std::string& path);
  int32_t send_store(const int64_t id, const std::string& path);
  void recv_store(const int32_t seqid);
  void clear(const int64_t id);
  int32_t send_clear(const int64_t id);
  void recv_clear(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
