/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "IDataFrameService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ignis { namespace rpc { namespace driver {


IDataFrameId::~IDataFrameId() noexcept {
}


void IDataFrameId::__set_cluster(const int64_t val) {
  this->cluster = val;
}

void IDataFrameId::__set_worker(const int64_t val) {
  this->worker = val;
}

void IDataFrameId::__set_dataFrame(const int64_t val) {
  this->dataFrame = val;
}
std::ostream& operator<<(std::ostream& out, const IDataFrameId& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IDataFrameId::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cluster = false;
  bool isset_worker = false;
  bool isset_dataFrame = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cluster);
          isset_cluster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->worker);
          isset_worker = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dataFrame);
          isset_dataFrame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cluster)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_worker)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dataFrame)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IDataFrameId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IDataFrameId");

  xfer += oprot->writeFieldBegin("cluster", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->cluster);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("worker", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->worker);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataFrame", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->dataFrame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IDataFrameId &a, IDataFrameId &b) {
  using ::std::swap;
  swap(a.cluster, b.cluster);
  swap(a.worker, b.worker);
  swap(a.dataFrame, b.dataFrame);
}

IDataFrameId::IDataFrameId(const IDataFrameId& other0) noexcept {
  cluster = other0.cluster;
  worker = other0.worker;
  dataFrame = other0.dataFrame;
}
IDataFrameId& IDataFrameId::operator=(const IDataFrameId& other1) noexcept {
  cluster = other1.cluster;
  worker = other1.worker;
  dataFrame = other1.dataFrame;
  return *this;
}
void IDataFrameId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IDataFrameId(";
  out << "cluster=" << to_string(cluster);
  out << ", " << "worker=" << to_string(worker);
  out << ", " << "dataFrame=" << to_string(dataFrame);
  out << ")";
}

}}} // namespace
