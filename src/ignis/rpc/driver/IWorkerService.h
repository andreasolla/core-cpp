/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IWorkerService_H
#define IWorkerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IWorkerService_types.h"

namespace ignis { namespace rpc { namespace driver {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IWorkerServiceIf {
 public:
  virtual ~IWorkerServiceIf() {}
  virtual void newInstance(IWorkerId& _return, const int64_t id, const std::string& type) = 0;
  virtual void newInstance3a(IWorkerId& _return, const int64_t id, const std::string& name, const std::string& type) = 0;
  virtual void newInstance3b(IWorkerId& _return, const int64_t id, const std::string& type, const int32_t cores) = 0;
  virtual void newInstance4(IWorkerId& _return, const int64_t id, const std::string& name, const std::string& type, const int32_t cores) = 0;
  virtual void setName(const IWorkerId& id, const std::string& name) = 0;
  virtual void parallelize( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const int64_t dataId) = 0;
  virtual void parallelize3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const int64_t dataId, const  ::ignis::rpc::ISource& src) = 0;
  virtual void importDataFrame( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data) = 0;
  virtual void importDataFrame3a( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions) = 0;
  virtual void importDataFrame3b( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const  ::ignis::rpc::ISource& src) = 0;
  virtual void importDataFrame4( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions, const  ::ignis::rpc::ISource& src) = 0;
  virtual void textFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path) = 0;
  virtual void textFile3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const int64_t minPartitions) = 0;
  virtual void partitionObjectFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path) = 0;
  virtual void partitionObjectFile3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src) = 0;
  virtual void partitionTextFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path) = 0;
  virtual void partitionJsonFile3a( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const bool objectMapping) = 0;
  virtual void partitionJsonFile3b( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src) = 0;
};

class IWorkerServiceIfFactory {
 public:
  typedef IWorkerServiceIf Handler;

  virtual ~IWorkerServiceIfFactory() {}

  virtual IWorkerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IWorkerServiceIf* /* handler */) = 0;
};

class IWorkerServiceIfSingletonFactory : virtual public IWorkerServiceIfFactory {
 public:
  IWorkerServiceIfSingletonFactory(const ::std::shared_ptr<IWorkerServiceIf>& iface) : iface_(iface) {}
  virtual ~IWorkerServiceIfSingletonFactory() {}

  virtual IWorkerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IWorkerServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<IWorkerServiceIf> iface_;
};

class IWorkerServiceNull : virtual public IWorkerServiceIf {
 public:
  virtual ~IWorkerServiceNull() {}
  void newInstance(IWorkerId& /* _return */, const int64_t /* id */, const std::string& /* type */) {
    return;
  }
  void newInstance3a(IWorkerId& /* _return */, const int64_t /* id */, const std::string& /* name */, const std::string& /* type */) {
    return;
  }
  void newInstance3b(IWorkerId& /* _return */, const int64_t /* id */, const std::string& /* type */, const int32_t /* cores */) {
    return;
  }
  void newInstance4(IWorkerId& /* _return */, const int64_t /* id */, const std::string& /* name */, const std::string& /* type */, const int32_t /* cores */) {
    return;
  }
  void setName(const IWorkerId& /* id */, const std::string& /* name */) {
    return;
  }
  void parallelize( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const int64_t /* dataId */) {
    return;
  }
  void parallelize3( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const int64_t /* dataId */, const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void importDataFrame( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const  ::ignis::rpc::driver::IDataFrameId& /* data */) {
    return;
  }
  void importDataFrame3a( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const  ::ignis::rpc::driver::IDataFrameId& /* data */, const int64_t /* partitions */) {
    return;
  }
  void importDataFrame3b( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const  ::ignis::rpc::driver::IDataFrameId& /* data */, const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void importDataFrame4( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const  ::ignis::rpc::driver::IDataFrameId& /* data */, const int64_t /* partitions */, const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void textFile( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const std::string& /* path */) {
    return;
  }
  void textFile3( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const std::string& /* path */, const int64_t /* minPartitions */) {
    return;
  }
  void partitionObjectFile( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const std::string& /* path */) {
    return;
  }
  void partitionObjectFile3( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const std::string& /* path */, const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void partitionTextFile( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const std::string& /* path */) {
    return;
  }
  void partitionJsonFile3a( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const std::string& /* path */, const bool /* objectMapping */) {
    return;
  }
  void partitionJsonFile3b( ::ignis::rpc::driver::IDataFrameId& /* _return */, const IWorkerId& /* id */, const std::string& /* path */, const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
};

typedef struct _IWorkerService_newInstance_args__isset {
  _IWorkerService_newInstance_args__isset() : id(false), type(false) {}
  bool id :1;
  bool type :1;
} _IWorkerService_newInstance_args__isset;

class IWorkerService_newInstance_args {
 public:

  IWorkerService_newInstance_args(const IWorkerService_newInstance_args&);
  IWorkerService_newInstance_args& operator=(const IWorkerService_newInstance_args&);
  IWorkerService_newInstance_args() : id(0), type() {
  }

  virtual ~IWorkerService_newInstance_args() noexcept;
  int64_t id;
  std::string type;

  _IWorkerService_newInstance_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_type(const std::string& val);

  bool operator == (const IWorkerService_newInstance_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_newInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_newInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_newInstance_pargs {
 public:


  virtual ~IWorkerService_newInstance_pargs() noexcept;
  const int64_t* id;
  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_newInstance_result__isset {
  _IWorkerService_newInstance_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_newInstance_result__isset;

class IWorkerService_newInstance_result {
 public:

  IWorkerService_newInstance_result(const IWorkerService_newInstance_result&);
  IWorkerService_newInstance_result& operator=(const IWorkerService_newInstance_result&);
  IWorkerService_newInstance_result() {
  }

  virtual ~IWorkerService_newInstance_result() noexcept;
  IWorkerId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_newInstance_result__isset __isset;

  void __set_success(const IWorkerId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_newInstance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_newInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_newInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_newInstance_presult__isset {
  _IWorkerService_newInstance_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_newInstance_presult__isset;

class IWorkerService_newInstance_presult {
 public:


  virtual ~IWorkerService_newInstance_presult() noexcept;
  IWorkerId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_newInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_newInstance3a_args__isset {
  _IWorkerService_newInstance3a_args__isset() : id(false), name(false), type(false) {}
  bool id :1;
  bool name :1;
  bool type :1;
} _IWorkerService_newInstance3a_args__isset;

class IWorkerService_newInstance3a_args {
 public:

  IWorkerService_newInstance3a_args(const IWorkerService_newInstance3a_args&);
  IWorkerService_newInstance3a_args& operator=(const IWorkerService_newInstance3a_args&);
  IWorkerService_newInstance3a_args() : id(0), name(), type() {
  }

  virtual ~IWorkerService_newInstance3a_args() noexcept;
  int64_t id;
  std::string name;
  std::string type;

  _IWorkerService_newInstance3a_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_name(const std::string& val);

  void __set_type(const std::string& val);

  bool operator == (const IWorkerService_newInstance3a_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_newInstance3a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_newInstance3a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_newInstance3a_pargs {
 public:


  virtual ~IWorkerService_newInstance3a_pargs() noexcept;
  const int64_t* id;
  const std::string* name;
  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_newInstance3a_result__isset {
  _IWorkerService_newInstance3a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_newInstance3a_result__isset;

class IWorkerService_newInstance3a_result {
 public:

  IWorkerService_newInstance3a_result(const IWorkerService_newInstance3a_result&);
  IWorkerService_newInstance3a_result& operator=(const IWorkerService_newInstance3a_result&);
  IWorkerService_newInstance3a_result() {
  }

  virtual ~IWorkerService_newInstance3a_result() noexcept;
  IWorkerId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_newInstance3a_result__isset __isset;

  void __set_success(const IWorkerId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_newInstance3a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_newInstance3a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_newInstance3a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_newInstance3a_presult__isset {
  _IWorkerService_newInstance3a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_newInstance3a_presult__isset;

class IWorkerService_newInstance3a_presult {
 public:


  virtual ~IWorkerService_newInstance3a_presult() noexcept;
  IWorkerId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_newInstance3a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_newInstance3b_args__isset {
  _IWorkerService_newInstance3b_args__isset() : id(false), type(false), cores(false) {}
  bool id :1;
  bool type :1;
  bool cores :1;
} _IWorkerService_newInstance3b_args__isset;

class IWorkerService_newInstance3b_args {
 public:

  IWorkerService_newInstance3b_args(const IWorkerService_newInstance3b_args&);
  IWorkerService_newInstance3b_args& operator=(const IWorkerService_newInstance3b_args&);
  IWorkerService_newInstance3b_args() : id(0), type(), cores(0) {
  }

  virtual ~IWorkerService_newInstance3b_args() noexcept;
  int64_t id;
  std::string type;
  int32_t cores;

  _IWorkerService_newInstance3b_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_type(const std::string& val);

  void __set_cores(const int32_t val);

  bool operator == (const IWorkerService_newInstance3b_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(cores == rhs.cores))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_newInstance3b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_newInstance3b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_newInstance3b_pargs {
 public:


  virtual ~IWorkerService_newInstance3b_pargs() noexcept;
  const int64_t* id;
  const std::string* type;
  const int32_t* cores;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_newInstance3b_result__isset {
  _IWorkerService_newInstance3b_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_newInstance3b_result__isset;

class IWorkerService_newInstance3b_result {
 public:

  IWorkerService_newInstance3b_result(const IWorkerService_newInstance3b_result&);
  IWorkerService_newInstance3b_result& operator=(const IWorkerService_newInstance3b_result&);
  IWorkerService_newInstance3b_result() {
  }

  virtual ~IWorkerService_newInstance3b_result() noexcept;
  IWorkerId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_newInstance3b_result__isset __isset;

  void __set_success(const IWorkerId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_newInstance3b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_newInstance3b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_newInstance3b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_newInstance3b_presult__isset {
  _IWorkerService_newInstance3b_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_newInstance3b_presult__isset;

class IWorkerService_newInstance3b_presult {
 public:


  virtual ~IWorkerService_newInstance3b_presult() noexcept;
  IWorkerId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_newInstance3b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_newInstance4_args__isset {
  _IWorkerService_newInstance4_args__isset() : id(false), name(false), type(false), cores(false) {}
  bool id :1;
  bool name :1;
  bool type :1;
  bool cores :1;
} _IWorkerService_newInstance4_args__isset;

class IWorkerService_newInstance4_args {
 public:

  IWorkerService_newInstance4_args(const IWorkerService_newInstance4_args&);
  IWorkerService_newInstance4_args& operator=(const IWorkerService_newInstance4_args&);
  IWorkerService_newInstance4_args() : id(0), name(), type(), cores(0) {
  }

  virtual ~IWorkerService_newInstance4_args() noexcept;
  int64_t id;
  std::string name;
  std::string type;
  int32_t cores;

  _IWorkerService_newInstance4_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_name(const std::string& val);

  void __set_type(const std::string& val);

  void __set_cores(const int32_t val);

  bool operator == (const IWorkerService_newInstance4_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(cores == rhs.cores))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_newInstance4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_newInstance4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_newInstance4_pargs {
 public:


  virtual ~IWorkerService_newInstance4_pargs() noexcept;
  const int64_t* id;
  const std::string* name;
  const std::string* type;
  const int32_t* cores;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_newInstance4_result__isset {
  _IWorkerService_newInstance4_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_newInstance4_result__isset;

class IWorkerService_newInstance4_result {
 public:

  IWorkerService_newInstance4_result(const IWorkerService_newInstance4_result&);
  IWorkerService_newInstance4_result& operator=(const IWorkerService_newInstance4_result&);
  IWorkerService_newInstance4_result() {
  }

  virtual ~IWorkerService_newInstance4_result() noexcept;
  IWorkerId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_newInstance4_result__isset __isset;

  void __set_success(const IWorkerId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_newInstance4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_newInstance4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_newInstance4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_newInstance4_presult__isset {
  _IWorkerService_newInstance4_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_newInstance4_presult__isset;

class IWorkerService_newInstance4_presult {
 public:


  virtual ~IWorkerService_newInstance4_presult() noexcept;
  IWorkerId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_newInstance4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_setName_args__isset {
  _IWorkerService_setName_args__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _IWorkerService_setName_args__isset;

class IWorkerService_setName_args {
 public:

  IWorkerService_setName_args(const IWorkerService_setName_args&);
  IWorkerService_setName_args& operator=(const IWorkerService_setName_args&);
  IWorkerService_setName_args() : name() {
  }

  virtual ~IWorkerService_setName_args() noexcept;
  IWorkerId id;
  std::string name;

  _IWorkerService_setName_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_name(const std::string& val);

  bool operator == (const IWorkerService_setName_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_setName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_setName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_setName_pargs {
 public:


  virtual ~IWorkerService_setName_pargs() noexcept;
  const IWorkerId* id;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_setName_result__isset {
  _IWorkerService_setName_result__isset() : ex(false) {}
  bool ex :1;
} _IWorkerService_setName_result__isset;

class IWorkerService_setName_result {
 public:

  IWorkerService_setName_result(const IWorkerService_setName_result&);
  IWorkerService_setName_result& operator=(const IWorkerService_setName_result&);
  IWorkerService_setName_result() {
  }

  virtual ~IWorkerService_setName_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_setName_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_setName_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_setName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_setName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_setName_presult__isset {
  _IWorkerService_setName_presult__isset() : ex(false) {}
  bool ex :1;
} _IWorkerService_setName_presult__isset;

class IWorkerService_setName_presult {
 public:


  virtual ~IWorkerService_setName_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_setName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_parallelize_args__isset {
  _IWorkerService_parallelize_args__isset() : id(false), dataId(false) {}
  bool id :1;
  bool dataId :1;
} _IWorkerService_parallelize_args__isset;

class IWorkerService_parallelize_args {
 public:

  IWorkerService_parallelize_args(const IWorkerService_parallelize_args&);
  IWorkerService_parallelize_args& operator=(const IWorkerService_parallelize_args&);
  IWorkerService_parallelize_args() : dataId(0) {
  }

  virtual ~IWorkerService_parallelize_args() noexcept;
  IWorkerId id;
  int64_t dataId;

  _IWorkerService_parallelize_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_dataId(const int64_t val);

  bool operator == (const IWorkerService_parallelize_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(dataId == rhs.dataId))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_parallelize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_parallelize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_parallelize_pargs {
 public:


  virtual ~IWorkerService_parallelize_pargs() noexcept;
  const IWorkerId* id;
  const int64_t* dataId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_parallelize_result__isset {
  _IWorkerService_parallelize_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_parallelize_result__isset;

class IWorkerService_parallelize_result {
 public:

  IWorkerService_parallelize_result(const IWorkerService_parallelize_result&);
  IWorkerService_parallelize_result& operator=(const IWorkerService_parallelize_result&);
  IWorkerService_parallelize_result() {
  }

  virtual ~IWorkerService_parallelize_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_parallelize_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_parallelize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_parallelize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_parallelize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_parallelize_presult__isset {
  _IWorkerService_parallelize_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_parallelize_presult__isset;

class IWorkerService_parallelize_presult {
 public:


  virtual ~IWorkerService_parallelize_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_parallelize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_parallelize3_args__isset {
  _IWorkerService_parallelize3_args__isset() : id(false), dataId(false), src(false) {}
  bool id :1;
  bool dataId :1;
  bool src :1;
} _IWorkerService_parallelize3_args__isset;

class IWorkerService_parallelize3_args {
 public:

  IWorkerService_parallelize3_args(const IWorkerService_parallelize3_args&);
  IWorkerService_parallelize3_args& operator=(const IWorkerService_parallelize3_args&);
  IWorkerService_parallelize3_args() : dataId(0) {
  }

  virtual ~IWorkerService_parallelize3_args() noexcept;
  IWorkerId id;
  int64_t dataId;
   ::ignis::rpc::ISource src;

  _IWorkerService_parallelize3_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_dataId(const int64_t val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IWorkerService_parallelize3_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(dataId == rhs.dataId))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_parallelize3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_parallelize3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_parallelize3_pargs {
 public:


  virtual ~IWorkerService_parallelize3_pargs() noexcept;
  const IWorkerId* id;
  const int64_t* dataId;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_parallelize3_result__isset {
  _IWorkerService_parallelize3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_parallelize3_result__isset;

class IWorkerService_parallelize3_result {
 public:

  IWorkerService_parallelize3_result(const IWorkerService_parallelize3_result&);
  IWorkerService_parallelize3_result& operator=(const IWorkerService_parallelize3_result&);
  IWorkerService_parallelize3_result() {
  }

  virtual ~IWorkerService_parallelize3_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_parallelize3_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_parallelize3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_parallelize3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_parallelize3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_parallelize3_presult__isset {
  _IWorkerService_parallelize3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_parallelize3_presult__isset;

class IWorkerService_parallelize3_presult {
 public:


  virtual ~IWorkerService_parallelize3_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_parallelize3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_importDataFrame_args__isset {
  _IWorkerService_importDataFrame_args__isset() : id(false), data(false) {}
  bool id :1;
  bool data :1;
} _IWorkerService_importDataFrame_args__isset;

class IWorkerService_importDataFrame_args {
 public:

  IWorkerService_importDataFrame_args(const IWorkerService_importDataFrame_args&);
  IWorkerService_importDataFrame_args& operator=(const IWorkerService_importDataFrame_args&);
  IWorkerService_importDataFrame_args() {
  }

  virtual ~IWorkerService_importDataFrame_args() noexcept;
  IWorkerId id;
   ::ignis::rpc::driver::IDataFrameId data;

  _IWorkerService_importDataFrame_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_data(const  ::ignis::rpc::driver::IDataFrameId& val);

  bool operator == (const IWorkerService_importDataFrame_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_importDataFrame_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_importDataFrame_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_importDataFrame_pargs {
 public:


  virtual ~IWorkerService_importDataFrame_pargs() noexcept;
  const IWorkerId* id;
  const  ::ignis::rpc::driver::IDataFrameId* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_importDataFrame_result__isset {
  _IWorkerService_importDataFrame_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_importDataFrame_result__isset;

class IWorkerService_importDataFrame_result {
 public:

  IWorkerService_importDataFrame_result(const IWorkerService_importDataFrame_result&);
  IWorkerService_importDataFrame_result& operator=(const IWorkerService_importDataFrame_result&);
  IWorkerService_importDataFrame_result() {
  }

  virtual ~IWorkerService_importDataFrame_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_importDataFrame_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_importDataFrame_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_importDataFrame_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_importDataFrame_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_importDataFrame_presult__isset {
  _IWorkerService_importDataFrame_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_importDataFrame_presult__isset;

class IWorkerService_importDataFrame_presult {
 public:


  virtual ~IWorkerService_importDataFrame_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_importDataFrame_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_importDataFrame3a_args__isset {
  _IWorkerService_importDataFrame3a_args__isset() : id(false), data(false), partitions(false) {}
  bool id :1;
  bool data :1;
  bool partitions :1;
} _IWorkerService_importDataFrame3a_args__isset;

class IWorkerService_importDataFrame3a_args {
 public:

  IWorkerService_importDataFrame3a_args(const IWorkerService_importDataFrame3a_args&);
  IWorkerService_importDataFrame3a_args& operator=(const IWorkerService_importDataFrame3a_args&);
  IWorkerService_importDataFrame3a_args() : partitions(0) {
  }

  virtual ~IWorkerService_importDataFrame3a_args() noexcept;
  IWorkerId id;
   ::ignis::rpc::driver::IDataFrameId data;
  int64_t partitions;

  _IWorkerService_importDataFrame3a_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_data(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_partitions(const int64_t val);

  bool operator == (const IWorkerService_importDataFrame3a_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_importDataFrame3a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_importDataFrame3a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_importDataFrame3a_pargs {
 public:


  virtual ~IWorkerService_importDataFrame3a_pargs() noexcept;
  const IWorkerId* id;
  const  ::ignis::rpc::driver::IDataFrameId* data;
  const int64_t* partitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_importDataFrame3a_result__isset {
  _IWorkerService_importDataFrame3a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_importDataFrame3a_result__isset;

class IWorkerService_importDataFrame3a_result {
 public:

  IWorkerService_importDataFrame3a_result(const IWorkerService_importDataFrame3a_result&);
  IWorkerService_importDataFrame3a_result& operator=(const IWorkerService_importDataFrame3a_result&);
  IWorkerService_importDataFrame3a_result() {
  }

  virtual ~IWorkerService_importDataFrame3a_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_importDataFrame3a_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_importDataFrame3a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_importDataFrame3a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_importDataFrame3a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_importDataFrame3a_presult__isset {
  _IWorkerService_importDataFrame3a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_importDataFrame3a_presult__isset;

class IWorkerService_importDataFrame3a_presult {
 public:


  virtual ~IWorkerService_importDataFrame3a_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_importDataFrame3a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_importDataFrame3b_args__isset {
  _IWorkerService_importDataFrame3b_args__isset() : id(false), data(false), src(false) {}
  bool id :1;
  bool data :1;
  bool src :1;
} _IWorkerService_importDataFrame3b_args__isset;

class IWorkerService_importDataFrame3b_args {
 public:

  IWorkerService_importDataFrame3b_args(const IWorkerService_importDataFrame3b_args&);
  IWorkerService_importDataFrame3b_args& operator=(const IWorkerService_importDataFrame3b_args&);
  IWorkerService_importDataFrame3b_args() {
  }

  virtual ~IWorkerService_importDataFrame3b_args() noexcept;
  IWorkerId id;
   ::ignis::rpc::driver::IDataFrameId data;
   ::ignis::rpc::ISource src;

  _IWorkerService_importDataFrame3b_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_data(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IWorkerService_importDataFrame3b_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_importDataFrame3b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_importDataFrame3b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_importDataFrame3b_pargs {
 public:


  virtual ~IWorkerService_importDataFrame3b_pargs() noexcept;
  const IWorkerId* id;
  const  ::ignis::rpc::driver::IDataFrameId* data;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_importDataFrame3b_result__isset {
  _IWorkerService_importDataFrame3b_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_importDataFrame3b_result__isset;

class IWorkerService_importDataFrame3b_result {
 public:

  IWorkerService_importDataFrame3b_result(const IWorkerService_importDataFrame3b_result&);
  IWorkerService_importDataFrame3b_result& operator=(const IWorkerService_importDataFrame3b_result&);
  IWorkerService_importDataFrame3b_result() {
  }

  virtual ~IWorkerService_importDataFrame3b_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_importDataFrame3b_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_importDataFrame3b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_importDataFrame3b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_importDataFrame3b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_importDataFrame3b_presult__isset {
  _IWorkerService_importDataFrame3b_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_importDataFrame3b_presult__isset;

class IWorkerService_importDataFrame3b_presult {
 public:


  virtual ~IWorkerService_importDataFrame3b_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_importDataFrame3b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_importDataFrame4_args__isset {
  _IWorkerService_importDataFrame4_args__isset() : id(false), data(false), partitions(false), src(false) {}
  bool id :1;
  bool data :1;
  bool partitions :1;
  bool src :1;
} _IWorkerService_importDataFrame4_args__isset;

class IWorkerService_importDataFrame4_args {
 public:

  IWorkerService_importDataFrame4_args(const IWorkerService_importDataFrame4_args&);
  IWorkerService_importDataFrame4_args& operator=(const IWorkerService_importDataFrame4_args&);
  IWorkerService_importDataFrame4_args() : partitions(0) {
  }

  virtual ~IWorkerService_importDataFrame4_args() noexcept;
  IWorkerId id;
   ::ignis::rpc::driver::IDataFrameId data;
  int64_t partitions;
   ::ignis::rpc::ISource src;

  _IWorkerService_importDataFrame4_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_data(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_partitions(const int64_t val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IWorkerService_importDataFrame4_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_importDataFrame4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_importDataFrame4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_importDataFrame4_pargs {
 public:


  virtual ~IWorkerService_importDataFrame4_pargs() noexcept;
  const IWorkerId* id;
  const  ::ignis::rpc::driver::IDataFrameId* data;
  const int64_t* partitions;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_importDataFrame4_result__isset {
  _IWorkerService_importDataFrame4_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_importDataFrame4_result__isset;

class IWorkerService_importDataFrame4_result {
 public:

  IWorkerService_importDataFrame4_result(const IWorkerService_importDataFrame4_result&);
  IWorkerService_importDataFrame4_result& operator=(const IWorkerService_importDataFrame4_result&);
  IWorkerService_importDataFrame4_result() {
  }

  virtual ~IWorkerService_importDataFrame4_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_importDataFrame4_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_importDataFrame4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_importDataFrame4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_importDataFrame4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_importDataFrame4_presult__isset {
  _IWorkerService_importDataFrame4_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_importDataFrame4_presult__isset;

class IWorkerService_importDataFrame4_presult {
 public:


  virtual ~IWorkerService_importDataFrame4_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_importDataFrame4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_textFile_args__isset {
  _IWorkerService_textFile_args__isset() : id(false), path(false) {}
  bool id :1;
  bool path :1;
} _IWorkerService_textFile_args__isset;

class IWorkerService_textFile_args {
 public:

  IWorkerService_textFile_args(const IWorkerService_textFile_args&);
  IWorkerService_textFile_args& operator=(const IWorkerService_textFile_args&);
  IWorkerService_textFile_args() : path() {
  }

  virtual ~IWorkerService_textFile_args() noexcept;
  IWorkerId id;
  std::string path;

  _IWorkerService_textFile_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_path(const std::string& val);

  bool operator == (const IWorkerService_textFile_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_textFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_textFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_textFile_pargs {
 public:


  virtual ~IWorkerService_textFile_pargs() noexcept;
  const IWorkerId* id;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_textFile_result__isset {
  _IWorkerService_textFile_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_textFile_result__isset;

class IWorkerService_textFile_result {
 public:

  IWorkerService_textFile_result(const IWorkerService_textFile_result&);
  IWorkerService_textFile_result& operator=(const IWorkerService_textFile_result&);
  IWorkerService_textFile_result() {
  }

  virtual ~IWorkerService_textFile_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_textFile_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_textFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_textFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_textFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_textFile_presult__isset {
  _IWorkerService_textFile_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_textFile_presult__isset;

class IWorkerService_textFile_presult {
 public:


  virtual ~IWorkerService_textFile_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_textFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_textFile3_args__isset {
  _IWorkerService_textFile3_args__isset() : id(false), path(false), minPartitions(false) {}
  bool id :1;
  bool path :1;
  bool minPartitions :1;
} _IWorkerService_textFile3_args__isset;

class IWorkerService_textFile3_args {
 public:

  IWorkerService_textFile3_args(const IWorkerService_textFile3_args&);
  IWorkerService_textFile3_args& operator=(const IWorkerService_textFile3_args&);
  IWorkerService_textFile3_args() : path(), minPartitions(0) {
  }

  virtual ~IWorkerService_textFile3_args() noexcept;
  IWorkerId id;
  std::string path;
  int64_t minPartitions;

  _IWorkerService_textFile3_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_path(const std::string& val);

  void __set_minPartitions(const int64_t val);

  bool operator == (const IWorkerService_textFile3_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(minPartitions == rhs.minPartitions))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_textFile3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_textFile3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_textFile3_pargs {
 public:


  virtual ~IWorkerService_textFile3_pargs() noexcept;
  const IWorkerId* id;
  const std::string* path;
  const int64_t* minPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_textFile3_result__isset {
  _IWorkerService_textFile3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_textFile3_result__isset;

class IWorkerService_textFile3_result {
 public:

  IWorkerService_textFile3_result(const IWorkerService_textFile3_result&);
  IWorkerService_textFile3_result& operator=(const IWorkerService_textFile3_result&);
  IWorkerService_textFile3_result() {
  }

  virtual ~IWorkerService_textFile3_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_textFile3_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_textFile3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_textFile3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_textFile3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_textFile3_presult__isset {
  _IWorkerService_textFile3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_textFile3_presult__isset;

class IWorkerService_textFile3_presult {
 public:


  virtual ~IWorkerService_textFile3_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_textFile3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_partitionObjectFile_args__isset {
  _IWorkerService_partitionObjectFile_args__isset() : id(false), path(false) {}
  bool id :1;
  bool path :1;
} _IWorkerService_partitionObjectFile_args__isset;

class IWorkerService_partitionObjectFile_args {
 public:

  IWorkerService_partitionObjectFile_args(const IWorkerService_partitionObjectFile_args&);
  IWorkerService_partitionObjectFile_args& operator=(const IWorkerService_partitionObjectFile_args&);
  IWorkerService_partitionObjectFile_args() : path() {
  }

  virtual ~IWorkerService_partitionObjectFile_args() noexcept;
  IWorkerId id;
  std::string path;

  _IWorkerService_partitionObjectFile_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_path(const std::string& val);

  bool operator == (const IWorkerService_partitionObjectFile_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionObjectFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionObjectFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_partitionObjectFile_pargs {
 public:


  virtual ~IWorkerService_partitionObjectFile_pargs() noexcept;
  const IWorkerId* id;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionObjectFile_result__isset {
  _IWorkerService_partitionObjectFile_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionObjectFile_result__isset;

class IWorkerService_partitionObjectFile_result {
 public:

  IWorkerService_partitionObjectFile_result(const IWorkerService_partitionObjectFile_result&);
  IWorkerService_partitionObjectFile_result& operator=(const IWorkerService_partitionObjectFile_result&);
  IWorkerService_partitionObjectFile_result() {
  }

  virtual ~IWorkerService_partitionObjectFile_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionObjectFile_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_partitionObjectFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionObjectFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionObjectFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionObjectFile_presult__isset {
  _IWorkerService_partitionObjectFile_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionObjectFile_presult__isset;

class IWorkerService_partitionObjectFile_presult {
 public:


  virtual ~IWorkerService_partitionObjectFile_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionObjectFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_partitionObjectFile3_args__isset {
  _IWorkerService_partitionObjectFile3_args__isset() : id(false), path(false), src(false) {}
  bool id :1;
  bool path :1;
  bool src :1;
} _IWorkerService_partitionObjectFile3_args__isset;

class IWorkerService_partitionObjectFile3_args {
 public:

  IWorkerService_partitionObjectFile3_args(const IWorkerService_partitionObjectFile3_args&);
  IWorkerService_partitionObjectFile3_args& operator=(const IWorkerService_partitionObjectFile3_args&);
  IWorkerService_partitionObjectFile3_args() : path() {
  }

  virtual ~IWorkerService_partitionObjectFile3_args() noexcept;
  IWorkerId id;
  std::string path;
   ::ignis::rpc::ISource src;

  _IWorkerService_partitionObjectFile3_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_path(const std::string& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IWorkerService_partitionObjectFile3_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionObjectFile3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionObjectFile3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_partitionObjectFile3_pargs {
 public:


  virtual ~IWorkerService_partitionObjectFile3_pargs() noexcept;
  const IWorkerId* id;
  const std::string* path;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionObjectFile3_result__isset {
  _IWorkerService_partitionObjectFile3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionObjectFile3_result__isset;

class IWorkerService_partitionObjectFile3_result {
 public:

  IWorkerService_partitionObjectFile3_result(const IWorkerService_partitionObjectFile3_result&);
  IWorkerService_partitionObjectFile3_result& operator=(const IWorkerService_partitionObjectFile3_result&);
  IWorkerService_partitionObjectFile3_result() {
  }

  virtual ~IWorkerService_partitionObjectFile3_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionObjectFile3_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_partitionObjectFile3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionObjectFile3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionObjectFile3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionObjectFile3_presult__isset {
  _IWorkerService_partitionObjectFile3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionObjectFile3_presult__isset;

class IWorkerService_partitionObjectFile3_presult {
 public:


  virtual ~IWorkerService_partitionObjectFile3_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionObjectFile3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_partitionTextFile_args__isset {
  _IWorkerService_partitionTextFile_args__isset() : id(false), path(false) {}
  bool id :1;
  bool path :1;
} _IWorkerService_partitionTextFile_args__isset;

class IWorkerService_partitionTextFile_args {
 public:

  IWorkerService_partitionTextFile_args(const IWorkerService_partitionTextFile_args&);
  IWorkerService_partitionTextFile_args& operator=(const IWorkerService_partitionTextFile_args&);
  IWorkerService_partitionTextFile_args() : path() {
  }

  virtual ~IWorkerService_partitionTextFile_args() noexcept;
  IWorkerId id;
  std::string path;

  _IWorkerService_partitionTextFile_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_path(const std::string& val);

  bool operator == (const IWorkerService_partitionTextFile_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionTextFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionTextFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_partitionTextFile_pargs {
 public:


  virtual ~IWorkerService_partitionTextFile_pargs() noexcept;
  const IWorkerId* id;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionTextFile_result__isset {
  _IWorkerService_partitionTextFile_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionTextFile_result__isset;

class IWorkerService_partitionTextFile_result {
 public:

  IWorkerService_partitionTextFile_result(const IWorkerService_partitionTextFile_result&);
  IWorkerService_partitionTextFile_result& operator=(const IWorkerService_partitionTextFile_result&);
  IWorkerService_partitionTextFile_result() {
  }

  virtual ~IWorkerService_partitionTextFile_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionTextFile_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_partitionTextFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionTextFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionTextFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionTextFile_presult__isset {
  _IWorkerService_partitionTextFile_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionTextFile_presult__isset;

class IWorkerService_partitionTextFile_presult {
 public:


  virtual ~IWorkerService_partitionTextFile_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionTextFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_partitionJsonFile3a_args__isset {
  _IWorkerService_partitionJsonFile3a_args__isset() : id(false), path(false), objectMapping(false) {}
  bool id :1;
  bool path :1;
  bool objectMapping :1;
} _IWorkerService_partitionJsonFile3a_args__isset;

class IWorkerService_partitionJsonFile3a_args {
 public:

  IWorkerService_partitionJsonFile3a_args(const IWorkerService_partitionJsonFile3a_args&);
  IWorkerService_partitionJsonFile3a_args& operator=(const IWorkerService_partitionJsonFile3a_args&);
  IWorkerService_partitionJsonFile3a_args() : path(), objectMapping(0) {
  }

  virtual ~IWorkerService_partitionJsonFile3a_args() noexcept;
  IWorkerId id;
  std::string path;
  bool objectMapping;

  _IWorkerService_partitionJsonFile3a_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_path(const std::string& val);

  void __set_objectMapping(const bool val);

  bool operator == (const IWorkerService_partitionJsonFile3a_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(objectMapping == rhs.objectMapping))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionJsonFile3a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionJsonFile3a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_partitionJsonFile3a_pargs {
 public:


  virtual ~IWorkerService_partitionJsonFile3a_pargs() noexcept;
  const IWorkerId* id;
  const std::string* path;
  const bool* objectMapping;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionJsonFile3a_result__isset {
  _IWorkerService_partitionJsonFile3a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionJsonFile3a_result__isset;

class IWorkerService_partitionJsonFile3a_result {
 public:

  IWorkerService_partitionJsonFile3a_result(const IWorkerService_partitionJsonFile3a_result&);
  IWorkerService_partitionJsonFile3a_result& operator=(const IWorkerService_partitionJsonFile3a_result&);
  IWorkerService_partitionJsonFile3a_result() {
  }

  virtual ~IWorkerService_partitionJsonFile3a_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionJsonFile3a_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_partitionJsonFile3a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionJsonFile3a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionJsonFile3a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionJsonFile3a_presult__isset {
  _IWorkerService_partitionJsonFile3a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionJsonFile3a_presult__isset;

class IWorkerService_partitionJsonFile3a_presult {
 public:


  virtual ~IWorkerService_partitionJsonFile3a_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionJsonFile3a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IWorkerService_partitionJsonFile3b_args__isset {
  _IWorkerService_partitionJsonFile3b_args__isset() : id(false), path(false), src(false) {}
  bool id :1;
  bool path :1;
  bool src :1;
} _IWorkerService_partitionJsonFile3b_args__isset;

class IWorkerService_partitionJsonFile3b_args {
 public:

  IWorkerService_partitionJsonFile3b_args(const IWorkerService_partitionJsonFile3b_args&);
  IWorkerService_partitionJsonFile3b_args& operator=(const IWorkerService_partitionJsonFile3b_args&);
  IWorkerService_partitionJsonFile3b_args() : path() {
  }

  virtual ~IWorkerService_partitionJsonFile3b_args() noexcept;
  IWorkerId id;
  std::string path;
   ::ignis::rpc::ISource src;

  _IWorkerService_partitionJsonFile3b_args__isset __isset;

  void __set_id(const IWorkerId& val);

  void __set_path(const std::string& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IWorkerService_partitionJsonFile3b_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionJsonFile3b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionJsonFile3b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IWorkerService_partitionJsonFile3b_pargs {
 public:


  virtual ~IWorkerService_partitionJsonFile3b_pargs() noexcept;
  const IWorkerId* id;
  const std::string* path;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionJsonFile3b_result__isset {
  _IWorkerService_partitionJsonFile3b_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionJsonFile3b_result__isset;

class IWorkerService_partitionJsonFile3b_result {
 public:

  IWorkerService_partitionJsonFile3b_result(const IWorkerService_partitionJsonFile3b_result&);
  IWorkerService_partitionJsonFile3b_result& operator=(const IWorkerService_partitionJsonFile3b_result&);
  IWorkerService_partitionJsonFile3b_result() {
  }

  virtual ~IWorkerService_partitionJsonFile3b_result() noexcept;
   ::ignis::rpc::driver::IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionJsonFile3b_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IWorkerService_partitionJsonFile3b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IWorkerService_partitionJsonFile3b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IWorkerService_partitionJsonFile3b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IWorkerService_partitionJsonFile3b_presult__isset {
  _IWorkerService_partitionJsonFile3b_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IWorkerService_partitionJsonFile3b_presult__isset;

class IWorkerService_partitionJsonFile3b_presult {
 public:


  virtual ~IWorkerService_partitionJsonFile3b_presult() noexcept;
   ::ignis::rpc::driver::IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IWorkerService_partitionJsonFile3b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IWorkerServiceClient : virtual public IWorkerServiceIf {
 public:
  IWorkerServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IWorkerServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void newInstance(IWorkerId& _return, const int64_t id, const std::string& type);
  void send_newInstance(const int64_t id, const std::string& type);
  void recv_newInstance(IWorkerId& _return);
  void newInstance3a(IWorkerId& _return, const int64_t id, const std::string& name, const std::string& type);
  void send_newInstance3a(const int64_t id, const std::string& name, const std::string& type);
  void recv_newInstance3a(IWorkerId& _return);
  void newInstance3b(IWorkerId& _return, const int64_t id, const std::string& type, const int32_t cores);
  void send_newInstance3b(const int64_t id, const std::string& type, const int32_t cores);
  void recv_newInstance3b(IWorkerId& _return);
  void newInstance4(IWorkerId& _return, const int64_t id, const std::string& name, const std::string& type, const int32_t cores);
  void send_newInstance4(const int64_t id, const std::string& name, const std::string& type, const int32_t cores);
  void recv_newInstance4(IWorkerId& _return);
  void setName(const IWorkerId& id, const std::string& name);
  void send_setName(const IWorkerId& id, const std::string& name);
  void recv_setName();
  void parallelize( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const int64_t dataId);
  void send_parallelize(const IWorkerId& id, const int64_t dataId);
  void recv_parallelize( ::ignis::rpc::driver::IDataFrameId& _return);
  void parallelize3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const int64_t dataId, const  ::ignis::rpc::ISource& src);
  void send_parallelize3(const IWorkerId& id, const int64_t dataId, const  ::ignis::rpc::ISource& src);
  void recv_parallelize3( ::ignis::rpc::driver::IDataFrameId& _return);
  void importDataFrame( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data);
  void send_importDataFrame(const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data);
  void recv_importDataFrame( ::ignis::rpc::driver::IDataFrameId& _return);
  void importDataFrame3a( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions);
  void send_importDataFrame3a(const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions);
  void recv_importDataFrame3a( ::ignis::rpc::driver::IDataFrameId& _return);
  void importDataFrame3b( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const  ::ignis::rpc::ISource& src);
  void send_importDataFrame3b(const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const  ::ignis::rpc::ISource& src);
  void recv_importDataFrame3b( ::ignis::rpc::driver::IDataFrameId& _return);
  void importDataFrame4( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions, const  ::ignis::rpc::ISource& src);
  void send_importDataFrame4(const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions, const  ::ignis::rpc::ISource& src);
  void recv_importDataFrame4( ::ignis::rpc::driver::IDataFrameId& _return);
  void textFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path);
  void send_textFile(const IWorkerId& id, const std::string& path);
  void recv_textFile( ::ignis::rpc::driver::IDataFrameId& _return);
  void textFile3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const int64_t minPartitions);
  void send_textFile3(const IWorkerId& id, const std::string& path, const int64_t minPartitions);
  void recv_textFile3( ::ignis::rpc::driver::IDataFrameId& _return);
  void partitionObjectFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path);
  void send_partitionObjectFile(const IWorkerId& id, const std::string& path);
  void recv_partitionObjectFile( ::ignis::rpc::driver::IDataFrameId& _return);
  void partitionObjectFile3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src);
  void send_partitionObjectFile3(const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src);
  void recv_partitionObjectFile3( ::ignis::rpc::driver::IDataFrameId& _return);
  void partitionTextFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path);
  void send_partitionTextFile(const IWorkerId& id, const std::string& path);
  void recv_partitionTextFile( ::ignis::rpc::driver::IDataFrameId& _return);
  void partitionJsonFile3a( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const bool objectMapping);
  void send_partitionJsonFile3a(const IWorkerId& id, const std::string& path, const bool objectMapping);
  void recv_partitionJsonFile3a( ::ignis::rpc::driver::IDataFrameId& _return);
  void partitionJsonFile3b( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src);
  void send_partitionJsonFile3b(const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src);
  void recv_partitionJsonFile3b( ::ignis::rpc::driver::IDataFrameId& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IWorkerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IWorkerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IWorkerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_newInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance3a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance3b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_parallelize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_parallelize3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_importDataFrame(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_importDataFrame3a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_importDataFrame3b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_importDataFrame4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_textFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_textFile3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionObjectFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionObjectFile3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionTextFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionJsonFile3a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionJsonFile3b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IWorkerServiceProcessor(::std::shared_ptr<IWorkerServiceIf> iface) :
    iface_(iface) {
    processMap_["newInstance"] = &IWorkerServiceProcessor::process_newInstance;
    processMap_["newInstance3a"] = &IWorkerServiceProcessor::process_newInstance3a;
    processMap_["newInstance3b"] = &IWorkerServiceProcessor::process_newInstance3b;
    processMap_["newInstance4"] = &IWorkerServiceProcessor::process_newInstance4;
    processMap_["setName"] = &IWorkerServiceProcessor::process_setName;
    processMap_["parallelize"] = &IWorkerServiceProcessor::process_parallelize;
    processMap_["parallelize3"] = &IWorkerServiceProcessor::process_parallelize3;
    processMap_["importDataFrame"] = &IWorkerServiceProcessor::process_importDataFrame;
    processMap_["importDataFrame3a"] = &IWorkerServiceProcessor::process_importDataFrame3a;
    processMap_["importDataFrame3b"] = &IWorkerServiceProcessor::process_importDataFrame3b;
    processMap_["importDataFrame4"] = &IWorkerServiceProcessor::process_importDataFrame4;
    processMap_["textFile"] = &IWorkerServiceProcessor::process_textFile;
    processMap_["textFile3"] = &IWorkerServiceProcessor::process_textFile3;
    processMap_["partitionObjectFile"] = &IWorkerServiceProcessor::process_partitionObjectFile;
    processMap_["partitionObjectFile3"] = &IWorkerServiceProcessor::process_partitionObjectFile3;
    processMap_["partitionTextFile"] = &IWorkerServiceProcessor::process_partitionTextFile;
    processMap_["partitionJsonFile3a"] = &IWorkerServiceProcessor::process_partitionJsonFile3a;
    processMap_["partitionJsonFile3b"] = &IWorkerServiceProcessor::process_partitionJsonFile3b;
  }

  virtual ~IWorkerServiceProcessor() {}
};

class IWorkerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IWorkerServiceProcessorFactory(const ::std::shared_ptr< IWorkerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< IWorkerServiceIfFactory > handlerFactory_;
};

class IWorkerServiceMultiface : virtual public IWorkerServiceIf {
 public:
  IWorkerServiceMultiface(std::vector<std::shared_ptr<IWorkerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IWorkerServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<IWorkerServiceIf> > ifaces_;
  IWorkerServiceMultiface() {}
  void add(::std::shared_ptr<IWorkerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void newInstance(IWorkerId& _return, const int64_t id, const std::string& type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance(_return, id, type);
    }
    ifaces_[i]->newInstance(_return, id, type);
    return;
  }

  void newInstance3a(IWorkerId& _return, const int64_t id, const std::string& name, const std::string& type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance3a(_return, id, name, type);
    }
    ifaces_[i]->newInstance3a(_return, id, name, type);
    return;
  }

  void newInstance3b(IWorkerId& _return, const int64_t id, const std::string& type, const int32_t cores) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance3b(_return, id, type, cores);
    }
    ifaces_[i]->newInstance3b(_return, id, type, cores);
    return;
  }

  void newInstance4(IWorkerId& _return, const int64_t id, const std::string& name, const std::string& type, const int32_t cores) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance4(_return, id, name, type, cores);
    }
    ifaces_[i]->newInstance4(_return, id, name, type, cores);
    return;
  }

  void setName(const IWorkerId& id, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setName(id, name);
    }
    ifaces_[i]->setName(id, name);
  }

  void parallelize( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const int64_t dataId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->parallelize(_return, id, dataId);
    }
    ifaces_[i]->parallelize(_return, id, dataId);
    return;
  }

  void parallelize3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const int64_t dataId, const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->parallelize3(_return, id, dataId, src);
    }
    ifaces_[i]->parallelize3(_return, id, dataId, src);
    return;
  }

  void importDataFrame( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->importDataFrame(_return, id, data);
    }
    ifaces_[i]->importDataFrame(_return, id, data);
    return;
  }

  void importDataFrame3a( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->importDataFrame3a(_return, id, data, partitions);
    }
    ifaces_[i]->importDataFrame3a(_return, id, data, partitions);
    return;
  }

  void importDataFrame3b( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->importDataFrame3b(_return, id, data, src);
    }
    ifaces_[i]->importDataFrame3b(_return, id, data, src);
    return;
  }

  void importDataFrame4( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions, const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->importDataFrame4(_return, id, data, partitions, src);
    }
    ifaces_[i]->importDataFrame4(_return, id, data, partitions, src);
    return;
  }

  void textFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->textFile(_return, id, path);
    }
    ifaces_[i]->textFile(_return, id, path);
    return;
  }

  void textFile3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const int64_t minPartitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->textFile3(_return, id, path, minPartitions);
    }
    ifaces_[i]->textFile3(_return, id, path, minPartitions);
    return;
  }

  void partitionObjectFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionObjectFile(_return, id, path);
    }
    ifaces_[i]->partitionObjectFile(_return, id, path);
    return;
  }

  void partitionObjectFile3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionObjectFile3(_return, id, path, src);
    }
    ifaces_[i]->partitionObjectFile3(_return, id, path, src);
    return;
  }

  void partitionTextFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionTextFile(_return, id, path);
    }
    ifaces_[i]->partitionTextFile(_return, id, path);
    return;
  }

  void partitionJsonFile3a( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const bool objectMapping) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionJsonFile3a(_return, id, path, objectMapping);
    }
    ifaces_[i]->partitionJsonFile3a(_return, id, path, objectMapping);
    return;
  }

  void partitionJsonFile3b( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionJsonFile3b(_return, id, path, src);
    }
    ifaces_[i]->partitionJsonFile3b(_return, id, path, src);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IWorkerServiceConcurrentClient : virtual public IWorkerServiceIf {
 public:
  IWorkerServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IWorkerServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void newInstance(IWorkerId& _return, const int64_t id, const std::string& type);
  int32_t send_newInstance(const int64_t id, const std::string& type);
  void recv_newInstance(IWorkerId& _return, const int32_t seqid);
  void newInstance3a(IWorkerId& _return, const int64_t id, const std::string& name, const std::string& type);
  int32_t send_newInstance3a(const int64_t id, const std::string& name, const std::string& type);
  void recv_newInstance3a(IWorkerId& _return, const int32_t seqid);
  void newInstance3b(IWorkerId& _return, const int64_t id, const std::string& type, const int32_t cores);
  int32_t send_newInstance3b(const int64_t id, const std::string& type, const int32_t cores);
  void recv_newInstance3b(IWorkerId& _return, const int32_t seqid);
  void newInstance4(IWorkerId& _return, const int64_t id, const std::string& name, const std::string& type, const int32_t cores);
  int32_t send_newInstance4(const int64_t id, const std::string& name, const std::string& type, const int32_t cores);
  void recv_newInstance4(IWorkerId& _return, const int32_t seqid);
  void setName(const IWorkerId& id, const std::string& name);
  int32_t send_setName(const IWorkerId& id, const std::string& name);
  void recv_setName(const int32_t seqid);
  void parallelize( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const int64_t dataId);
  int32_t send_parallelize(const IWorkerId& id, const int64_t dataId);
  void recv_parallelize( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void parallelize3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const int64_t dataId, const  ::ignis::rpc::ISource& src);
  int32_t send_parallelize3(const IWorkerId& id, const int64_t dataId, const  ::ignis::rpc::ISource& src);
  void recv_parallelize3( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void importDataFrame( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data);
  int32_t send_importDataFrame(const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data);
  void recv_importDataFrame( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void importDataFrame3a( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions);
  int32_t send_importDataFrame3a(const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions);
  void recv_importDataFrame3a( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void importDataFrame3b( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const  ::ignis::rpc::ISource& src);
  int32_t send_importDataFrame3b(const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const  ::ignis::rpc::ISource& src);
  void recv_importDataFrame3b( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void importDataFrame4( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions, const  ::ignis::rpc::ISource& src);
  int32_t send_importDataFrame4(const IWorkerId& id, const  ::ignis::rpc::driver::IDataFrameId& data, const int64_t partitions, const  ::ignis::rpc::ISource& src);
  void recv_importDataFrame4( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void textFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path);
  int32_t send_textFile(const IWorkerId& id, const std::string& path);
  void recv_textFile( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void textFile3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const int64_t minPartitions);
  int32_t send_textFile3(const IWorkerId& id, const std::string& path, const int64_t minPartitions);
  void recv_textFile3( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void partitionObjectFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path);
  int32_t send_partitionObjectFile(const IWorkerId& id, const std::string& path);
  void recv_partitionObjectFile( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void partitionObjectFile3( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src);
  int32_t send_partitionObjectFile3(const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src);
  void recv_partitionObjectFile3( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void partitionTextFile( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path);
  int32_t send_partitionTextFile(const IWorkerId& id, const std::string& path);
  void recv_partitionTextFile( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void partitionJsonFile3a( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const bool objectMapping);
  int32_t send_partitionJsonFile3a(const IWorkerId& id, const std::string& path, const bool objectMapping);
  void recv_partitionJsonFile3a( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
  void partitionJsonFile3b( ::ignis::rpc::driver::IDataFrameId& _return, const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src);
  int32_t send_partitionJsonFile3b(const IWorkerId& id, const std::string& path, const  ::ignis::rpc::ISource& src);
  void recv_partitionJsonFile3b( ::ignis::rpc::driver::IDataFrameId& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
