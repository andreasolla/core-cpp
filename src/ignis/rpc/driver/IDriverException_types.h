/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IDriverException_TYPES_H
#define IDriverException_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace ignis { namespace rpc { namespace driver {

class IDriverException;


class IDriverException : public ::apache::thrift::TException {
 public:

  IDriverException(const IDriverException&);
  IDriverException& operator=(const IDriverException&);
  IDriverException() : message(), _cause() {
  }

  virtual ~IDriverException() noexcept;
  std::string message;
  std::string _cause;

  void __set_message(const std::string& val);

  void __set__cause(const std::string& val);

  bool operator == (const IDriverException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(_cause == rhs._cause))
      return false;
    return true;
  }
  bool operator != (const IDriverException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDriverException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(IDriverException &a, IDriverException &b);

std::ostream& operator<<(std::ostream& out, const IDriverException& obj);

}}} // namespace

#endif
