/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IClusterService_H
#define IClusterService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IClusterService_types.h"

namespace ignis { namespace rpc { namespace driver {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IClusterServiceIf {
 public:
  virtual ~IClusterServiceIf() {}
  virtual void start(const int64_t id) = 0;
  virtual void destroy(const int64_t id) = 0;
  virtual int64_t newInstance0() = 0;
  virtual int64_t newInstance1a(const std::string& name) = 0;
  virtual int64_t newInstance1b(const int64_t properties) = 0;
  virtual int64_t newInstance2(const std::string& name, const int64_t properties) = 0;
  virtual void setName(const int64_t id, const std::string& name) = 0;
  virtual void execute(const int64_t id, const std::vector<std::string> & cmd) = 0;
  virtual void executeScript(const int64_t id, const std::string& script) = 0;
  virtual void sendFile(const int64_t id, const std::string& source, const std::string& target) = 0;
  virtual void sendCompressedFile(const int64_t id, const std::string& source, const std::string& target) = 0;
};

class IClusterServiceIfFactory {
 public:
  typedef IClusterServiceIf Handler;

  virtual ~IClusterServiceIfFactory() {}

  virtual IClusterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IClusterServiceIf* /* handler */) = 0;
};

class IClusterServiceIfSingletonFactory : virtual public IClusterServiceIfFactory {
 public:
  IClusterServiceIfSingletonFactory(const ::std::shared_ptr<IClusterServiceIf>& iface) : iface_(iface) {}
  virtual ~IClusterServiceIfSingletonFactory() {}

  virtual IClusterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IClusterServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<IClusterServiceIf> iface_;
};

class IClusterServiceNull : virtual public IClusterServiceIf {
 public:
  virtual ~IClusterServiceNull() {}
  void start(const int64_t /* id */) {
    return;
  }
  void destroy(const int64_t /* id */) {
    return;
  }
  int64_t newInstance0() {
    int64_t _return = 0;
    return _return;
  }
  int64_t newInstance1a(const std::string& /* name */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t newInstance1b(const int64_t /* properties */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t newInstance2(const std::string& /* name */, const int64_t /* properties */) {
    int64_t _return = 0;
    return _return;
  }
  void setName(const int64_t /* id */, const std::string& /* name */) {
    return;
  }
  void execute(const int64_t /* id */, const std::vector<std::string> & /* cmd */) {
    return;
  }
  void executeScript(const int64_t /* id */, const std::string& /* script */) {
    return;
  }
  void sendFile(const int64_t /* id */, const std::string& /* source */, const std::string& /* target */) {
    return;
  }
  void sendCompressedFile(const int64_t /* id */, const std::string& /* source */, const std::string& /* target */) {
    return;
  }
};

typedef struct _IClusterService_start_args__isset {
  _IClusterService_start_args__isset() : id(false) {}
  bool id :1;
} _IClusterService_start_args__isset;

class IClusterService_start_args {
 public:

  IClusterService_start_args(const IClusterService_start_args&);
  IClusterService_start_args& operator=(const IClusterService_start_args&);
  IClusterService_start_args() : id(0) {
  }

  virtual ~IClusterService_start_args() noexcept;
  int64_t id;

  _IClusterService_start_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IClusterService_start_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IClusterService_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_start_pargs {
 public:


  virtual ~IClusterService_start_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_start_result {
 public:

  IClusterService_start_result(const IClusterService_start_result&);
  IClusterService_start_result& operator=(const IClusterService_start_result&);
  IClusterService_start_result() {
  }

  virtual ~IClusterService_start_result() noexcept;

  bool operator == (const IClusterService_start_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IClusterService_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_start_presult {
 public:


  virtual ~IClusterService_start_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_destroy_args__isset {
  _IClusterService_destroy_args__isset() : id(false) {}
  bool id :1;
} _IClusterService_destroy_args__isset;

class IClusterService_destroy_args {
 public:

  IClusterService_destroy_args(const IClusterService_destroy_args&);
  IClusterService_destroy_args& operator=(const IClusterService_destroy_args&);
  IClusterService_destroy_args() : id(0) {
  }

  virtual ~IClusterService_destroy_args() noexcept;
  int64_t id;

  _IClusterService_destroy_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IClusterService_destroy_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IClusterService_destroy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_destroy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_destroy_pargs {
 public:


  virtual ~IClusterService_destroy_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_destroy_result {
 public:

  IClusterService_destroy_result(const IClusterService_destroy_result&);
  IClusterService_destroy_result& operator=(const IClusterService_destroy_result&);
  IClusterService_destroy_result() {
  }

  virtual ~IClusterService_destroy_result() noexcept;

  bool operator == (const IClusterService_destroy_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IClusterService_destroy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_destroy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_destroy_presult {
 public:


  virtual ~IClusterService_destroy_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IClusterService_newInstance0_args {
 public:

  IClusterService_newInstance0_args(const IClusterService_newInstance0_args&);
  IClusterService_newInstance0_args& operator=(const IClusterService_newInstance0_args&);
  IClusterService_newInstance0_args() {
  }

  virtual ~IClusterService_newInstance0_args() noexcept;

  bool operator == (const IClusterService_newInstance0_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IClusterService_newInstance0_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_newInstance0_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_newInstance0_pargs {
 public:


  virtual ~IClusterService_newInstance0_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_newInstance0_result__isset {
  _IClusterService_newInstance0_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IClusterService_newInstance0_result__isset;

class IClusterService_newInstance0_result {
 public:

  IClusterService_newInstance0_result(const IClusterService_newInstance0_result&);
  IClusterService_newInstance0_result& operator=(const IClusterService_newInstance0_result&);
  IClusterService_newInstance0_result() : success(0) {
  }

  virtual ~IClusterService_newInstance0_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_newInstance0_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_newInstance0_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_newInstance0_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_newInstance0_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_newInstance0_presult__isset {
  _IClusterService_newInstance0_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IClusterService_newInstance0_presult__isset;

class IClusterService_newInstance0_presult {
 public:


  virtual ~IClusterService_newInstance0_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_newInstance0_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_newInstance1a_args__isset {
  _IClusterService_newInstance1a_args__isset() : name(false) {}
  bool name :1;
} _IClusterService_newInstance1a_args__isset;

class IClusterService_newInstance1a_args {
 public:

  IClusterService_newInstance1a_args(const IClusterService_newInstance1a_args&);
  IClusterService_newInstance1a_args& operator=(const IClusterService_newInstance1a_args&);
  IClusterService_newInstance1a_args() : name() {
  }

  virtual ~IClusterService_newInstance1a_args() noexcept;
  std::string name;

  _IClusterService_newInstance1a_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const IClusterService_newInstance1a_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const IClusterService_newInstance1a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_newInstance1a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_newInstance1a_pargs {
 public:


  virtual ~IClusterService_newInstance1a_pargs() noexcept;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_newInstance1a_result__isset {
  _IClusterService_newInstance1a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IClusterService_newInstance1a_result__isset;

class IClusterService_newInstance1a_result {
 public:

  IClusterService_newInstance1a_result(const IClusterService_newInstance1a_result&);
  IClusterService_newInstance1a_result& operator=(const IClusterService_newInstance1a_result&);
  IClusterService_newInstance1a_result() : success(0) {
  }

  virtual ~IClusterService_newInstance1a_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_newInstance1a_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_newInstance1a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_newInstance1a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_newInstance1a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_newInstance1a_presult__isset {
  _IClusterService_newInstance1a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IClusterService_newInstance1a_presult__isset;

class IClusterService_newInstance1a_presult {
 public:


  virtual ~IClusterService_newInstance1a_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_newInstance1a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_newInstance1b_args__isset {
  _IClusterService_newInstance1b_args__isset() : properties(false) {}
  bool properties :1;
} _IClusterService_newInstance1b_args__isset;

class IClusterService_newInstance1b_args {
 public:

  IClusterService_newInstance1b_args(const IClusterService_newInstance1b_args&);
  IClusterService_newInstance1b_args& operator=(const IClusterService_newInstance1b_args&);
  IClusterService_newInstance1b_args() : properties(0) {
  }

  virtual ~IClusterService_newInstance1b_args() noexcept;
  int64_t properties;

  _IClusterService_newInstance1b_args__isset __isset;

  void __set_properties(const int64_t val);

  bool operator == (const IClusterService_newInstance1b_args & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const IClusterService_newInstance1b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_newInstance1b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_newInstance1b_pargs {
 public:


  virtual ~IClusterService_newInstance1b_pargs() noexcept;
  const int64_t* properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_newInstance1b_result__isset {
  _IClusterService_newInstance1b_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IClusterService_newInstance1b_result__isset;

class IClusterService_newInstance1b_result {
 public:

  IClusterService_newInstance1b_result(const IClusterService_newInstance1b_result&);
  IClusterService_newInstance1b_result& operator=(const IClusterService_newInstance1b_result&);
  IClusterService_newInstance1b_result() : success(0) {
  }

  virtual ~IClusterService_newInstance1b_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_newInstance1b_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_newInstance1b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_newInstance1b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_newInstance1b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_newInstance1b_presult__isset {
  _IClusterService_newInstance1b_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IClusterService_newInstance1b_presult__isset;

class IClusterService_newInstance1b_presult {
 public:


  virtual ~IClusterService_newInstance1b_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_newInstance1b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_newInstance2_args__isset {
  _IClusterService_newInstance2_args__isset() : name(false), properties(false) {}
  bool name :1;
  bool properties :1;
} _IClusterService_newInstance2_args__isset;

class IClusterService_newInstance2_args {
 public:

  IClusterService_newInstance2_args(const IClusterService_newInstance2_args&);
  IClusterService_newInstance2_args& operator=(const IClusterService_newInstance2_args&);
  IClusterService_newInstance2_args() : name(), properties(0) {
  }

  virtual ~IClusterService_newInstance2_args() noexcept;
  std::string name;
  int64_t properties;

  _IClusterService_newInstance2_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_properties(const int64_t val);

  bool operator == (const IClusterService_newInstance2_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const IClusterService_newInstance2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_newInstance2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_newInstance2_pargs {
 public:


  virtual ~IClusterService_newInstance2_pargs() noexcept;
  const std::string* name;
  const int64_t* properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_newInstance2_result__isset {
  _IClusterService_newInstance2_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IClusterService_newInstance2_result__isset;

class IClusterService_newInstance2_result {
 public:

  IClusterService_newInstance2_result(const IClusterService_newInstance2_result&);
  IClusterService_newInstance2_result& operator=(const IClusterService_newInstance2_result&);
  IClusterService_newInstance2_result() : success(0) {
  }

  virtual ~IClusterService_newInstance2_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_newInstance2_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_newInstance2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_newInstance2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_newInstance2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_newInstance2_presult__isset {
  _IClusterService_newInstance2_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IClusterService_newInstance2_presult__isset;

class IClusterService_newInstance2_presult {
 public:


  virtual ~IClusterService_newInstance2_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_newInstance2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_setName_args__isset {
  _IClusterService_setName_args__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _IClusterService_setName_args__isset;

class IClusterService_setName_args {
 public:

  IClusterService_setName_args(const IClusterService_setName_args&);
  IClusterService_setName_args& operator=(const IClusterService_setName_args&);
  IClusterService_setName_args() : id(0), name() {
  }

  virtual ~IClusterService_setName_args() noexcept;
  int64_t id;
  std::string name;

  _IClusterService_setName_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_name(const std::string& val);

  bool operator == (const IClusterService_setName_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const IClusterService_setName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_setName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_setName_pargs {
 public:


  virtual ~IClusterService_setName_pargs() noexcept;
  const int64_t* id;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_setName_result__isset {
  _IClusterService_setName_result__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_setName_result__isset;

class IClusterService_setName_result {
 public:

  IClusterService_setName_result(const IClusterService_setName_result&);
  IClusterService_setName_result& operator=(const IClusterService_setName_result&);
  IClusterService_setName_result() {
  }

  virtual ~IClusterService_setName_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_setName_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_setName_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_setName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_setName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_setName_presult__isset {
  _IClusterService_setName_presult__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_setName_presult__isset;

class IClusterService_setName_presult {
 public:


  virtual ~IClusterService_setName_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_setName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_execute_args__isset {
  _IClusterService_execute_args__isset() : id(false), cmd(false) {}
  bool id :1;
  bool cmd :1;
} _IClusterService_execute_args__isset;

class IClusterService_execute_args {
 public:

  IClusterService_execute_args(const IClusterService_execute_args&);
  IClusterService_execute_args& operator=(const IClusterService_execute_args&);
  IClusterService_execute_args() : id(0) {
  }

  virtual ~IClusterService_execute_args() noexcept;
  int64_t id;
  std::vector<std::string>  cmd;

  _IClusterService_execute_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_cmd(const std::vector<std::string> & val);

  bool operator == (const IClusterService_execute_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const IClusterService_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_execute_pargs {
 public:


  virtual ~IClusterService_execute_pargs() noexcept;
  const int64_t* id;
  const std::vector<std::string> * cmd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_execute_result__isset {
  _IClusterService_execute_result__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_execute_result__isset;

class IClusterService_execute_result {
 public:

  IClusterService_execute_result(const IClusterService_execute_result&);
  IClusterService_execute_result& operator=(const IClusterService_execute_result&);
  IClusterService_execute_result() {
  }

  virtual ~IClusterService_execute_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_execute_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_execute_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_execute_presult__isset {
  _IClusterService_execute_presult__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_execute_presult__isset;

class IClusterService_execute_presult {
 public:


  virtual ~IClusterService_execute_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_executeScript_args__isset {
  _IClusterService_executeScript_args__isset() : id(false), script(false) {}
  bool id :1;
  bool script :1;
} _IClusterService_executeScript_args__isset;

class IClusterService_executeScript_args {
 public:

  IClusterService_executeScript_args(const IClusterService_executeScript_args&);
  IClusterService_executeScript_args& operator=(const IClusterService_executeScript_args&);
  IClusterService_executeScript_args() : id(0), script() {
  }

  virtual ~IClusterService_executeScript_args() noexcept;
  int64_t id;
  std::string script;

  _IClusterService_executeScript_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_script(const std::string& val);

  bool operator == (const IClusterService_executeScript_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(script == rhs.script))
      return false;
    return true;
  }
  bool operator != (const IClusterService_executeScript_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_executeScript_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_executeScript_pargs {
 public:


  virtual ~IClusterService_executeScript_pargs() noexcept;
  const int64_t* id;
  const std::string* script;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_executeScript_result__isset {
  _IClusterService_executeScript_result__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_executeScript_result__isset;

class IClusterService_executeScript_result {
 public:

  IClusterService_executeScript_result(const IClusterService_executeScript_result&);
  IClusterService_executeScript_result& operator=(const IClusterService_executeScript_result&);
  IClusterService_executeScript_result() {
  }

  virtual ~IClusterService_executeScript_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_executeScript_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_executeScript_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_executeScript_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_executeScript_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_executeScript_presult__isset {
  _IClusterService_executeScript_presult__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_executeScript_presult__isset;

class IClusterService_executeScript_presult {
 public:


  virtual ~IClusterService_executeScript_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_executeScript_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_sendFile_args__isset {
  _IClusterService_sendFile_args__isset() : id(false), source(false), target(false) {}
  bool id :1;
  bool source :1;
  bool target :1;
} _IClusterService_sendFile_args__isset;

class IClusterService_sendFile_args {
 public:

  IClusterService_sendFile_args(const IClusterService_sendFile_args&);
  IClusterService_sendFile_args& operator=(const IClusterService_sendFile_args&);
  IClusterService_sendFile_args() : id(0), source(), target() {
  }

  virtual ~IClusterService_sendFile_args() noexcept;
  int64_t id;
  std::string source;
  std::string target;

  _IClusterService_sendFile_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_source(const std::string& val);

  void __set_target(const std::string& val);

  bool operator == (const IClusterService_sendFile_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const IClusterService_sendFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_sendFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_sendFile_pargs {
 public:


  virtual ~IClusterService_sendFile_pargs() noexcept;
  const int64_t* id;
  const std::string* source;
  const std::string* target;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_sendFile_result__isset {
  _IClusterService_sendFile_result__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_sendFile_result__isset;

class IClusterService_sendFile_result {
 public:

  IClusterService_sendFile_result(const IClusterService_sendFile_result&);
  IClusterService_sendFile_result& operator=(const IClusterService_sendFile_result&);
  IClusterService_sendFile_result() {
  }

  virtual ~IClusterService_sendFile_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_sendFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_sendFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_sendFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_sendFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_sendFile_presult__isset {
  _IClusterService_sendFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_sendFile_presult__isset;

class IClusterService_sendFile_presult {
 public:


  virtual ~IClusterService_sendFile_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_sendFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IClusterService_sendCompressedFile_args__isset {
  _IClusterService_sendCompressedFile_args__isset() : id(false), source(false), target(false) {}
  bool id :1;
  bool source :1;
  bool target :1;
} _IClusterService_sendCompressedFile_args__isset;

class IClusterService_sendCompressedFile_args {
 public:

  IClusterService_sendCompressedFile_args(const IClusterService_sendCompressedFile_args&);
  IClusterService_sendCompressedFile_args& operator=(const IClusterService_sendCompressedFile_args&);
  IClusterService_sendCompressedFile_args() : id(0), source(), target() {
  }

  virtual ~IClusterService_sendCompressedFile_args() noexcept;
  int64_t id;
  std::string source;
  std::string target;

  _IClusterService_sendCompressedFile_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_source(const std::string& val);

  void __set_target(const std::string& val);

  bool operator == (const IClusterService_sendCompressedFile_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const IClusterService_sendCompressedFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_sendCompressedFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IClusterService_sendCompressedFile_pargs {
 public:


  virtual ~IClusterService_sendCompressedFile_pargs() noexcept;
  const int64_t* id;
  const std::string* source;
  const std::string* target;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_sendCompressedFile_result__isset {
  _IClusterService_sendCompressedFile_result__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_sendCompressedFile_result__isset;

class IClusterService_sendCompressedFile_result {
 public:

  IClusterService_sendCompressedFile_result(const IClusterService_sendCompressedFile_result&);
  IClusterService_sendCompressedFile_result& operator=(const IClusterService_sendCompressedFile_result&);
  IClusterService_sendCompressedFile_result() {
  }

  virtual ~IClusterService_sendCompressedFile_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_sendCompressedFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IClusterService_sendCompressedFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IClusterService_sendCompressedFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IClusterService_sendCompressedFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IClusterService_sendCompressedFile_presult__isset {
  _IClusterService_sendCompressedFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IClusterService_sendCompressedFile_presult__isset;

class IClusterService_sendCompressedFile_presult {
 public:


  virtual ~IClusterService_sendCompressedFile_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IClusterService_sendCompressedFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IClusterServiceClient : virtual public IClusterServiceIf {
 public:
  IClusterServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IClusterServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start(const int64_t id);
  void send_start(const int64_t id);
  void recv_start();
  void destroy(const int64_t id);
  void send_destroy(const int64_t id);
  void recv_destroy();
  int64_t newInstance0();
  void send_newInstance0();
  int64_t recv_newInstance0();
  int64_t newInstance1a(const std::string& name);
  void send_newInstance1a(const std::string& name);
  int64_t recv_newInstance1a();
  int64_t newInstance1b(const int64_t properties);
  void send_newInstance1b(const int64_t properties);
  int64_t recv_newInstance1b();
  int64_t newInstance2(const std::string& name, const int64_t properties);
  void send_newInstance2(const std::string& name, const int64_t properties);
  int64_t recv_newInstance2();
  void setName(const int64_t id, const std::string& name);
  void send_setName(const int64_t id, const std::string& name);
  void recv_setName();
  void execute(const int64_t id, const std::vector<std::string> & cmd);
  void send_execute(const int64_t id, const std::vector<std::string> & cmd);
  void recv_execute();
  void executeScript(const int64_t id, const std::string& script);
  void send_executeScript(const int64_t id, const std::string& script);
  void recv_executeScript();
  void sendFile(const int64_t id, const std::string& source, const std::string& target);
  void send_sendFile(const int64_t id, const std::string& source, const std::string& target);
  void recv_sendFile();
  void sendCompressedFile(const int64_t id, const std::string& source, const std::string& target);
  void send_sendCompressedFile(const int64_t id, const std::string& source, const std::string& target);
  void recv_sendCompressedFile();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IClusterServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IClusterServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IClusterServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_destroy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance0(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance1a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance1b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeScript(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendCompressedFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IClusterServiceProcessor(::std::shared_ptr<IClusterServiceIf> iface) :
    iface_(iface) {
    processMap_["start"] = &IClusterServiceProcessor::process_start;
    processMap_["destroy"] = &IClusterServiceProcessor::process_destroy;
    processMap_["newInstance0"] = &IClusterServiceProcessor::process_newInstance0;
    processMap_["newInstance1a"] = &IClusterServiceProcessor::process_newInstance1a;
    processMap_["newInstance1b"] = &IClusterServiceProcessor::process_newInstance1b;
    processMap_["newInstance2"] = &IClusterServiceProcessor::process_newInstance2;
    processMap_["setName"] = &IClusterServiceProcessor::process_setName;
    processMap_["execute"] = &IClusterServiceProcessor::process_execute;
    processMap_["executeScript"] = &IClusterServiceProcessor::process_executeScript;
    processMap_["sendFile"] = &IClusterServiceProcessor::process_sendFile;
    processMap_["sendCompressedFile"] = &IClusterServiceProcessor::process_sendCompressedFile;
  }

  virtual ~IClusterServiceProcessor() {}
};

class IClusterServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IClusterServiceProcessorFactory(const ::std::shared_ptr< IClusterServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< IClusterServiceIfFactory > handlerFactory_;
};

class IClusterServiceMultiface : virtual public IClusterServiceIf {
 public:
  IClusterServiceMultiface(std::vector<std::shared_ptr<IClusterServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IClusterServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<IClusterServiceIf> > ifaces_;
  IClusterServiceMultiface() {}
  void add(::std::shared_ptr<IClusterServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void start(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(id);
    }
    ifaces_[i]->start(id);
  }

  void destroy(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->destroy(id);
    }
    ifaces_[i]->destroy(id);
  }

  int64_t newInstance0() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance0();
    }
    return ifaces_[i]->newInstance0();
  }

  int64_t newInstance1a(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance1a(name);
    }
    return ifaces_[i]->newInstance1a(name);
  }

  int64_t newInstance1b(const int64_t properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance1b(properties);
    }
    return ifaces_[i]->newInstance1b(properties);
  }

  int64_t newInstance2(const std::string& name, const int64_t properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance2(name, properties);
    }
    return ifaces_[i]->newInstance2(name, properties);
  }

  void setName(const int64_t id, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setName(id, name);
    }
    ifaces_[i]->setName(id, name);
  }

  void execute(const int64_t id, const std::vector<std::string> & cmd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute(id, cmd);
    }
    ifaces_[i]->execute(id, cmd);
  }

  void executeScript(const int64_t id, const std::string& script) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeScript(id, script);
    }
    ifaces_[i]->executeScript(id, script);
  }

  void sendFile(const int64_t id, const std::string& source, const std::string& target) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendFile(id, source, target);
    }
    ifaces_[i]->sendFile(id, source, target);
  }

  void sendCompressedFile(const int64_t id, const std::string& source, const std::string& target) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendCompressedFile(id, source, target);
    }
    ifaces_[i]->sendCompressedFile(id, source, target);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IClusterServiceConcurrentClient : virtual public IClusterServiceIf {
 public:
  IClusterServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IClusterServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start(const int64_t id);
  int32_t send_start(const int64_t id);
  void recv_start(const int32_t seqid);
  void destroy(const int64_t id);
  int32_t send_destroy(const int64_t id);
  void recv_destroy(const int32_t seqid);
  int64_t newInstance0();
  int32_t send_newInstance0();
  int64_t recv_newInstance0(const int32_t seqid);
  int64_t newInstance1a(const std::string& name);
  int32_t send_newInstance1a(const std::string& name);
  int64_t recv_newInstance1a(const int32_t seqid);
  int64_t newInstance1b(const int64_t properties);
  int32_t send_newInstance1b(const int64_t properties);
  int64_t recv_newInstance1b(const int32_t seqid);
  int64_t newInstance2(const std::string& name, const int64_t properties);
  int32_t send_newInstance2(const std::string& name, const int64_t properties);
  int64_t recv_newInstance2(const int32_t seqid);
  void setName(const int64_t id, const std::string& name);
  int32_t send_setName(const int64_t id, const std::string& name);
  void recv_setName(const int32_t seqid);
  void execute(const int64_t id, const std::vector<std::string> & cmd);
  int32_t send_execute(const int64_t id, const std::vector<std::string> & cmd);
  void recv_execute(const int32_t seqid);
  void executeScript(const int64_t id, const std::string& script);
  int32_t send_executeScript(const int64_t id, const std::string& script);
  void recv_executeScript(const int32_t seqid);
  void sendFile(const int64_t id, const std::string& source, const std::string& target);
  int32_t send_sendFile(const int64_t id, const std::string& source, const std::string& target);
  void recv_sendFile(const int32_t seqid);
  void sendCompressedFile(const int64_t id, const std::string& source, const std::string& target);
  int32_t send_sendCompressedFile(const int64_t id, const std::string& source, const std::string& target);
  void recv_sendCompressedFile(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
