/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IDataFrameService_H
#define IDataFrameService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IDataFrameService_types.h"

namespace ignis { namespace rpc { namespace driver {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IDataFrameServiceIf {
 public:
  virtual ~IDataFrameServiceIf() {}
  virtual void setName(const IDataFrameId& id, const std::string& name) = 0;
  virtual void persist(const IDataFrameId& id, const int8_t level) = 0;
  virtual void cache(const IDataFrameId& id) = 0;
  virtual void unpersist(const IDataFrameId& id) = 0;
  virtual void uncache(const IDataFrameId& id) = 0;
  virtual int64_t partitions(const IDataFrameId& id) = 0;
  virtual void saveAsObjectFile(const IDataFrameId& id, const std::string& path, const int8_t compression) = 0;
  virtual void saveAsTextFile(const IDataFrameId& id, const std::string& path) = 0;
  virtual void saveAsJsonFile(const IDataFrameId& id, const std::string& path, const bool pretty) = 0;
  virtual void repartition(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const bool preserveOrdering, const bool global_) = 0;
  virtual void partitionByRandom(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) = 0;
  virtual void partitionByHash(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) = 0;
  virtual void partitionBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions) = 0;
  virtual void map_(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void filter(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void flatmap(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void keyBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void mapPartitions(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) = 0;
  virtual void mapPartitionsWithIndex(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) = 0;
  virtual void mapExecutor(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void mapExecutorTo(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void groupBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void groupBy2(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions) = 0;
  virtual void sort(IDataFrameId& _return, const IDataFrameId& id, const bool ascending) = 0;
  virtual void sort2(IDataFrameId& _return, const IDataFrameId& id, const bool ascending, const int64_t numPartitions) = 0;
  virtual void sortBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending) = 0;
  virtual void sortBy3(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) = 0;
  virtual void union_(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder) = 0;
  virtual void union4(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder, const  ::ignis::rpc::ISource& src) = 0;
  virtual void join(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other) = 0;
  virtual void join3a(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions) = 0;
  virtual void join3b(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const  ::ignis::rpc::ISource& src) = 0;
  virtual void join4(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) = 0;
  virtual void distinct(IDataFrameId& _return, const IDataFrameId& id) = 0;
  virtual void distinct2a(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) = 0;
  virtual void distinct2b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void distinct3(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) = 0;
  virtual int64_t reduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t treeReduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t collect(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t aggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t treeAggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t fold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t treeFold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t take(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) = 0;
  virtual void foreach_(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void foreachPartition(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void foreachExecutor(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual int64_t top(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t top4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t takeOrdered(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t takeOrdered4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) = 0;
  virtual void sample(IDataFrameId& _return, const IDataFrameId& id, const bool withReplacement, const double fraction, const int32_t seed) = 0;
  virtual int64_t takeSample(const IDataFrameId& id, const bool withReplacement, const int64_t num, const int32_t seed, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t count(const IDataFrameId& id) = 0;
  virtual int64_t max(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t max3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t min(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t min3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) = 0;

  /**
   * *****************************************Key-Value******************************************
   * 
   * @param id
   * @param src
   */
  virtual void flatMapValues(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void mapValues(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void groupByKey(IDataFrameId& _return, const IDataFrameId& id) = 0;
  virtual void groupByKey2a(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) = 0;
  virtual void groupByKey2b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) = 0;
  virtual void groupByKey3(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) = 0;
  virtual void reduceByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool localReduce) = 0;
  virtual void reduceByKey4(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localReduce) = 0;
  virtual void aggregateByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp) = 0;
  virtual void aggregateByKey4a(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const int64_t numPartitions) = 0;
  virtual void aggregateByKey4b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp) = 0;
  virtual void aggregateByKey5(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t numPartitions) = 0;
  virtual void foldByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const bool localFold) = 0;
  virtual void foldByKey5(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localFold) = 0;
  virtual void sortByKey(IDataFrameId& _return, const IDataFrameId& id, const bool ascending) = 0;
  virtual void sortByKey3a(IDataFrameId& _return, const IDataFrameId& id, const bool ascending, const int64_t numPartitions) = 0;
  virtual void sortByKey3b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending) = 0;
  virtual void sortByKey4(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) = 0;
  virtual int64_t keys(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t values(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) = 0;
  virtual void sampleByKey(IDataFrameId& _return, const IDataFrameId& id, const bool withReplacement, const  ::ignis::rpc::ISource& fractions, const int32_t seed) = 0;
  virtual int64_t countByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) = 0;
  virtual int64_t countByValue(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) = 0;
};

class IDataFrameServiceIfFactory {
 public:
  typedef IDataFrameServiceIf Handler;

  virtual ~IDataFrameServiceIfFactory() {}

  virtual IDataFrameServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IDataFrameServiceIf* /* handler */) = 0;
  };

class IDataFrameServiceIfSingletonFactory : virtual public IDataFrameServiceIfFactory {
 public:
  IDataFrameServiceIfSingletonFactory(const ::std::shared_ptr<IDataFrameServiceIf>& iface) : iface_(iface) {}
  virtual ~IDataFrameServiceIfSingletonFactory() {}

  virtual IDataFrameServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(IDataFrameServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<IDataFrameServiceIf> iface_;
};

class IDataFrameServiceNull : virtual public IDataFrameServiceIf {
 public:
  virtual ~IDataFrameServiceNull() {}
  void setName(const IDataFrameId& /* id */, const std::string& /* name */) override {
    return;
  }
  void persist(const IDataFrameId& /* id */, const int8_t /* level */) override {
    return;
  }
  void cache(const IDataFrameId& /* id */) override {
    return;
  }
  void unpersist(const IDataFrameId& /* id */) override {
    return;
  }
  void uncache(const IDataFrameId& /* id */) override {
    return;
  }
  int64_t partitions(const IDataFrameId& /* id */) override {
    int64_t _return = 0;
    return _return;
  }
  void saveAsObjectFile(const IDataFrameId& /* id */, const std::string& /* path */, const int8_t /* compression */) override {
    return;
  }
  void saveAsTextFile(const IDataFrameId& /* id */, const std::string& /* path */) override {
    return;
  }
  void saveAsJsonFile(const IDataFrameId& /* id */, const std::string& /* path */, const bool /* pretty */) override {
    return;
  }
  void repartition(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const int64_t /* numPartitions */, const bool /* preserveOrdering */, const bool /* global_ */) override {
    return;
  }
  void partitionByRandom(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const int64_t /* numPartitions */) override {
    return;
  }
  void partitionByHash(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const int64_t /* numPartitions */) override {
    return;
  }
  void partitionBy(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const int64_t /* numPartitions */) override {
    return;
  }
  void map_(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void filter(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void flatmap(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void keyBy(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void mapPartitions(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const bool /* preservesPartitioning */) override {
    return;
  }
  void mapPartitionsWithIndex(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const bool /* preservesPartitioning */) override {
    return;
  }
  void mapExecutor(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void mapExecutorTo(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void groupBy(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void groupBy2(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const int64_t /* numPartitions */) override {
    return;
  }
  void sort(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const bool /* ascending */) override {
    return;
  }
  void sort2(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const bool /* ascending */, const int64_t /* numPartitions */) override {
    return;
  }
  void sortBy(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const bool /* ascending */) override {
    return;
  }
  void sortBy3(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const bool /* ascending */, const int64_t /* numPartitions */) override {
    return;
  }
  void union_(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const IDataFrameId& /* other */, const bool /* preserveOrder */) override {
    return;
  }
  void union4(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const IDataFrameId& /* other */, const bool /* preserveOrder */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void join(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const IDataFrameId& /* other */) override {
    return;
  }
  void join3a(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const IDataFrameId& /* other */, const int64_t /* numPartitions */) override {
    return;
  }
  void join3b(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const IDataFrameId& /* other */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void join4(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const IDataFrameId& /* other */, const int64_t /* numPartitions */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void distinct(IDataFrameId& /* _return */, const IDataFrameId& /* id */) override {
    return;
  }
  void distinct2a(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const int64_t /* numPartitions */) override {
    return;
  }
  void distinct2b(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void distinct3(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const int64_t /* numPartitions */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  int64_t reduce(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t treeReduce(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t collect(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t aggregate(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* seqOp */, const  ::ignis::rpc::ISource& /* combOp */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t treeAggregate(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* seqOp */, const  ::ignis::rpc::ISource& /* combOp */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t fold(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* src */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t treeFold(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* src */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t take(const IDataFrameId& /* id */, const int64_t /* num */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  void foreach_(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void foreachPartition(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void foreachExecutor(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  int64_t top(const IDataFrameId& /* id */, const int64_t /* num */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t top4(const IDataFrameId& /* id */, const int64_t /* num */, const  ::ignis::rpc::ISource& /* cmp */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t takeOrdered(const IDataFrameId& /* id */, const int64_t /* num */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t takeOrdered4(const IDataFrameId& /* id */, const int64_t /* num */, const  ::ignis::rpc::ISource& /* cmp */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  void sample(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const bool /* withReplacement */, const double /* fraction */, const int32_t /* seed */) override {
    return;
  }
  int64_t takeSample(const IDataFrameId& /* id */, const bool /* withReplacement */, const int64_t /* num */, const int32_t /* seed */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t count(const IDataFrameId& /* id */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t max(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t max3(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* cmp */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t min(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t min3(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* cmp */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  void flatMapValues(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void mapValues(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void groupByKey(IDataFrameId& /* _return */, const IDataFrameId& /* id */) override {
    return;
  }
  void groupByKey2a(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const int64_t /* numPartitions */) override {
    return;
  }
  void groupByKey2b(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void groupByKey3(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const int64_t /* numPartitions */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void reduceByKey(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const bool /* localReduce */) override {
    return;
  }
  void reduceByKey4(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const int64_t /* numPartitions */, const bool /* localReduce */) override {
    return;
  }
  void aggregateByKey(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* seqOp */) override {
    return;
  }
  void aggregateByKey4a(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* seqOp */, const int64_t /* numPartitions */) override {
    return;
  }
  void aggregateByKey4b(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* seqOp */, const  ::ignis::rpc::ISource& /* combOp */) override {
    return;
  }
  void aggregateByKey5(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* seqOp */, const  ::ignis::rpc::ISource& /* combOp */, const int64_t /* numPartitions */) override {
    return;
  }
  void foldByKey(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* src */, const bool /* localFold */) override {
    return;
  }
  void foldByKey5(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* zero */, const  ::ignis::rpc::ISource& /* src */, const int64_t /* numPartitions */, const bool /* localFold */) override {
    return;
  }
  void sortByKey(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const bool /* ascending */) override {
    return;
  }
  void sortByKey3a(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const bool /* ascending */, const int64_t /* numPartitions */) override {
    return;
  }
  void sortByKey3b(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const bool /* ascending */) override {
    return;
  }
  void sortByKey4(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* src */, const bool /* ascending */, const int64_t /* numPartitions */) override {
    return;
  }
  int64_t keys(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t values(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  void sampleByKey(IDataFrameId& /* _return */, const IDataFrameId& /* id */, const bool /* withReplacement */, const  ::ignis::rpc::ISource& /* fractions */, const int32_t /* seed */) override {
    return;
  }
  int64_t countByKey(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t countByValue(const IDataFrameId& /* id */, const  ::ignis::rpc::ISource& /* tp */) override {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _IDataFrameService_setName_args__isset {
  _IDataFrameService_setName_args__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _IDataFrameService_setName_args__isset;

class IDataFrameService_setName_args {
 public:

  IDataFrameService_setName_args(const IDataFrameService_setName_args&);
  IDataFrameService_setName_args& operator=(const IDataFrameService_setName_args&);
  IDataFrameService_setName_args() noexcept
                                 : name() {
  }

  virtual ~IDataFrameService_setName_args() noexcept;
  IDataFrameId id;
  std::string name;

  _IDataFrameService_setName_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_name(const std::string& val);

  bool operator == (const IDataFrameService_setName_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_setName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_setName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_setName_pargs {
 public:


  virtual ~IDataFrameService_setName_pargs() noexcept;
  const IDataFrameId* id;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_setName_result__isset {
  _IDataFrameService_setName_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_setName_result__isset;

class IDataFrameService_setName_result {
 public:

  IDataFrameService_setName_result(const IDataFrameService_setName_result&);
  IDataFrameService_setName_result& operator=(const IDataFrameService_setName_result&);
  IDataFrameService_setName_result() noexcept {
  }

  virtual ~IDataFrameService_setName_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_setName_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_setName_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_setName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_setName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_setName_presult__isset {
  _IDataFrameService_setName_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_setName_presult__isset;

class IDataFrameService_setName_presult {
 public:


  virtual ~IDataFrameService_setName_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_setName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_persist_args__isset {
  _IDataFrameService_persist_args__isset() : id(false), level(false) {}
  bool id :1;
  bool level :1;
} _IDataFrameService_persist_args__isset;

class IDataFrameService_persist_args {
 public:

  IDataFrameService_persist_args(const IDataFrameService_persist_args&) noexcept;
  IDataFrameService_persist_args& operator=(const IDataFrameService_persist_args&) noexcept;
  IDataFrameService_persist_args() noexcept
                                 : level(0) {
  }

  virtual ~IDataFrameService_persist_args() noexcept;
  IDataFrameId id;
  int8_t level;

  _IDataFrameService_persist_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_level(const int8_t val);

  bool operator == (const IDataFrameService_persist_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_persist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_persist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_persist_pargs {
 public:


  virtual ~IDataFrameService_persist_pargs() noexcept;
  const IDataFrameId* id;
  const int8_t* level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_persist_result__isset {
  _IDataFrameService_persist_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_persist_result__isset;

class IDataFrameService_persist_result {
 public:

  IDataFrameService_persist_result(const IDataFrameService_persist_result&);
  IDataFrameService_persist_result& operator=(const IDataFrameService_persist_result&);
  IDataFrameService_persist_result() noexcept {
  }

  virtual ~IDataFrameService_persist_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_persist_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_persist_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_persist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_persist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_persist_presult__isset {
  _IDataFrameService_persist_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_persist_presult__isset;

class IDataFrameService_persist_presult {
 public:


  virtual ~IDataFrameService_persist_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_persist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_cache_args__isset {
  _IDataFrameService_cache_args__isset() : id(false) {}
  bool id :1;
} _IDataFrameService_cache_args__isset;

class IDataFrameService_cache_args {
 public:

  IDataFrameService_cache_args(const IDataFrameService_cache_args&) noexcept;
  IDataFrameService_cache_args& operator=(const IDataFrameService_cache_args&) noexcept;
  IDataFrameService_cache_args() noexcept {
  }

  virtual ~IDataFrameService_cache_args() noexcept;
  IDataFrameId id;

  _IDataFrameService_cache_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  bool operator == (const IDataFrameService_cache_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_cache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_cache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_cache_pargs {
 public:


  virtual ~IDataFrameService_cache_pargs() noexcept;
  const IDataFrameId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_cache_result__isset {
  _IDataFrameService_cache_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_cache_result__isset;

class IDataFrameService_cache_result {
 public:

  IDataFrameService_cache_result(const IDataFrameService_cache_result&);
  IDataFrameService_cache_result& operator=(const IDataFrameService_cache_result&);
  IDataFrameService_cache_result() noexcept {
  }

  virtual ~IDataFrameService_cache_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_cache_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_cache_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_cache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_cache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_cache_presult__isset {
  _IDataFrameService_cache_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_cache_presult__isset;

class IDataFrameService_cache_presult {
 public:


  virtual ~IDataFrameService_cache_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_cache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_unpersist_args__isset {
  _IDataFrameService_unpersist_args__isset() : id(false) {}
  bool id :1;
} _IDataFrameService_unpersist_args__isset;

class IDataFrameService_unpersist_args {
 public:

  IDataFrameService_unpersist_args(const IDataFrameService_unpersist_args&) noexcept;
  IDataFrameService_unpersist_args& operator=(const IDataFrameService_unpersist_args&) noexcept;
  IDataFrameService_unpersist_args() noexcept {
  }

  virtual ~IDataFrameService_unpersist_args() noexcept;
  IDataFrameId id;

  _IDataFrameService_unpersist_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  bool operator == (const IDataFrameService_unpersist_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_unpersist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_unpersist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_unpersist_pargs {
 public:


  virtual ~IDataFrameService_unpersist_pargs() noexcept;
  const IDataFrameId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_unpersist_result__isset {
  _IDataFrameService_unpersist_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_unpersist_result__isset;

class IDataFrameService_unpersist_result {
 public:

  IDataFrameService_unpersist_result(const IDataFrameService_unpersist_result&);
  IDataFrameService_unpersist_result& operator=(const IDataFrameService_unpersist_result&);
  IDataFrameService_unpersist_result() noexcept {
  }

  virtual ~IDataFrameService_unpersist_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_unpersist_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_unpersist_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_unpersist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_unpersist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_unpersist_presult__isset {
  _IDataFrameService_unpersist_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_unpersist_presult__isset;

class IDataFrameService_unpersist_presult {
 public:


  virtual ~IDataFrameService_unpersist_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_unpersist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_uncache_args__isset {
  _IDataFrameService_uncache_args__isset() : id(false) {}
  bool id :1;
} _IDataFrameService_uncache_args__isset;

class IDataFrameService_uncache_args {
 public:

  IDataFrameService_uncache_args(const IDataFrameService_uncache_args&) noexcept;
  IDataFrameService_uncache_args& operator=(const IDataFrameService_uncache_args&) noexcept;
  IDataFrameService_uncache_args() noexcept {
  }

  virtual ~IDataFrameService_uncache_args() noexcept;
  IDataFrameId id;

  _IDataFrameService_uncache_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  bool operator == (const IDataFrameService_uncache_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_uncache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_uncache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_uncache_pargs {
 public:


  virtual ~IDataFrameService_uncache_pargs() noexcept;
  const IDataFrameId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_uncache_result__isset {
  _IDataFrameService_uncache_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_uncache_result__isset;

class IDataFrameService_uncache_result {
 public:

  IDataFrameService_uncache_result(const IDataFrameService_uncache_result&);
  IDataFrameService_uncache_result& operator=(const IDataFrameService_uncache_result&);
  IDataFrameService_uncache_result() noexcept {
  }

  virtual ~IDataFrameService_uncache_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_uncache_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_uncache_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_uncache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_uncache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_uncache_presult__isset {
  _IDataFrameService_uncache_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_uncache_presult__isset;

class IDataFrameService_uncache_presult {
 public:


  virtual ~IDataFrameService_uncache_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_uncache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_partitions_args__isset {
  _IDataFrameService_partitions_args__isset() : id(false) {}
  bool id :1;
} _IDataFrameService_partitions_args__isset;

class IDataFrameService_partitions_args {
 public:

  IDataFrameService_partitions_args(const IDataFrameService_partitions_args&) noexcept;
  IDataFrameService_partitions_args& operator=(const IDataFrameService_partitions_args&) noexcept;
  IDataFrameService_partitions_args() noexcept {
  }

  virtual ~IDataFrameService_partitions_args() noexcept;
  IDataFrameId id;

  _IDataFrameService_partitions_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  bool operator == (const IDataFrameService_partitions_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_partitions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_partitions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_partitions_pargs {
 public:


  virtual ~IDataFrameService_partitions_pargs() noexcept;
  const IDataFrameId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_partitions_result__isset {
  _IDataFrameService_partitions_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_partitions_result__isset;

class IDataFrameService_partitions_result {
 public:

  IDataFrameService_partitions_result(const IDataFrameService_partitions_result&);
  IDataFrameService_partitions_result& operator=(const IDataFrameService_partitions_result&);
  IDataFrameService_partitions_result() noexcept
                                      : success(0) {
  }

  virtual ~IDataFrameService_partitions_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_partitions_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_partitions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_partitions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_partitions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_partitions_presult__isset {
  _IDataFrameService_partitions_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_partitions_presult__isset;

class IDataFrameService_partitions_presult {
 public:


  virtual ~IDataFrameService_partitions_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_partitions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_saveAsObjectFile_args__isset {
  _IDataFrameService_saveAsObjectFile_args__isset() : id(false), path(false), compression(false) {}
  bool id :1;
  bool path :1;
  bool compression :1;
} _IDataFrameService_saveAsObjectFile_args__isset;

class IDataFrameService_saveAsObjectFile_args {
 public:

  IDataFrameService_saveAsObjectFile_args(const IDataFrameService_saveAsObjectFile_args&);
  IDataFrameService_saveAsObjectFile_args& operator=(const IDataFrameService_saveAsObjectFile_args&);
  IDataFrameService_saveAsObjectFile_args() noexcept
                                          : path(),
                                            compression(0) {
  }

  virtual ~IDataFrameService_saveAsObjectFile_args() noexcept;
  IDataFrameId id;
  std::string path;
  int8_t compression;

  _IDataFrameService_saveAsObjectFile_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_path(const std::string& val);

  void __set_compression(const int8_t val);

  bool operator == (const IDataFrameService_saveAsObjectFile_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(compression == rhs.compression))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_saveAsObjectFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_saveAsObjectFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_saveAsObjectFile_pargs {
 public:


  virtual ~IDataFrameService_saveAsObjectFile_pargs() noexcept;
  const IDataFrameId* id;
  const std::string* path;
  const int8_t* compression;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_saveAsObjectFile_result__isset {
  _IDataFrameService_saveAsObjectFile_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_saveAsObjectFile_result__isset;

class IDataFrameService_saveAsObjectFile_result {
 public:

  IDataFrameService_saveAsObjectFile_result(const IDataFrameService_saveAsObjectFile_result&);
  IDataFrameService_saveAsObjectFile_result& operator=(const IDataFrameService_saveAsObjectFile_result&);
  IDataFrameService_saveAsObjectFile_result() noexcept {
  }

  virtual ~IDataFrameService_saveAsObjectFile_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_saveAsObjectFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_saveAsObjectFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_saveAsObjectFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_saveAsObjectFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_saveAsObjectFile_presult__isset {
  _IDataFrameService_saveAsObjectFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_saveAsObjectFile_presult__isset;

class IDataFrameService_saveAsObjectFile_presult {
 public:


  virtual ~IDataFrameService_saveAsObjectFile_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_saveAsObjectFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_saveAsTextFile_args__isset {
  _IDataFrameService_saveAsTextFile_args__isset() : id(false), path(false) {}
  bool id :1;
  bool path :1;
} _IDataFrameService_saveAsTextFile_args__isset;

class IDataFrameService_saveAsTextFile_args {
 public:

  IDataFrameService_saveAsTextFile_args(const IDataFrameService_saveAsTextFile_args&);
  IDataFrameService_saveAsTextFile_args& operator=(const IDataFrameService_saveAsTextFile_args&);
  IDataFrameService_saveAsTextFile_args() noexcept
                                        : path() {
  }

  virtual ~IDataFrameService_saveAsTextFile_args() noexcept;
  IDataFrameId id;
  std::string path;

  _IDataFrameService_saveAsTextFile_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_path(const std::string& val);

  bool operator == (const IDataFrameService_saveAsTextFile_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_saveAsTextFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_saveAsTextFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_saveAsTextFile_pargs {
 public:


  virtual ~IDataFrameService_saveAsTextFile_pargs() noexcept;
  const IDataFrameId* id;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_saveAsTextFile_result__isset {
  _IDataFrameService_saveAsTextFile_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_saveAsTextFile_result__isset;

class IDataFrameService_saveAsTextFile_result {
 public:

  IDataFrameService_saveAsTextFile_result(const IDataFrameService_saveAsTextFile_result&);
  IDataFrameService_saveAsTextFile_result& operator=(const IDataFrameService_saveAsTextFile_result&);
  IDataFrameService_saveAsTextFile_result() noexcept {
  }

  virtual ~IDataFrameService_saveAsTextFile_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_saveAsTextFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_saveAsTextFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_saveAsTextFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_saveAsTextFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_saveAsTextFile_presult__isset {
  _IDataFrameService_saveAsTextFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_saveAsTextFile_presult__isset;

class IDataFrameService_saveAsTextFile_presult {
 public:


  virtual ~IDataFrameService_saveAsTextFile_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_saveAsTextFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_saveAsJsonFile_args__isset {
  _IDataFrameService_saveAsJsonFile_args__isset() : id(false), path(false), pretty(false) {}
  bool id :1;
  bool path :1;
  bool pretty :1;
} _IDataFrameService_saveAsJsonFile_args__isset;

class IDataFrameService_saveAsJsonFile_args {
 public:

  IDataFrameService_saveAsJsonFile_args(const IDataFrameService_saveAsJsonFile_args&);
  IDataFrameService_saveAsJsonFile_args& operator=(const IDataFrameService_saveAsJsonFile_args&);
  IDataFrameService_saveAsJsonFile_args() noexcept
                                        : path(),
                                          pretty(0) {
  }

  virtual ~IDataFrameService_saveAsJsonFile_args() noexcept;
  IDataFrameId id;
  std::string path;
  bool pretty;

  _IDataFrameService_saveAsJsonFile_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_path(const std::string& val);

  void __set_pretty(const bool val);

  bool operator == (const IDataFrameService_saveAsJsonFile_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(pretty == rhs.pretty))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_saveAsJsonFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_saveAsJsonFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_saveAsJsonFile_pargs {
 public:


  virtual ~IDataFrameService_saveAsJsonFile_pargs() noexcept;
  const IDataFrameId* id;
  const std::string* path;
  const bool* pretty;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_saveAsJsonFile_result__isset {
  _IDataFrameService_saveAsJsonFile_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_saveAsJsonFile_result__isset;

class IDataFrameService_saveAsJsonFile_result {
 public:

  IDataFrameService_saveAsJsonFile_result(const IDataFrameService_saveAsJsonFile_result&);
  IDataFrameService_saveAsJsonFile_result& operator=(const IDataFrameService_saveAsJsonFile_result&);
  IDataFrameService_saveAsJsonFile_result() noexcept {
  }

  virtual ~IDataFrameService_saveAsJsonFile_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_saveAsJsonFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_saveAsJsonFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_saveAsJsonFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_saveAsJsonFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_saveAsJsonFile_presult__isset {
  _IDataFrameService_saveAsJsonFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_saveAsJsonFile_presult__isset;

class IDataFrameService_saveAsJsonFile_presult {
 public:


  virtual ~IDataFrameService_saveAsJsonFile_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_saveAsJsonFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_repartition_args__isset {
  _IDataFrameService_repartition_args__isset() : id(false), numPartitions(false), preserveOrdering(false), global_(false) {}
  bool id :1;
  bool numPartitions :1;
  bool preserveOrdering :1;
  bool global_ :1;
} _IDataFrameService_repartition_args__isset;

class IDataFrameService_repartition_args {
 public:

  IDataFrameService_repartition_args(const IDataFrameService_repartition_args&) noexcept;
  IDataFrameService_repartition_args& operator=(const IDataFrameService_repartition_args&) noexcept;
  IDataFrameService_repartition_args() noexcept
                                     : numPartitions(0),
                                       preserveOrdering(0),
                                       global_(0) {
  }

  virtual ~IDataFrameService_repartition_args() noexcept;
  IDataFrameId id;
  int64_t numPartitions;
  bool preserveOrdering;
  bool global_;

  _IDataFrameService_repartition_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  void __set_preserveOrdering(const bool val);

  void __set_global_(const bool val);

  bool operator == (const IDataFrameService_repartition_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    if (!(preserveOrdering == rhs.preserveOrdering))
      return false;
    if (!(global_ == rhs.global_))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_repartition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_repartition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_repartition_pargs {
 public:


  virtual ~IDataFrameService_repartition_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* numPartitions;
  const bool* preserveOrdering;
  const bool* global_;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_repartition_result__isset {
  _IDataFrameService_repartition_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_repartition_result__isset;

class IDataFrameService_repartition_result {
 public:

  IDataFrameService_repartition_result(const IDataFrameService_repartition_result&);
  IDataFrameService_repartition_result& operator=(const IDataFrameService_repartition_result&);
  IDataFrameService_repartition_result() noexcept {
  }

  virtual ~IDataFrameService_repartition_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_repartition_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_repartition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_repartition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_repartition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_repartition_presult__isset {
  _IDataFrameService_repartition_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_repartition_presult__isset;

class IDataFrameService_repartition_presult {
 public:


  virtual ~IDataFrameService_repartition_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_repartition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_partitionByRandom_args__isset {
  _IDataFrameService_partitionByRandom_args__isset() : id(false), numPartitions(false) {}
  bool id :1;
  bool numPartitions :1;
} _IDataFrameService_partitionByRandom_args__isset;

class IDataFrameService_partitionByRandom_args {
 public:

  IDataFrameService_partitionByRandom_args(const IDataFrameService_partitionByRandom_args&) noexcept;
  IDataFrameService_partitionByRandom_args& operator=(const IDataFrameService_partitionByRandom_args&) noexcept;
  IDataFrameService_partitionByRandom_args() noexcept
                                           : numPartitions(0) {
  }

  virtual ~IDataFrameService_partitionByRandom_args() noexcept;
  IDataFrameId id;
  int64_t numPartitions;

  _IDataFrameService_partitionByRandom_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_partitionByRandom_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_partitionByRandom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_partitionByRandom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_partitionByRandom_pargs {
 public:


  virtual ~IDataFrameService_partitionByRandom_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_partitionByRandom_result__isset {
  _IDataFrameService_partitionByRandom_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_partitionByRandom_result__isset;

class IDataFrameService_partitionByRandom_result {
 public:

  IDataFrameService_partitionByRandom_result(const IDataFrameService_partitionByRandom_result&);
  IDataFrameService_partitionByRandom_result& operator=(const IDataFrameService_partitionByRandom_result&);
  IDataFrameService_partitionByRandom_result() noexcept {
  }

  virtual ~IDataFrameService_partitionByRandom_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_partitionByRandom_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_partitionByRandom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_partitionByRandom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_partitionByRandom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_partitionByRandom_presult__isset {
  _IDataFrameService_partitionByRandom_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_partitionByRandom_presult__isset;

class IDataFrameService_partitionByRandom_presult {
 public:


  virtual ~IDataFrameService_partitionByRandom_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_partitionByRandom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_partitionByHash_args__isset {
  _IDataFrameService_partitionByHash_args__isset() : id(false), numPartitions(false) {}
  bool id :1;
  bool numPartitions :1;
} _IDataFrameService_partitionByHash_args__isset;

class IDataFrameService_partitionByHash_args {
 public:

  IDataFrameService_partitionByHash_args(const IDataFrameService_partitionByHash_args&) noexcept;
  IDataFrameService_partitionByHash_args& operator=(const IDataFrameService_partitionByHash_args&) noexcept;
  IDataFrameService_partitionByHash_args() noexcept
                                         : numPartitions(0) {
  }

  virtual ~IDataFrameService_partitionByHash_args() noexcept;
  IDataFrameId id;
  int64_t numPartitions;

  _IDataFrameService_partitionByHash_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_partitionByHash_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_partitionByHash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_partitionByHash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_partitionByHash_pargs {
 public:


  virtual ~IDataFrameService_partitionByHash_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_partitionByHash_result__isset {
  _IDataFrameService_partitionByHash_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_partitionByHash_result__isset;

class IDataFrameService_partitionByHash_result {
 public:

  IDataFrameService_partitionByHash_result(const IDataFrameService_partitionByHash_result&);
  IDataFrameService_partitionByHash_result& operator=(const IDataFrameService_partitionByHash_result&);
  IDataFrameService_partitionByHash_result() noexcept {
  }

  virtual ~IDataFrameService_partitionByHash_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_partitionByHash_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_partitionByHash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_partitionByHash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_partitionByHash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_partitionByHash_presult__isset {
  _IDataFrameService_partitionByHash_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_partitionByHash_presult__isset;

class IDataFrameService_partitionByHash_presult {
 public:


  virtual ~IDataFrameService_partitionByHash_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_partitionByHash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_partitionBy_args__isset {
  _IDataFrameService_partitionBy_args__isset() : id(false), src(false), numPartitions(false) {}
  bool id :1;
  bool src :1;
  bool numPartitions :1;
} _IDataFrameService_partitionBy_args__isset;

class IDataFrameService_partitionBy_args {
 public:

  IDataFrameService_partitionBy_args(const IDataFrameService_partitionBy_args&);
  IDataFrameService_partitionBy_args& operator=(const IDataFrameService_partitionBy_args&);
  IDataFrameService_partitionBy_args() noexcept
                                     : numPartitions(0) {
  }

  virtual ~IDataFrameService_partitionBy_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  int64_t numPartitions;

  _IDataFrameService_partitionBy_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_partitionBy_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_partitionBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_partitionBy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_partitionBy_pargs {
 public:


  virtual ~IDataFrameService_partitionBy_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_partitionBy_result__isset {
  _IDataFrameService_partitionBy_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_partitionBy_result__isset;

class IDataFrameService_partitionBy_result {
 public:

  IDataFrameService_partitionBy_result(const IDataFrameService_partitionBy_result&);
  IDataFrameService_partitionBy_result& operator=(const IDataFrameService_partitionBy_result&);
  IDataFrameService_partitionBy_result() noexcept {
  }

  virtual ~IDataFrameService_partitionBy_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_partitionBy_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_partitionBy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_partitionBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_partitionBy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_partitionBy_presult__isset {
  _IDataFrameService_partitionBy_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_partitionBy_presult__isset;

class IDataFrameService_partitionBy_presult {
 public:


  virtual ~IDataFrameService_partitionBy_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_partitionBy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_map__args__isset {
  _IDataFrameService_map__args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_map__args__isset;

class IDataFrameService_map__args {
 public:

  IDataFrameService_map__args(const IDataFrameService_map__args&);
  IDataFrameService_map__args& operator=(const IDataFrameService_map__args&);
  IDataFrameService_map__args() noexcept {
  }

  virtual ~IDataFrameService_map__args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_map__args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_map__args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_map__args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_map__args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_map__pargs {
 public:


  virtual ~IDataFrameService_map__pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_map__result__isset {
  _IDataFrameService_map__result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_map__result__isset;

class IDataFrameService_map__result {
 public:

  IDataFrameService_map__result(const IDataFrameService_map__result&);
  IDataFrameService_map__result& operator=(const IDataFrameService_map__result&);
  IDataFrameService_map__result() noexcept {
  }

  virtual ~IDataFrameService_map__result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_map__result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_map__result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_map__result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_map__result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_map__presult__isset {
  _IDataFrameService_map__presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_map__presult__isset;

class IDataFrameService_map__presult {
 public:


  virtual ~IDataFrameService_map__presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_map__presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_filter_args__isset {
  _IDataFrameService_filter_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_filter_args__isset;

class IDataFrameService_filter_args {
 public:

  IDataFrameService_filter_args(const IDataFrameService_filter_args&);
  IDataFrameService_filter_args& operator=(const IDataFrameService_filter_args&);
  IDataFrameService_filter_args() noexcept {
  }

  virtual ~IDataFrameService_filter_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_filter_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_filter_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_filter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_filter_pargs {
 public:


  virtual ~IDataFrameService_filter_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_filter_result__isset {
  _IDataFrameService_filter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_filter_result__isset;

class IDataFrameService_filter_result {
 public:

  IDataFrameService_filter_result(const IDataFrameService_filter_result&);
  IDataFrameService_filter_result& operator=(const IDataFrameService_filter_result&);
  IDataFrameService_filter_result() noexcept {
  }

  virtual ~IDataFrameService_filter_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_filter_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_filter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_filter_presult__isset {
  _IDataFrameService_filter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_filter_presult__isset;

class IDataFrameService_filter_presult {
 public:


  virtual ~IDataFrameService_filter_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_filter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_flatmap_args__isset {
  _IDataFrameService_flatmap_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_flatmap_args__isset;

class IDataFrameService_flatmap_args {
 public:

  IDataFrameService_flatmap_args(const IDataFrameService_flatmap_args&);
  IDataFrameService_flatmap_args& operator=(const IDataFrameService_flatmap_args&);
  IDataFrameService_flatmap_args() noexcept {
  }

  virtual ~IDataFrameService_flatmap_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_flatmap_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_flatmap_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_flatmap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_flatmap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_flatmap_pargs {
 public:


  virtual ~IDataFrameService_flatmap_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_flatmap_result__isset {
  _IDataFrameService_flatmap_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_flatmap_result__isset;

class IDataFrameService_flatmap_result {
 public:

  IDataFrameService_flatmap_result(const IDataFrameService_flatmap_result&);
  IDataFrameService_flatmap_result& operator=(const IDataFrameService_flatmap_result&);
  IDataFrameService_flatmap_result() noexcept {
  }

  virtual ~IDataFrameService_flatmap_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_flatmap_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_flatmap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_flatmap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_flatmap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_flatmap_presult__isset {
  _IDataFrameService_flatmap_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_flatmap_presult__isset;

class IDataFrameService_flatmap_presult {
 public:


  virtual ~IDataFrameService_flatmap_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_flatmap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_keyBy_args__isset {
  _IDataFrameService_keyBy_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_keyBy_args__isset;

class IDataFrameService_keyBy_args {
 public:

  IDataFrameService_keyBy_args(const IDataFrameService_keyBy_args&);
  IDataFrameService_keyBy_args& operator=(const IDataFrameService_keyBy_args&);
  IDataFrameService_keyBy_args() noexcept {
  }

  virtual ~IDataFrameService_keyBy_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_keyBy_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_keyBy_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_keyBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_keyBy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_keyBy_pargs {
 public:


  virtual ~IDataFrameService_keyBy_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_keyBy_result__isset {
  _IDataFrameService_keyBy_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_keyBy_result__isset;

class IDataFrameService_keyBy_result {
 public:

  IDataFrameService_keyBy_result(const IDataFrameService_keyBy_result&);
  IDataFrameService_keyBy_result& operator=(const IDataFrameService_keyBy_result&);
  IDataFrameService_keyBy_result() noexcept {
  }

  virtual ~IDataFrameService_keyBy_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_keyBy_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_keyBy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_keyBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_keyBy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_keyBy_presult__isset {
  _IDataFrameService_keyBy_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_keyBy_presult__isset;

class IDataFrameService_keyBy_presult {
 public:


  virtual ~IDataFrameService_keyBy_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_keyBy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_mapPartitions_args__isset {
  _IDataFrameService_mapPartitions_args__isset() : id(false), src(false), preservesPartitioning(false) {}
  bool id :1;
  bool src :1;
  bool preservesPartitioning :1;
} _IDataFrameService_mapPartitions_args__isset;

class IDataFrameService_mapPartitions_args {
 public:

  IDataFrameService_mapPartitions_args(const IDataFrameService_mapPartitions_args&);
  IDataFrameService_mapPartitions_args& operator=(const IDataFrameService_mapPartitions_args&);
  IDataFrameService_mapPartitions_args() noexcept
                                       : preservesPartitioning(0) {
  }

  virtual ~IDataFrameService_mapPartitions_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  bool preservesPartitioning;

  _IDataFrameService_mapPartitions_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_preservesPartitioning(const bool val);

  bool operator == (const IDataFrameService_mapPartitions_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(preservesPartitioning == rhs.preservesPartitioning))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapPartitions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapPartitions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_mapPartitions_pargs {
 public:


  virtual ~IDataFrameService_mapPartitions_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const bool* preservesPartitioning;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapPartitions_result__isset {
  _IDataFrameService_mapPartitions_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapPartitions_result__isset;

class IDataFrameService_mapPartitions_result {
 public:

  IDataFrameService_mapPartitions_result(const IDataFrameService_mapPartitions_result&);
  IDataFrameService_mapPartitions_result& operator=(const IDataFrameService_mapPartitions_result&);
  IDataFrameService_mapPartitions_result() noexcept {
  }

  virtual ~IDataFrameService_mapPartitions_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapPartitions_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_mapPartitions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapPartitions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapPartitions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapPartitions_presult__isset {
  _IDataFrameService_mapPartitions_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapPartitions_presult__isset;

class IDataFrameService_mapPartitions_presult {
 public:


  virtual ~IDataFrameService_mapPartitions_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapPartitions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_mapPartitionsWithIndex_args__isset {
  _IDataFrameService_mapPartitionsWithIndex_args__isset() : id(false), src(false), preservesPartitioning(false) {}
  bool id :1;
  bool src :1;
  bool preservesPartitioning :1;
} _IDataFrameService_mapPartitionsWithIndex_args__isset;

class IDataFrameService_mapPartitionsWithIndex_args {
 public:

  IDataFrameService_mapPartitionsWithIndex_args(const IDataFrameService_mapPartitionsWithIndex_args&);
  IDataFrameService_mapPartitionsWithIndex_args& operator=(const IDataFrameService_mapPartitionsWithIndex_args&);
  IDataFrameService_mapPartitionsWithIndex_args() noexcept
                                                : preservesPartitioning(0) {
  }

  virtual ~IDataFrameService_mapPartitionsWithIndex_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  bool preservesPartitioning;

  _IDataFrameService_mapPartitionsWithIndex_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_preservesPartitioning(const bool val);

  bool operator == (const IDataFrameService_mapPartitionsWithIndex_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(preservesPartitioning == rhs.preservesPartitioning))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapPartitionsWithIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapPartitionsWithIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_mapPartitionsWithIndex_pargs {
 public:


  virtual ~IDataFrameService_mapPartitionsWithIndex_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const bool* preservesPartitioning;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapPartitionsWithIndex_result__isset {
  _IDataFrameService_mapPartitionsWithIndex_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapPartitionsWithIndex_result__isset;

class IDataFrameService_mapPartitionsWithIndex_result {
 public:

  IDataFrameService_mapPartitionsWithIndex_result(const IDataFrameService_mapPartitionsWithIndex_result&);
  IDataFrameService_mapPartitionsWithIndex_result& operator=(const IDataFrameService_mapPartitionsWithIndex_result&);
  IDataFrameService_mapPartitionsWithIndex_result() noexcept {
  }

  virtual ~IDataFrameService_mapPartitionsWithIndex_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapPartitionsWithIndex_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_mapPartitionsWithIndex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapPartitionsWithIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapPartitionsWithIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapPartitionsWithIndex_presult__isset {
  _IDataFrameService_mapPartitionsWithIndex_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapPartitionsWithIndex_presult__isset;

class IDataFrameService_mapPartitionsWithIndex_presult {
 public:


  virtual ~IDataFrameService_mapPartitionsWithIndex_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapPartitionsWithIndex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_mapExecutor_args__isset {
  _IDataFrameService_mapExecutor_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_mapExecutor_args__isset;

class IDataFrameService_mapExecutor_args {
 public:

  IDataFrameService_mapExecutor_args(const IDataFrameService_mapExecutor_args&);
  IDataFrameService_mapExecutor_args& operator=(const IDataFrameService_mapExecutor_args&);
  IDataFrameService_mapExecutor_args() noexcept {
  }

  virtual ~IDataFrameService_mapExecutor_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_mapExecutor_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_mapExecutor_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapExecutor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapExecutor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_mapExecutor_pargs {
 public:


  virtual ~IDataFrameService_mapExecutor_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapExecutor_result__isset {
  _IDataFrameService_mapExecutor_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapExecutor_result__isset;

class IDataFrameService_mapExecutor_result {
 public:

  IDataFrameService_mapExecutor_result(const IDataFrameService_mapExecutor_result&);
  IDataFrameService_mapExecutor_result& operator=(const IDataFrameService_mapExecutor_result&);
  IDataFrameService_mapExecutor_result() noexcept {
  }

  virtual ~IDataFrameService_mapExecutor_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapExecutor_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_mapExecutor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapExecutor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapExecutor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapExecutor_presult__isset {
  _IDataFrameService_mapExecutor_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapExecutor_presult__isset;

class IDataFrameService_mapExecutor_presult {
 public:


  virtual ~IDataFrameService_mapExecutor_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapExecutor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_mapExecutorTo_args__isset {
  _IDataFrameService_mapExecutorTo_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_mapExecutorTo_args__isset;

class IDataFrameService_mapExecutorTo_args {
 public:

  IDataFrameService_mapExecutorTo_args(const IDataFrameService_mapExecutorTo_args&);
  IDataFrameService_mapExecutorTo_args& operator=(const IDataFrameService_mapExecutorTo_args&);
  IDataFrameService_mapExecutorTo_args() noexcept {
  }

  virtual ~IDataFrameService_mapExecutorTo_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_mapExecutorTo_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_mapExecutorTo_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapExecutorTo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapExecutorTo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_mapExecutorTo_pargs {
 public:


  virtual ~IDataFrameService_mapExecutorTo_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapExecutorTo_result__isset {
  _IDataFrameService_mapExecutorTo_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapExecutorTo_result__isset;

class IDataFrameService_mapExecutorTo_result {
 public:

  IDataFrameService_mapExecutorTo_result(const IDataFrameService_mapExecutorTo_result&);
  IDataFrameService_mapExecutorTo_result& operator=(const IDataFrameService_mapExecutorTo_result&);
  IDataFrameService_mapExecutorTo_result() noexcept {
  }

  virtual ~IDataFrameService_mapExecutorTo_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapExecutorTo_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_mapExecutorTo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapExecutorTo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapExecutorTo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapExecutorTo_presult__isset {
  _IDataFrameService_mapExecutorTo_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapExecutorTo_presult__isset;

class IDataFrameService_mapExecutorTo_presult {
 public:


  virtual ~IDataFrameService_mapExecutorTo_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapExecutorTo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_groupBy_args__isset {
  _IDataFrameService_groupBy_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_groupBy_args__isset;

class IDataFrameService_groupBy_args {
 public:

  IDataFrameService_groupBy_args(const IDataFrameService_groupBy_args&);
  IDataFrameService_groupBy_args& operator=(const IDataFrameService_groupBy_args&);
  IDataFrameService_groupBy_args() noexcept {
  }

  virtual ~IDataFrameService_groupBy_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_groupBy_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_groupBy_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupBy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_groupBy_pargs {
 public:


  virtual ~IDataFrameService_groupBy_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupBy_result__isset {
  _IDataFrameService_groupBy_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupBy_result__isset;

class IDataFrameService_groupBy_result {
 public:

  IDataFrameService_groupBy_result(const IDataFrameService_groupBy_result&);
  IDataFrameService_groupBy_result& operator=(const IDataFrameService_groupBy_result&);
  IDataFrameService_groupBy_result() noexcept {
  }

  virtual ~IDataFrameService_groupBy_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupBy_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_groupBy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupBy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupBy_presult__isset {
  _IDataFrameService_groupBy_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupBy_presult__isset;

class IDataFrameService_groupBy_presult {
 public:


  virtual ~IDataFrameService_groupBy_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupBy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_groupBy2_args__isset {
  _IDataFrameService_groupBy2_args__isset() : id(false), src(false), numPartitions(false) {}
  bool id :1;
  bool src :1;
  bool numPartitions :1;
} _IDataFrameService_groupBy2_args__isset;

class IDataFrameService_groupBy2_args {
 public:

  IDataFrameService_groupBy2_args(const IDataFrameService_groupBy2_args&);
  IDataFrameService_groupBy2_args& operator=(const IDataFrameService_groupBy2_args&);
  IDataFrameService_groupBy2_args() noexcept
                                  : numPartitions(0) {
  }

  virtual ~IDataFrameService_groupBy2_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  int64_t numPartitions;

  _IDataFrameService_groupBy2_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_groupBy2_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupBy2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupBy2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_groupBy2_pargs {
 public:


  virtual ~IDataFrameService_groupBy2_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupBy2_result__isset {
  _IDataFrameService_groupBy2_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupBy2_result__isset;

class IDataFrameService_groupBy2_result {
 public:

  IDataFrameService_groupBy2_result(const IDataFrameService_groupBy2_result&);
  IDataFrameService_groupBy2_result& operator=(const IDataFrameService_groupBy2_result&);
  IDataFrameService_groupBy2_result() noexcept {
  }

  virtual ~IDataFrameService_groupBy2_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupBy2_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_groupBy2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupBy2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupBy2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupBy2_presult__isset {
  _IDataFrameService_groupBy2_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupBy2_presult__isset;

class IDataFrameService_groupBy2_presult {
 public:


  virtual ~IDataFrameService_groupBy2_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupBy2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sort_args__isset {
  _IDataFrameService_sort_args__isset() : id(false), ascending(false) {}
  bool id :1;
  bool ascending :1;
} _IDataFrameService_sort_args__isset;

class IDataFrameService_sort_args {
 public:

  IDataFrameService_sort_args(const IDataFrameService_sort_args&) noexcept;
  IDataFrameService_sort_args& operator=(const IDataFrameService_sort_args&) noexcept;
  IDataFrameService_sort_args() noexcept
                              : ascending(0) {
  }

  virtual ~IDataFrameService_sort_args() noexcept;
  IDataFrameId id;
  bool ascending;

  _IDataFrameService_sort_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_ascending(const bool val);

  bool operator == (const IDataFrameService_sort_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sort_pargs {
 public:


  virtual ~IDataFrameService_sort_pargs() noexcept;
  const IDataFrameId* id;
  const bool* ascending;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sort_result__isset {
  _IDataFrameService_sort_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sort_result__isset;

class IDataFrameService_sort_result {
 public:

  IDataFrameService_sort_result(const IDataFrameService_sort_result&);
  IDataFrameService_sort_result& operator=(const IDataFrameService_sort_result&);
  IDataFrameService_sort_result() noexcept {
  }

  virtual ~IDataFrameService_sort_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sort_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sort_presult__isset {
  _IDataFrameService_sort_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sort_presult__isset;

class IDataFrameService_sort_presult {
 public:


  virtual ~IDataFrameService_sort_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sort2_args__isset {
  _IDataFrameService_sort2_args__isset() : id(false), ascending(false), numPartitions(false) {}
  bool id :1;
  bool ascending :1;
  bool numPartitions :1;
} _IDataFrameService_sort2_args__isset;

class IDataFrameService_sort2_args {
 public:

  IDataFrameService_sort2_args(const IDataFrameService_sort2_args&) noexcept;
  IDataFrameService_sort2_args& operator=(const IDataFrameService_sort2_args&) noexcept;
  IDataFrameService_sort2_args() noexcept
                               : ascending(0),
                                 numPartitions(0) {
  }

  virtual ~IDataFrameService_sort2_args() noexcept;
  IDataFrameId id;
  bool ascending;
  int64_t numPartitions;

  _IDataFrameService_sort2_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_ascending(const bool val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_sort2_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sort2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sort2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sort2_pargs {
 public:


  virtual ~IDataFrameService_sort2_pargs() noexcept;
  const IDataFrameId* id;
  const bool* ascending;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sort2_result__isset {
  _IDataFrameService_sort2_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sort2_result__isset;

class IDataFrameService_sort2_result {
 public:

  IDataFrameService_sort2_result(const IDataFrameService_sort2_result&);
  IDataFrameService_sort2_result& operator=(const IDataFrameService_sort2_result&);
  IDataFrameService_sort2_result() noexcept {
  }

  virtual ~IDataFrameService_sort2_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sort2_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sort2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sort2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sort2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sort2_presult__isset {
  _IDataFrameService_sort2_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sort2_presult__isset;

class IDataFrameService_sort2_presult {
 public:


  virtual ~IDataFrameService_sort2_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sort2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sortBy_args__isset {
  _IDataFrameService_sortBy_args__isset() : id(false), src(false), ascending(false) {}
  bool id :1;
  bool src :1;
  bool ascending :1;
} _IDataFrameService_sortBy_args__isset;

class IDataFrameService_sortBy_args {
 public:

  IDataFrameService_sortBy_args(const IDataFrameService_sortBy_args&);
  IDataFrameService_sortBy_args& operator=(const IDataFrameService_sortBy_args&);
  IDataFrameService_sortBy_args() noexcept
                                : ascending(0) {
  }

  virtual ~IDataFrameService_sortBy_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  bool ascending;

  _IDataFrameService_sortBy_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_ascending(const bool val);

  bool operator == (const IDataFrameService_sortBy_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortBy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sortBy_pargs {
 public:


  virtual ~IDataFrameService_sortBy_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const bool* ascending;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortBy_result__isset {
  _IDataFrameService_sortBy_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortBy_result__isset;

class IDataFrameService_sortBy_result {
 public:

  IDataFrameService_sortBy_result(const IDataFrameService_sortBy_result&);
  IDataFrameService_sortBy_result& operator=(const IDataFrameService_sortBy_result&);
  IDataFrameService_sortBy_result() noexcept {
  }

  virtual ~IDataFrameService_sortBy_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortBy_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sortBy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortBy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortBy_presult__isset {
  _IDataFrameService_sortBy_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortBy_presult__isset;

class IDataFrameService_sortBy_presult {
 public:


  virtual ~IDataFrameService_sortBy_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortBy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sortBy3_args__isset {
  _IDataFrameService_sortBy3_args__isset() : id(false), src(false), ascending(false), numPartitions(false) {}
  bool id :1;
  bool src :1;
  bool ascending :1;
  bool numPartitions :1;
} _IDataFrameService_sortBy3_args__isset;

class IDataFrameService_sortBy3_args {
 public:

  IDataFrameService_sortBy3_args(const IDataFrameService_sortBy3_args&);
  IDataFrameService_sortBy3_args& operator=(const IDataFrameService_sortBy3_args&);
  IDataFrameService_sortBy3_args() noexcept
                                 : ascending(0),
                                   numPartitions(0) {
  }

  virtual ~IDataFrameService_sortBy3_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  bool ascending;
  int64_t numPartitions;

  _IDataFrameService_sortBy3_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_ascending(const bool val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_sortBy3_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortBy3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortBy3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sortBy3_pargs {
 public:


  virtual ~IDataFrameService_sortBy3_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const bool* ascending;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortBy3_result__isset {
  _IDataFrameService_sortBy3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortBy3_result__isset;

class IDataFrameService_sortBy3_result {
 public:

  IDataFrameService_sortBy3_result(const IDataFrameService_sortBy3_result&);
  IDataFrameService_sortBy3_result& operator=(const IDataFrameService_sortBy3_result&);
  IDataFrameService_sortBy3_result() noexcept {
  }

  virtual ~IDataFrameService_sortBy3_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortBy3_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sortBy3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortBy3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortBy3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortBy3_presult__isset {
  _IDataFrameService_sortBy3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortBy3_presult__isset;

class IDataFrameService_sortBy3_presult {
 public:


  virtual ~IDataFrameService_sortBy3_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortBy3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_union__args__isset {
  _IDataFrameService_union__args__isset() : id(false), other(false), preserveOrder(false) {}
  bool id :1;
  bool other :1;
  bool preserveOrder :1;
} _IDataFrameService_union__args__isset;

class IDataFrameService_union__args {
 public:

  IDataFrameService_union__args(const IDataFrameService_union__args&) noexcept;
  IDataFrameService_union__args& operator=(const IDataFrameService_union__args&) noexcept;
  IDataFrameService_union__args() noexcept
                                : preserveOrder(0) {
  }

  virtual ~IDataFrameService_union__args() noexcept;
  IDataFrameId id;
  IDataFrameId other;
  bool preserveOrder;

  _IDataFrameService_union__args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_other(const IDataFrameId& val);

  void __set_preserveOrder(const bool val);

  bool operator == (const IDataFrameService_union__args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(other == rhs.other))
      return false;
    if (!(preserveOrder == rhs.preserveOrder))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_union__args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_union__args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_union__pargs {
 public:


  virtual ~IDataFrameService_union__pargs() noexcept;
  const IDataFrameId* id;
  const IDataFrameId* other;
  const bool* preserveOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_union__result__isset {
  _IDataFrameService_union__result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_union__result__isset;

class IDataFrameService_union__result {
 public:

  IDataFrameService_union__result(const IDataFrameService_union__result&);
  IDataFrameService_union__result& operator=(const IDataFrameService_union__result&);
  IDataFrameService_union__result() noexcept {
  }

  virtual ~IDataFrameService_union__result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_union__result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_union__result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_union__result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_union__result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_union__presult__isset {
  _IDataFrameService_union__presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_union__presult__isset;

class IDataFrameService_union__presult {
 public:


  virtual ~IDataFrameService_union__presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_union__presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_union4_args__isset {
  _IDataFrameService_union4_args__isset() : id(false), other(false), preserveOrder(false), src(false) {}
  bool id :1;
  bool other :1;
  bool preserveOrder :1;
  bool src :1;
} _IDataFrameService_union4_args__isset;

class IDataFrameService_union4_args {
 public:

  IDataFrameService_union4_args(const IDataFrameService_union4_args&);
  IDataFrameService_union4_args& operator=(const IDataFrameService_union4_args&);
  IDataFrameService_union4_args() noexcept
                                : preserveOrder(0) {
  }

  virtual ~IDataFrameService_union4_args() noexcept;
  IDataFrameId id;
  IDataFrameId other;
  bool preserveOrder;
   ::ignis::rpc::ISource src;

  _IDataFrameService_union4_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_other(const IDataFrameId& val);

  void __set_preserveOrder(const bool val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_union4_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(other == rhs.other))
      return false;
    if (!(preserveOrder == rhs.preserveOrder))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_union4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_union4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_union4_pargs {
 public:


  virtual ~IDataFrameService_union4_pargs() noexcept;
  const IDataFrameId* id;
  const IDataFrameId* other;
  const bool* preserveOrder;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_union4_result__isset {
  _IDataFrameService_union4_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_union4_result__isset;

class IDataFrameService_union4_result {
 public:

  IDataFrameService_union4_result(const IDataFrameService_union4_result&);
  IDataFrameService_union4_result& operator=(const IDataFrameService_union4_result&);
  IDataFrameService_union4_result() noexcept {
  }

  virtual ~IDataFrameService_union4_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_union4_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_union4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_union4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_union4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_union4_presult__isset {
  _IDataFrameService_union4_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_union4_presult__isset;

class IDataFrameService_union4_presult {
 public:


  virtual ~IDataFrameService_union4_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_union4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_join_args__isset {
  _IDataFrameService_join_args__isset() : id(false), other(false) {}
  bool id :1;
  bool other :1;
} _IDataFrameService_join_args__isset;

class IDataFrameService_join_args {
 public:

  IDataFrameService_join_args(const IDataFrameService_join_args&) noexcept;
  IDataFrameService_join_args& operator=(const IDataFrameService_join_args&) noexcept;
  IDataFrameService_join_args() noexcept {
  }

  virtual ~IDataFrameService_join_args() noexcept;
  IDataFrameId id;
  IDataFrameId other;

  _IDataFrameService_join_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_other(const IDataFrameId& val);

  bool operator == (const IDataFrameService_join_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(other == rhs.other))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_join_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_join_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_join_pargs {
 public:


  virtual ~IDataFrameService_join_pargs() noexcept;
  const IDataFrameId* id;
  const IDataFrameId* other;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_join_result__isset {
  _IDataFrameService_join_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_join_result__isset;

class IDataFrameService_join_result {
 public:

  IDataFrameService_join_result(const IDataFrameService_join_result&);
  IDataFrameService_join_result& operator=(const IDataFrameService_join_result&);
  IDataFrameService_join_result() noexcept {
  }

  virtual ~IDataFrameService_join_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_join_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_join_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_join_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_join_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_join_presult__isset {
  _IDataFrameService_join_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_join_presult__isset;

class IDataFrameService_join_presult {
 public:


  virtual ~IDataFrameService_join_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_join_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_join3a_args__isset {
  _IDataFrameService_join3a_args__isset() : id(false), other(false), numPartitions(false) {}
  bool id :1;
  bool other :1;
  bool numPartitions :1;
} _IDataFrameService_join3a_args__isset;

class IDataFrameService_join3a_args {
 public:

  IDataFrameService_join3a_args(const IDataFrameService_join3a_args&) noexcept;
  IDataFrameService_join3a_args& operator=(const IDataFrameService_join3a_args&) noexcept;
  IDataFrameService_join3a_args() noexcept
                                : numPartitions(0) {
  }

  virtual ~IDataFrameService_join3a_args() noexcept;
  IDataFrameId id;
  IDataFrameId other;
  int64_t numPartitions;

  _IDataFrameService_join3a_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_other(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_join3a_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(other == rhs.other))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_join3a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_join3a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_join3a_pargs {
 public:


  virtual ~IDataFrameService_join3a_pargs() noexcept;
  const IDataFrameId* id;
  const IDataFrameId* other;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_join3a_result__isset {
  _IDataFrameService_join3a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_join3a_result__isset;

class IDataFrameService_join3a_result {
 public:

  IDataFrameService_join3a_result(const IDataFrameService_join3a_result&);
  IDataFrameService_join3a_result& operator=(const IDataFrameService_join3a_result&);
  IDataFrameService_join3a_result() noexcept {
  }

  virtual ~IDataFrameService_join3a_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_join3a_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_join3a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_join3a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_join3a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_join3a_presult__isset {
  _IDataFrameService_join3a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_join3a_presult__isset;

class IDataFrameService_join3a_presult {
 public:


  virtual ~IDataFrameService_join3a_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_join3a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_join3b_args__isset {
  _IDataFrameService_join3b_args__isset() : id(false), other(false), src(false) {}
  bool id :1;
  bool other :1;
  bool src :1;
} _IDataFrameService_join3b_args__isset;

class IDataFrameService_join3b_args {
 public:

  IDataFrameService_join3b_args(const IDataFrameService_join3b_args&);
  IDataFrameService_join3b_args& operator=(const IDataFrameService_join3b_args&);
  IDataFrameService_join3b_args() noexcept {
  }

  virtual ~IDataFrameService_join3b_args() noexcept;
  IDataFrameId id;
  IDataFrameId other;
   ::ignis::rpc::ISource src;

  _IDataFrameService_join3b_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_other(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_join3b_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(other == rhs.other))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_join3b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_join3b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_join3b_pargs {
 public:


  virtual ~IDataFrameService_join3b_pargs() noexcept;
  const IDataFrameId* id;
  const IDataFrameId* other;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_join3b_result__isset {
  _IDataFrameService_join3b_result__isset() : success(false) {}
  bool success :1;
} _IDataFrameService_join3b_result__isset;

class IDataFrameService_join3b_result {
 public:

  IDataFrameService_join3b_result(const IDataFrameService_join3b_result&) noexcept;
  IDataFrameService_join3b_result& operator=(const IDataFrameService_join3b_result&) noexcept;
  IDataFrameService_join3b_result() noexcept {
  }

  virtual ~IDataFrameService_join3b_result() noexcept;
  IDataFrameId success;

  _IDataFrameService_join3b_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  bool operator == (const IDataFrameService_join3b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_join3b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_join3b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_join3b_presult__isset {
  _IDataFrameService_join3b_presult__isset() : success(false) {}
  bool success :1;
} _IDataFrameService_join3b_presult__isset;

class IDataFrameService_join3b_presult {
 public:


  virtual ~IDataFrameService_join3b_presult() noexcept;
  IDataFrameId* success;

  _IDataFrameService_join3b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_join4_args__isset {
  _IDataFrameService_join4_args__isset() : id(false), other(false), numPartitions(false), src(false) {}
  bool id :1;
  bool other :1;
  bool numPartitions :1;
  bool src :1;
} _IDataFrameService_join4_args__isset;

class IDataFrameService_join4_args {
 public:

  IDataFrameService_join4_args(const IDataFrameService_join4_args&);
  IDataFrameService_join4_args& operator=(const IDataFrameService_join4_args&);
  IDataFrameService_join4_args() noexcept
                               : numPartitions(0) {
  }

  virtual ~IDataFrameService_join4_args() noexcept;
  IDataFrameId id;
  IDataFrameId other;
  int64_t numPartitions;
   ::ignis::rpc::ISource src;

  _IDataFrameService_join4_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_other(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_join4_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(other == rhs.other))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_join4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_join4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_join4_pargs {
 public:


  virtual ~IDataFrameService_join4_pargs() noexcept;
  const IDataFrameId* id;
  const IDataFrameId* other;
  const int64_t* numPartitions;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_join4_result__isset {
  _IDataFrameService_join4_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_join4_result__isset;

class IDataFrameService_join4_result {
 public:

  IDataFrameService_join4_result(const IDataFrameService_join4_result&);
  IDataFrameService_join4_result& operator=(const IDataFrameService_join4_result&);
  IDataFrameService_join4_result() noexcept {
  }

  virtual ~IDataFrameService_join4_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_join4_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_join4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_join4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_join4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_join4_presult__isset {
  _IDataFrameService_join4_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_join4_presult__isset;

class IDataFrameService_join4_presult {
 public:


  virtual ~IDataFrameService_join4_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_join4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_distinct_args__isset {
  _IDataFrameService_distinct_args__isset() : id(false) {}
  bool id :1;
} _IDataFrameService_distinct_args__isset;

class IDataFrameService_distinct_args {
 public:

  IDataFrameService_distinct_args(const IDataFrameService_distinct_args&) noexcept;
  IDataFrameService_distinct_args& operator=(const IDataFrameService_distinct_args&) noexcept;
  IDataFrameService_distinct_args() noexcept {
  }

  virtual ~IDataFrameService_distinct_args() noexcept;
  IDataFrameId id;

  _IDataFrameService_distinct_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  bool operator == (const IDataFrameService_distinct_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_distinct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_distinct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_distinct_pargs {
 public:


  virtual ~IDataFrameService_distinct_pargs() noexcept;
  const IDataFrameId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_distinct_result__isset {
  _IDataFrameService_distinct_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_distinct_result__isset;

class IDataFrameService_distinct_result {
 public:

  IDataFrameService_distinct_result(const IDataFrameService_distinct_result&);
  IDataFrameService_distinct_result& operator=(const IDataFrameService_distinct_result&);
  IDataFrameService_distinct_result() noexcept {
  }

  virtual ~IDataFrameService_distinct_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_distinct_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_distinct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_distinct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_distinct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_distinct_presult__isset {
  _IDataFrameService_distinct_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_distinct_presult__isset;

class IDataFrameService_distinct_presult {
 public:


  virtual ~IDataFrameService_distinct_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_distinct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_distinct2a_args__isset {
  _IDataFrameService_distinct2a_args__isset() : id(false), numPartitions(false) {}
  bool id :1;
  bool numPartitions :1;
} _IDataFrameService_distinct2a_args__isset;

class IDataFrameService_distinct2a_args {
 public:

  IDataFrameService_distinct2a_args(const IDataFrameService_distinct2a_args&) noexcept;
  IDataFrameService_distinct2a_args& operator=(const IDataFrameService_distinct2a_args&) noexcept;
  IDataFrameService_distinct2a_args() noexcept
                                    : numPartitions(0) {
  }

  virtual ~IDataFrameService_distinct2a_args() noexcept;
  IDataFrameId id;
  int64_t numPartitions;

  _IDataFrameService_distinct2a_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_distinct2a_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_distinct2a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_distinct2a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_distinct2a_pargs {
 public:


  virtual ~IDataFrameService_distinct2a_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_distinct2a_result__isset {
  _IDataFrameService_distinct2a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_distinct2a_result__isset;

class IDataFrameService_distinct2a_result {
 public:

  IDataFrameService_distinct2a_result(const IDataFrameService_distinct2a_result&);
  IDataFrameService_distinct2a_result& operator=(const IDataFrameService_distinct2a_result&);
  IDataFrameService_distinct2a_result() noexcept {
  }

  virtual ~IDataFrameService_distinct2a_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_distinct2a_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_distinct2a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_distinct2a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_distinct2a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_distinct2a_presult__isset {
  _IDataFrameService_distinct2a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_distinct2a_presult__isset;

class IDataFrameService_distinct2a_presult {
 public:


  virtual ~IDataFrameService_distinct2a_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_distinct2a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_distinct2b_args__isset {
  _IDataFrameService_distinct2b_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_distinct2b_args__isset;

class IDataFrameService_distinct2b_args {
 public:

  IDataFrameService_distinct2b_args(const IDataFrameService_distinct2b_args&);
  IDataFrameService_distinct2b_args& operator=(const IDataFrameService_distinct2b_args&);
  IDataFrameService_distinct2b_args() noexcept {
  }

  virtual ~IDataFrameService_distinct2b_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_distinct2b_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_distinct2b_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_distinct2b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_distinct2b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_distinct2b_pargs {
 public:


  virtual ~IDataFrameService_distinct2b_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_distinct2b_result__isset {
  _IDataFrameService_distinct2b_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_distinct2b_result__isset;

class IDataFrameService_distinct2b_result {
 public:

  IDataFrameService_distinct2b_result(const IDataFrameService_distinct2b_result&);
  IDataFrameService_distinct2b_result& operator=(const IDataFrameService_distinct2b_result&);
  IDataFrameService_distinct2b_result() noexcept {
  }

  virtual ~IDataFrameService_distinct2b_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_distinct2b_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_distinct2b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_distinct2b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_distinct2b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_distinct2b_presult__isset {
  _IDataFrameService_distinct2b_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_distinct2b_presult__isset;

class IDataFrameService_distinct2b_presult {
 public:


  virtual ~IDataFrameService_distinct2b_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_distinct2b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_distinct3_args__isset {
  _IDataFrameService_distinct3_args__isset() : id(false), numPartitions(false), src(false) {}
  bool id :1;
  bool numPartitions :1;
  bool src :1;
} _IDataFrameService_distinct3_args__isset;

class IDataFrameService_distinct3_args {
 public:

  IDataFrameService_distinct3_args(const IDataFrameService_distinct3_args&);
  IDataFrameService_distinct3_args& operator=(const IDataFrameService_distinct3_args&);
  IDataFrameService_distinct3_args() noexcept
                                   : numPartitions(0) {
  }

  virtual ~IDataFrameService_distinct3_args() noexcept;
  IDataFrameId id;
  int64_t numPartitions;
   ::ignis::rpc::ISource src;

  _IDataFrameService_distinct3_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_distinct3_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_distinct3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_distinct3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_distinct3_pargs {
 public:


  virtual ~IDataFrameService_distinct3_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* numPartitions;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_distinct3_result__isset {
  _IDataFrameService_distinct3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_distinct3_result__isset;

class IDataFrameService_distinct3_result {
 public:

  IDataFrameService_distinct3_result(const IDataFrameService_distinct3_result&);
  IDataFrameService_distinct3_result& operator=(const IDataFrameService_distinct3_result&);
  IDataFrameService_distinct3_result() noexcept {
  }

  virtual ~IDataFrameService_distinct3_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_distinct3_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_distinct3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_distinct3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_distinct3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_distinct3_presult__isset {
  _IDataFrameService_distinct3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_distinct3_presult__isset;

class IDataFrameService_distinct3_presult {
 public:


  virtual ~IDataFrameService_distinct3_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_distinct3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_reduce_args__isset {
  _IDataFrameService_reduce_args__isset() : id(false), src(false), tp(false) {}
  bool id :1;
  bool src :1;
  bool tp :1;
} _IDataFrameService_reduce_args__isset;

class IDataFrameService_reduce_args {
 public:

  IDataFrameService_reduce_args(const IDataFrameService_reduce_args&);
  IDataFrameService_reduce_args& operator=(const IDataFrameService_reduce_args&);
  IDataFrameService_reduce_args() noexcept {
  }

  virtual ~IDataFrameService_reduce_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_reduce_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_reduce_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_reduce_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_reduce_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_reduce_pargs {
 public:


  virtual ~IDataFrameService_reduce_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_reduce_result__isset {
  _IDataFrameService_reduce_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_reduce_result__isset;

class IDataFrameService_reduce_result {
 public:

  IDataFrameService_reduce_result(const IDataFrameService_reduce_result&);
  IDataFrameService_reduce_result& operator=(const IDataFrameService_reduce_result&);
  IDataFrameService_reduce_result() noexcept
                                  : success(0) {
  }

  virtual ~IDataFrameService_reduce_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_reduce_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_reduce_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_reduce_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_reduce_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_reduce_presult__isset {
  _IDataFrameService_reduce_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_reduce_presult__isset;

class IDataFrameService_reduce_presult {
 public:


  virtual ~IDataFrameService_reduce_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_reduce_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_treeReduce_args__isset {
  _IDataFrameService_treeReduce_args__isset() : id(false), src(false), tp(false) {}
  bool id :1;
  bool src :1;
  bool tp :1;
} _IDataFrameService_treeReduce_args__isset;

class IDataFrameService_treeReduce_args {
 public:

  IDataFrameService_treeReduce_args(const IDataFrameService_treeReduce_args&);
  IDataFrameService_treeReduce_args& operator=(const IDataFrameService_treeReduce_args&);
  IDataFrameService_treeReduce_args() noexcept {
  }

  virtual ~IDataFrameService_treeReduce_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_treeReduce_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_treeReduce_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_treeReduce_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_treeReduce_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_treeReduce_pargs {
 public:


  virtual ~IDataFrameService_treeReduce_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_treeReduce_result__isset {
  _IDataFrameService_treeReduce_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_treeReduce_result__isset;

class IDataFrameService_treeReduce_result {
 public:

  IDataFrameService_treeReduce_result(const IDataFrameService_treeReduce_result&);
  IDataFrameService_treeReduce_result& operator=(const IDataFrameService_treeReduce_result&);
  IDataFrameService_treeReduce_result() noexcept
                                      : success(0) {
  }

  virtual ~IDataFrameService_treeReduce_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_treeReduce_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_treeReduce_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_treeReduce_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_treeReduce_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_treeReduce_presult__isset {
  _IDataFrameService_treeReduce_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_treeReduce_presult__isset;

class IDataFrameService_treeReduce_presult {
 public:


  virtual ~IDataFrameService_treeReduce_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_treeReduce_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_collect_args__isset {
  _IDataFrameService_collect_args__isset() : id(false), tp(false) {}
  bool id :1;
  bool tp :1;
} _IDataFrameService_collect_args__isset;

class IDataFrameService_collect_args {
 public:

  IDataFrameService_collect_args(const IDataFrameService_collect_args&);
  IDataFrameService_collect_args& operator=(const IDataFrameService_collect_args&);
  IDataFrameService_collect_args() noexcept {
  }

  virtual ~IDataFrameService_collect_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_collect_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_collect_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_collect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_collect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_collect_pargs {
 public:


  virtual ~IDataFrameService_collect_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_collect_result__isset {
  _IDataFrameService_collect_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_collect_result__isset;

class IDataFrameService_collect_result {
 public:

  IDataFrameService_collect_result(const IDataFrameService_collect_result&);
  IDataFrameService_collect_result& operator=(const IDataFrameService_collect_result&);
  IDataFrameService_collect_result() noexcept
                                   : success(0) {
  }

  virtual ~IDataFrameService_collect_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_collect_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_collect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_collect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_collect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_collect_presult__isset {
  _IDataFrameService_collect_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_collect_presult__isset;

class IDataFrameService_collect_presult {
 public:


  virtual ~IDataFrameService_collect_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_collect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_aggregate_args__isset {
  _IDataFrameService_aggregate_args__isset() : id(false), zero(false), seqOp(false), combOp(false), tp(false) {}
  bool id :1;
  bool zero :1;
  bool seqOp :1;
  bool combOp :1;
  bool tp :1;
} _IDataFrameService_aggregate_args__isset;

class IDataFrameService_aggregate_args {
 public:

  IDataFrameService_aggregate_args(const IDataFrameService_aggregate_args&);
  IDataFrameService_aggregate_args& operator=(const IDataFrameService_aggregate_args&);
  IDataFrameService_aggregate_args() noexcept {
  }

  virtual ~IDataFrameService_aggregate_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource seqOp;
   ::ignis::rpc::ISource combOp;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_aggregate_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_seqOp(const  ::ignis::rpc::ISource& val);

  void __set_combOp(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_aggregate_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(seqOp == rhs.seqOp))
      return false;
    if (!(combOp == rhs.combOp))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_aggregate_pargs {
 public:


  virtual ~IDataFrameService_aggregate_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* seqOp;
  const  ::ignis::rpc::ISource* combOp;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregate_result__isset {
  _IDataFrameService_aggregate_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregate_result__isset;

class IDataFrameService_aggregate_result {
 public:

  IDataFrameService_aggregate_result(const IDataFrameService_aggregate_result&);
  IDataFrameService_aggregate_result& operator=(const IDataFrameService_aggregate_result&);
  IDataFrameService_aggregate_result() noexcept
                                     : success(0) {
  }

  virtual ~IDataFrameService_aggregate_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregate_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_aggregate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregate_presult__isset {
  _IDataFrameService_aggregate_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregate_presult__isset;

class IDataFrameService_aggregate_presult {
 public:


  virtual ~IDataFrameService_aggregate_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_treeAggregate_args__isset {
  _IDataFrameService_treeAggregate_args__isset() : id(false), zero(false), seqOp(false), combOp(false), tp(false) {}
  bool id :1;
  bool zero :1;
  bool seqOp :1;
  bool combOp :1;
  bool tp :1;
} _IDataFrameService_treeAggregate_args__isset;

class IDataFrameService_treeAggregate_args {
 public:

  IDataFrameService_treeAggregate_args(const IDataFrameService_treeAggregate_args&);
  IDataFrameService_treeAggregate_args& operator=(const IDataFrameService_treeAggregate_args&);
  IDataFrameService_treeAggregate_args() noexcept {
  }

  virtual ~IDataFrameService_treeAggregate_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource seqOp;
   ::ignis::rpc::ISource combOp;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_treeAggregate_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_seqOp(const  ::ignis::rpc::ISource& val);

  void __set_combOp(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_treeAggregate_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(seqOp == rhs.seqOp))
      return false;
    if (!(combOp == rhs.combOp))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_treeAggregate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_treeAggregate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_treeAggregate_pargs {
 public:


  virtual ~IDataFrameService_treeAggregate_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* seqOp;
  const  ::ignis::rpc::ISource* combOp;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_treeAggregate_result__isset {
  _IDataFrameService_treeAggregate_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_treeAggregate_result__isset;

class IDataFrameService_treeAggregate_result {
 public:

  IDataFrameService_treeAggregate_result(const IDataFrameService_treeAggregate_result&);
  IDataFrameService_treeAggregate_result& operator=(const IDataFrameService_treeAggregate_result&);
  IDataFrameService_treeAggregate_result() noexcept
                                         : success(0) {
  }

  virtual ~IDataFrameService_treeAggregate_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_treeAggregate_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_treeAggregate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_treeAggregate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_treeAggregate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_treeAggregate_presult__isset {
  _IDataFrameService_treeAggregate_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_treeAggregate_presult__isset;

class IDataFrameService_treeAggregate_presult {
 public:


  virtual ~IDataFrameService_treeAggregate_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_treeAggregate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_fold_args__isset {
  _IDataFrameService_fold_args__isset() : id(false), zero(false), src(false), tp(false) {}
  bool id :1;
  bool zero :1;
  bool src :1;
  bool tp :1;
} _IDataFrameService_fold_args__isset;

class IDataFrameService_fold_args {
 public:

  IDataFrameService_fold_args(const IDataFrameService_fold_args&);
  IDataFrameService_fold_args& operator=(const IDataFrameService_fold_args&);
  IDataFrameService_fold_args() noexcept {
  }

  virtual ~IDataFrameService_fold_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource src;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_fold_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_fold_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_fold_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_fold_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_fold_pargs {
 public:


  virtual ~IDataFrameService_fold_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* src;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_fold_result__isset {
  _IDataFrameService_fold_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_fold_result__isset;

class IDataFrameService_fold_result {
 public:

  IDataFrameService_fold_result(const IDataFrameService_fold_result&);
  IDataFrameService_fold_result& operator=(const IDataFrameService_fold_result&);
  IDataFrameService_fold_result() noexcept
                                : success(0) {
  }

  virtual ~IDataFrameService_fold_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_fold_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_fold_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_fold_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_fold_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_fold_presult__isset {
  _IDataFrameService_fold_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_fold_presult__isset;

class IDataFrameService_fold_presult {
 public:


  virtual ~IDataFrameService_fold_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_fold_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_treeFold_args__isset {
  _IDataFrameService_treeFold_args__isset() : id(false), zero(false), src(false), tp(false) {}
  bool id :1;
  bool zero :1;
  bool src :1;
  bool tp :1;
} _IDataFrameService_treeFold_args__isset;

class IDataFrameService_treeFold_args {
 public:

  IDataFrameService_treeFold_args(const IDataFrameService_treeFold_args&);
  IDataFrameService_treeFold_args& operator=(const IDataFrameService_treeFold_args&);
  IDataFrameService_treeFold_args() noexcept {
  }

  virtual ~IDataFrameService_treeFold_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource src;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_treeFold_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_treeFold_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_treeFold_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_treeFold_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_treeFold_pargs {
 public:


  virtual ~IDataFrameService_treeFold_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* src;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_treeFold_result__isset {
  _IDataFrameService_treeFold_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_treeFold_result__isset;

class IDataFrameService_treeFold_result {
 public:

  IDataFrameService_treeFold_result(const IDataFrameService_treeFold_result&);
  IDataFrameService_treeFold_result& operator=(const IDataFrameService_treeFold_result&);
  IDataFrameService_treeFold_result() noexcept
                                    : success(0) {
  }

  virtual ~IDataFrameService_treeFold_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_treeFold_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_treeFold_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_treeFold_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_treeFold_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_treeFold_presult__isset {
  _IDataFrameService_treeFold_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_treeFold_presult__isset;

class IDataFrameService_treeFold_presult {
 public:


  virtual ~IDataFrameService_treeFold_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_treeFold_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_take_args__isset {
  _IDataFrameService_take_args__isset() : id(false), num(false), tp(false) {}
  bool id :1;
  bool num :1;
  bool tp :1;
} _IDataFrameService_take_args__isset;

class IDataFrameService_take_args {
 public:

  IDataFrameService_take_args(const IDataFrameService_take_args&);
  IDataFrameService_take_args& operator=(const IDataFrameService_take_args&);
  IDataFrameService_take_args() noexcept
                              : num(0) {
  }

  virtual ~IDataFrameService_take_args() noexcept;
  IDataFrameId id;
  int64_t num;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_take_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_num(const int64_t val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_take_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_take_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_take_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_take_pargs {
 public:


  virtual ~IDataFrameService_take_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* num;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_take_result__isset {
  _IDataFrameService_take_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_take_result__isset;

class IDataFrameService_take_result {
 public:

  IDataFrameService_take_result(const IDataFrameService_take_result&);
  IDataFrameService_take_result& operator=(const IDataFrameService_take_result&);
  IDataFrameService_take_result() noexcept
                                : success(0) {
  }

  virtual ~IDataFrameService_take_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_take_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_take_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_take_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_take_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_take_presult__isset {
  _IDataFrameService_take_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_take_presult__isset;

class IDataFrameService_take_presult {
 public:


  virtual ~IDataFrameService_take_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_take_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_foreach__args__isset {
  _IDataFrameService_foreach__args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_foreach__args__isset;

class IDataFrameService_foreach__args {
 public:

  IDataFrameService_foreach__args(const IDataFrameService_foreach__args&);
  IDataFrameService_foreach__args& operator=(const IDataFrameService_foreach__args&);
  IDataFrameService_foreach__args() noexcept {
  }

  virtual ~IDataFrameService_foreach__args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_foreach__args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_foreach__args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foreach__args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foreach__args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_foreach__pargs {
 public:


  virtual ~IDataFrameService_foreach__pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foreach__result__isset {
  _IDataFrameService_foreach__result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_foreach__result__isset;

class IDataFrameService_foreach__result {
 public:

  IDataFrameService_foreach__result(const IDataFrameService_foreach__result&);
  IDataFrameService_foreach__result& operator=(const IDataFrameService_foreach__result&);
  IDataFrameService_foreach__result() noexcept {
  }

  virtual ~IDataFrameService_foreach__result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foreach__result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_foreach__result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foreach__result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foreach__result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foreach__presult__isset {
  _IDataFrameService_foreach__presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_foreach__presult__isset;

class IDataFrameService_foreach__presult {
 public:


  virtual ~IDataFrameService_foreach__presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foreach__presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_foreachPartition_args__isset {
  _IDataFrameService_foreachPartition_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_foreachPartition_args__isset;

class IDataFrameService_foreachPartition_args {
 public:

  IDataFrameService_foreachPartition_args(const IDataFrameService_foreachPartition_args&);
  IDataFrameService_foreachPartition_args& operator=(const IDataFrameService_foreachPartition_args&);
  IDataFrameService_foreachPartition_args() noexcept {
  }

  virtual ~IDataFrameService_foreachPartition_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_foreachPartition_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_foreachPartition_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foreachPartition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foreachPartition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_foreachPartition_pargs {
 public:


  virtual ~IDataFrameService_foreachPartition_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foreachPartition_result__isset {
  _IDataFrameService_foreachPartition_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_foreachPartition_result__isset;

class IDataFrameService_foreachPartition_result {
 public:

  IDataFrameService_foreachPartition_result(const IDataFrameService_foreachPartition_result&);
  IDataFrameService_foreachPartition_result& operator=(const IDataFrameService_foreachPartition_result&);
  IDataFrameService_foreachPartition_result() noexcept {
  }

  virtual ~IDataFrameService_foreachPartition_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foreachPartition_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_foreachPartition_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foreachPartition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foreachPartition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foreachPartition_presult__isset {
  _IDataFrameService_foreachPartition_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_foreachPartition_presult__isset;

class IDataFrameService_foreachPartition_presult {
 public:


  virtual ~IDataFrameService_foreachPartition_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foreachPartition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_foreachExecutor_args__isset {
  _IDataFrameService_foreachExecutor_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_foreachExecutor_args__isset;

class IDataFrameService_foreachExecutor_args {
 public:

  IDataFrameService_foreachExecutor_args(const IDataFrameService_foreachExecutor_args&);
  IDataFrameService_foreachExecutor_args& operator=(const IDataFrameService_foreachExecutor_args&);
  IDataFrameService_foreachExecutor_args() noexcept {
  }

  virtual ~IDataFrameService_foreachExecutor_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_foreachExecutor_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_foreachExecutor_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foreachExecutor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foreachExecutor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_foreachExecutor_pargs {
 public:


  virtual ~IDataFrameService_foreachExecutor_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foreachExecutor_result__isset {
  _IDataFrameService_foreachExecutor_result__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_foreachExecutor_result__isset;

class IDataFrameService_foreachExecutor_result {
 public:

  IDataFrameService_foreachExecutor_result(const IDataFrameService_foreachExecutor_result&);
  IDataFrameService_foreachExecutor_result& operator=(const IDataFrameService_foreachExecutor_result&);
  IDataFrameService_foreachExecutor_result() noexcept {
  }

  virtual ~IDataFrameService_foreachExecutor_result() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foreachExecutor_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_foreachExecutor_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foreachExecutor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foreachExecutor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foreachExecutor_presult__isset {
  _IDataFrameService_foreachExecutor_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataFrameService_foreachExecutor_presult__isset;

class IDataFrameService_foreachExecutor_presult {
 public:


  virtual ~IDataFrameService_foreachExecutor_presult() noexcept;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foreachExecutor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_top_args__isset {
  _IDataFrameService_top_args__isset() : id(false), num(false), tp(false) {}
  bool id :1;
  bool num :1;
  bool tp :1;
} _IDataFrameService_top_args__isset;

class IDataFrameService_top_args {
 public:

  IDataFrameService_top_args(const IDataFrameService_top_args&);
  IDataFrameService_top_args& operator=(const IDataFrameService_top_args&);
  IDataFrameService_top_args() noexcept
                             : num(0) {
  }

  virtual ~IDataFrameService_top_args() noexcept;
  IDataFrameId id;
  int64_t num;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_top_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_num(const int64_t val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_top_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_top_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_top_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_top_pargs {
 public:


  virtual ~IDataFrameService_top_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* num;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_top_result__isset {
  _IDataFrameService_top_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_top_result__isset;

class IDataFrameService_top_result {
 public:

  IDataFrameService_top_result(const IDataFrameService_top_result&);
  IDataFrameService_top_result& operator=(const IDataFrameService_top_result&);
  IDataFrameService_top_result() noexcept
                               : success(0) {
  }

  virtual ~IDataFrameService_top_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_top_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_top_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_top_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_top_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_top_presult__isset {
  _IDataFrameService_top_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_top_presult__isset;

class IDataFrameService_top_presult {
 public:


  virtual ~IDataFrameService_top_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_top_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_top4_args__isset {
  _IDataFrameService_top4_args__isset() : id(false), num(false), cmp(false), tp(false) {}
  bool id :1;
  bool num :1;
  bool cmp :1;
  bool tp :1;
} _IDataFrameService_top4_args__isset;

class IDataFrameService_top4_args {
 public:

  IDataFrameService_top4_args(const IDataFrameService_top4_args&);
  IDataFrameService_top4_args& operator=(const IDataFrameService_top4_args&);
  IDataFrameService_top4_args() noexcept
                              : num(0) {
  }

  virtual ~IDataFrameService_top4_args() noexcept;
  IDataFrameId id;
  int64_t num;
   ::ignis::rpc::ISource cmp;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_top4_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_num(const int64_t val);

  void __set_cmp(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_top4_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(cmp == rhs.cmp))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_top4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_top4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_top4_pargs {
 public:


  virtual ~IDataFrameService_top4_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* num;
  const  ::ignis::rpc::ISource* cmp;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_top4_result__isset {
  _IDataFrameService_top4_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_top4_result__isset;

class IDataFrameService_top4_result {
 public:

  IDataFrameService_top4_result(const IDataFrameService_top4_result&);
  IDataFrameService_top4_result& operator=(const IDataFrameService_top4_result&);
  IDataFrameService_top4_result() noexcept
                                : success(0) {
  }

  virtual ~IDataFrameService_top4_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_top4_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_top4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_top4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_top4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_top4_presult__isset {
  _IDataFrameService_top4_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_top4_presult__isset;

class IDataFrameService_top4_presult {
 public:


  virtual ~IDataFrameService_top4_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_top4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_takeOrdered_args__isset {
  _IDataFrameService_takeOrdered_args__isset() : id(false), num(false), tp(false) {}
  bool id :1;
  bool num :1;
  bool tp :1;
} _IDataFrameService_takeOrdered_args__isset;

class IDataFrameService_takeOrdered_args {
 public:

  IDataFrameService_takeOrdered_args(const IDataFrameService_takeOrdered_args&);
  IDataFrameService_takeOrdered_args& operator=(const IDataFrameService_takeOrdered_args&);
  IDataFrameService_takeOrdered_args() noexcept
                                     : num(0) {
  }

  virtual ~IDataFrameService_takeOrdered_args() noexcept;
  IDataFrameId id;
  int64_t num;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_takeOrdered_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_num(const int64_t val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_takeOrdered_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_takeOrdered_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_takeOrdered_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_takeOrdered_pargs {
 public:


  virtual ~IDataFrameService_takeOrdered_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* num;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_takeOrdered_result__isset {
  _IDataFrameService_takeOrdered_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_takeOrdered_result__isset;

class IDataFrameService_takeOrdered_result {
 public:

  IDataFrameService_takeOrdered_result(const IDataFrameService_takeOrdered_result&);
  IDataFrameService_takeOrdered_result& operator=(const IDataFrameService_takeOrdered_result&);
  IDataFrameService_takeOrdered_result() noexcept
                                       : success(0) {
  }

  virtual ~IDataFrameService_takeOrdered_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_takeOrdered_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_takeOrdered_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_takeOrdered_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_takeOrdered_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_takeOrdered_presult__isset {
  _IDataFrameService_takeOrdered_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_takeOrdered_presult__isset;

class IDataFrameService_takeOrdered_presult {
 public:


  virtual ~IDataFrameService_takeOrdered_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_takeOrdered_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_takeOrdered4_args__isset {
  _IDataFrameService_takeOrdered4_args__isset() : id(false), num(false), cmp(false), tp(false) {}
  bool id :1;
  bool num :1;
  bool cmp :1;
  bool tp :1;
} _IDataFrameService_takeOrdered4_args__isset;

class IDataFrameService_takeOrdered4_args {
 public:

  IDataFrameService_takeOrdered4_args(const IDataFrameService_takeOrdered4_args&);
  IDataFrameService_takeOrdered4_args& operator=(const IDataFrameService_takeOrdered4_args&);
  IDataFrameService_takeOrdered4_args() noexcept
                                      : num(0) {
  }

  virtual ~IDataFrameService_takeOrdered4_args() noexcept;
  IDataFrameId id;
  int64_t num;
   ::ignis::rpc::ISource cmp;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_takeOrdered4_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_num(const int64_t val);

  void __set_cmp(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_takeOrdered4_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(cmp == rhs.cmp))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_takeOrdered4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_takeOrdered4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_takeOrdered4_pargs {
 public:


  virtual ~IDataFrameService_takeOrdered4_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* num;
  const  ::ignis::rpc::ISource* cmp;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_takeOrdered4_result__isset {
  _IDataFrameService_takeOrdered4_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_takeOrdered4_result__isset;

class IDataFrameService_takeOrdered4_result {
 public:

  IDataFrameService_takeOrdered4_result(const IDataFrameService_takeOrdered4_result&);
  IDataFrameService_takeOrdered4_result& operator=(const IDataFrameService_takeOrdered4_result&);
  IDataFrameService_takeOrdered4_result() noexcept
                                        : success(0) {
  }

  virtual ~IDataFrameService_takeOrdered4_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_takeOrdered4_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_takeOrdered4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_takeOrdered4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_takeOrdered4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_takeOrdered4_presult__isset {
  _IDataFrameService_takeOrdered4_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_takeOrdered4_presult__isset;

class IDataFrameService_takeOrdered4_presult {
 public:


  virtual ~IDataFrameService_takeOrdered4_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_takeOrdered4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sample_args__isset {
  _IDataFrameService_sample_args__isset() : id(false), withReplacement(false), fraction(false), seed(false) {}
  bool id :1;
  bool withReplacement :1;
  bool fraction :1;
  bool seed :1;
} _IDataFrameService_sample_args__isset;

class IDataFrameService_sample_args {
 public:

  IDataFrameService_sample_args(const IDataFrameService_sample_args&) noexcept;
  IDataFrameService_sample_args& operator=(const IDataFrameService_sample_args&) noexcept;
  IDataFrameService_sample_args() noexcept
                                : withReplacement(0),
                                  fraction(0),
                                  seed(0) {
  }

  virtual ~IDataFrameService_sample_args() noexcept;
  IDataFrameId id;
  bool withReplacement;
  double fraction;
  int32_t seed;

  _IDataFrameService_sample_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_withReplacement(const bool val);

  void __set_fraction(const double val);

  void __set_seed(const int32_t val);

  bool operator == (const IDataFrameService_sample_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(withReplacement == rhs.withReplacement))
      return false;
    if (!(fraction == rhs.fraction))
      return false;
    if (!(seed == rhs.seed))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sample_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sample_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sample_pargs {
 public:


  virtual ~IDataFrameService_sample_pargs() noexcept;
  const IDataFrameId* id;
  const bool* withReplacement;
  const double* fraction;
  const int32_t* seed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sample_result__isset {
  _IDataFrameService_sample_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sample_result__isset;

class IDataFrameService_sample_result {
 public:

  IDataFrameService_sample_result(const IDataFrameService_sample_result&);
  IDataFrameService_sample_result& operator=(const IDataFrameService_sample_result&);
  IDataFrameService_sample_result() noexcept {
  }

  virtual ~IDataFrameService_sample_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sample_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sample_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sample_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sample_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sample_presult__isset {
  _IDataFrameService_sample_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sample_presult__isset;

class IDataFrameService_sample_presult {
 public:


  virtual ~IDataFrameService_sample_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sample_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_takeSample_args__isset {
  _IDataFrameService_takeSample_args__isset() : id(false), withReplacement(false), num(false), seed(false), tp(false) {}
  bool id :1;
  bool withReplacement :1;
  bool num :1;
  bool seed :1;
  bool tp :1;
} _IDataFrameService_takeSample_args__isset;

class IDataFrameService_takeSample_args {
 public:

  IDataFrameService_takeSample_args(const IDataFrameService_takeSample_args&);
  IDataFrameService_takeSample_args& operator=(const IDataFrameService_takeSample_args&);
  IDataFrameService_takeSample_args() noexcept
                                    : withReplacement(0),
                                      num(0),
                                      seed(0) {
  }

  virtual ~IDataFrameService_takeSample_args() noexcept;
  IDataFrameId id;
  bool withReplacement;
  int64_t num;
  int32_t seed;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_takeSample_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_withReplacement(const bool val);

  void __set_num(const int64_t val);

  void __set_seed(const int32_t val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_takeSample_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(withReplacement == rhs.withReplacement))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(seed == rhs.seed))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_takeSample_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_takeSample_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_takeSample_pargs {
 public:


  virtual ~IDataFrameService_takeSample_pargs() noexcept;
  const IDataFrameId* id;
  const bool* withReplacement;
  const int64_t* num;
  const int32_t* seed;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_takeSample_result__isset {
  _IDataFrameService_takeSample_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_takeSample_result__isset;

class IDataFrameService_takeSample_result {
 public:

  IDataFrameService_takeSample_result(const IDataFrameService_takeSample_result&);
  IDataFrameService_takeSample_result& operator=(const IDataFrameService_takeSample_result&);
  IDataFrameService_takeSample_result() noexcept
                                      : success(0) {
  }

  virtual ~IDataFrameService_takeSample_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_takeSample_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_takeSample_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_takeSample_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_takeSample_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_takeSample_presult__isset {
  _IDataFrameService_takeSample_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_takeSample_presult__isset;

class IDataFrameService_takeSample_presult {
 public:


  virtual ~IDataFrameService_takeSample_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_takeSample_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_count_args__isset {
  _IDataFrameService_count_args__isset() : id(false) {}
  bool id :1;
} _IDataFrameService_count_args__isset;

class IDataFrameService_count_args {
 public:

  IDataFrameService_count_args(const IDataFrameService_count_args&) noexcept;
  IDataFrameService_count_args& operator=(const IDataFrameService_count_args&) noexcept;
  IDataFrameService_count_args() noexcept {
  }

  virtual ~IDataFrameService_count_args() noexcept;
  IDataFrameId id;

  _IDataFrameService_count_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  bool operator == (const IDataFrameService_count_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_count_pargs {
 public:


  virtual ~IDataFrameService_count_pargs() noexcept;
  const IDataFrameId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_count_result__isset {
  _IDataFrameService_count_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_count_result__isset;

class IDataFrameService_count_result {
 public:

  IDataFrameService_count_result(const IDataFrameService_count_result&);
  IDataFrameService_count_result& operator=(const IDataFrameService_count_result&);
  IDataFrameService_count_result() noexcept
                                 : success(0) {
  }

  virtual ~IDataFrameService_count_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_count_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_count_presult__isset {
  _IDataFrameService_count_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_count_presult__isset;

class IDataFrameService_count_presult {
 public:


  virtual ~IDataFrameService_count_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_max_args__isset {
  _IDataFrameService_max_args__isset() : id(false), tp(false) {}
  bool id :1;
  bool tp :1;
} _IDataFrameService_max_args__isset;

class IDataFrameService_max_args {
 public:

  IDataFrameService_max_args(const IDataFrameService_max_args&);
  IDataFrameService_max_args& operator=(const IDataFrameService_max_args&);
  IDataFrameService_max_args() noexcept {
  }

  virtual ~IDataFrameService_max_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_max_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_max_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_max_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_max_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_max_pargs {
 public:


  virtual ~IDataFrameService_max_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_max_result__isset {
  _IDataFrameService_max_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_max_result__isset;

class IDataFrameService_max_result {
 public:

  IDataFrameService_max_result(const IDataFrameService_max_result&);
  IDataFrameService_max_result& operator=(const IDataFrameService_max_result&);
  IDataFrameService_max_result() noexcept
                               : success(0) {
  }

  virtual ~IDataFrameService_max_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_max_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_max_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_max_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_max_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_max_presult__isset {
  _IDataFrameService_max_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_max_presult__isset;

class IDataFrameService_max_presult {
 public:


  virtual ~IDataFrameService_max_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_max_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_max3_args__isset {
  _IDataFrameService_max3_args__isset() : id(false), cmp(false), tp(false) {}
  bool id :1;
  bool cmp :1;
  bool tp :1;
} _IDataFrameService_max3_args__isset;

class IDataFrameService_max3_args {
 public:

  IDataFrameService_max3_args(const IDataFrameService_max3_args&);
  IDataFrameService_max3_args& operator=(const IDataFrameService_max3_args&);
  IDataFrameService_max3_args() noexcept {
  }

  virtual ~IDataFrameService_max3_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource cmp;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_max3_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_cmp(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_max3_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cmp == rhs.cmp))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_max3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_max3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_max3_pargs {
 public:


  virtual ~IDataFrameService_max3_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* cmp;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_max3_result__isset {
  _IDataFrameService_max3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_max3_result__isset;

class IDataFrameService_max3_result {
 public:

  IDataFrameService_max3_result(const IDataFrameService_max3_result&);
  IDataFrameService_max3_result& operator=(const IDataFrameService_max3_result&);
  IDataFrameService_max3_result() noexcept
                                : success(0) {
  }

  virtual ~IDataFrameService_max3_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_max3_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_max3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_max3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_max3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_max3_presult__isset {
  _IDataFrameService_max3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_max3_presult__isset;

class IDataFrameService_max3_presult {
 public:


  virtual ~IDataFrameService_max3_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_max3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_min_args__isset {
  _IDataFrameService_min_args__isset() : id(false), tp(false) {}
  bool id :1;
  bool tp :1;
} _IDataFrameService_min_args__isset;

class IDataFrameService_min_args {
 public:

  IDataFrameService_min_args(const IDataFrameService_min_args&);
  IDataFrameService_min_args& operator=(const IDataFrameService_min_args&);
  IDataFrameService_min_args() noexcept {
  }

  virtual ~IDataFrameService_min_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_min_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_min_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_min_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_min_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_min_pargs {
 public:


  virtual ~IDataFrameService_min_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_min_result__isset {
  _IDataFrameService_min_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_min_result__isset;

class IDataFrameService_min_result {
 public:

  IDataFrameService_min_result(const IDataFrameService_min_result&);
  IDataFrameService_min_result& operator=(const IDataFrameService_min_result&);
  IDataFrameService_min_result() noexcept
                               : success(0) {
  }

  virtual ~IDataFrameService_min_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_min_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_min_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_min_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_min_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_min_presult__isset {
  _IDataFrameService_min_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_min_presult__isset;

class IDataFrameService_min_presult {
 public:


  virtual ~IDataFrameService_min_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_min_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_min3_args__isset {
  _IDataFrameService_min3_args__isset() : id(false), cmp(false), tp(false) {}
  bool id :1;
  bool cmp :1;
  bool tp :1;
} _IDataFrameService_min3_args__isset;

class IDataFrameService_min3_args {
 public:

  IDataFrameService_min3_args(const IDataFrameService_min3_args&);
  IDataFrameService_min3_args& operator=(const IDataFrameService_min3_args&);
  IDataFrameService_min3_args() noexcept {
  }

  virtual ~IDataFrameService_min3_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource cmp;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_min3_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_cmp(const  ::ignis::rpc::ISource& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_min3_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cmp == rhs.cmp))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_min3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_min3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_min3_pargs {
 public:


  virtual ~IDataFrameService_min3_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* cmp;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_min3_result__isset {
  _IDataFrameService_min3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_min3_result__isset;

class IDataFrameService_min3_result {
 public:

  IDataFrameService_min3_result(const IDataFrameService_min3_result&);
  IDataFrameService_min3_result& operator=(const IDataFrameService_min3_result&);
  IDataFrameService_min3_result() noexcept
                                : success(0) {
  }

  virtual ~IDataFrameService_min3_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_min3_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_min3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_min3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_min3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_min3_presult__isset {
  _IDataFrameService_min3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_min3_presult__isset;

class IDataFrameService_min3_presult {
 public:


  virtual ~IDataFrameService_min3_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_min3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_flatMapValues_args__isset {
  _IDataFrameService_flatMapValues_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_flatMapValues_args__isset;

class IDataFrameService_flatMapValues_args {
 public:

  IDataFrameService_flatMapValues_args(const IDataFrameService_flatMapValues_args&);
  IDataFrameService_flatMapValues_args& operator=(const IDataFrameService_flatMapValues_args&);
  IDataFrameService_flatMapValues_args() noexcept {
  }

  virtual ~IDataFrameService_flatMapValues_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_flatMapValues_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_flatMapValues_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_flatMapValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_flatMapValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_flatMapValues_pargs {
 public:


  virtual ~IDataFrameService_flatMapValues_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_flatMapValues_result__isset {
  _IDataFrameService_flatMapValues_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_flatMapValues_result__isset;

class IDataFrameService_flatMapValues_result {
 public:

  IDataFrameService_flatMapValues_result(const IDataFrameService_flatMapValues_result&);
  IDataFrameService_flatMapValues_result& operator=(const IDataFrameService_flatMapValues_result&);
  IDataFrameService_flatMapValues_result() noexcept {
  }

  virtual ~IDataFrameService_flatMapValues_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_flatMapValues_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_flatMapValues_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_flatMapValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_flatMapValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_flatMapValues_presult__isset {
  _IDataFrameService_flatMapValues_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_flatMapValues_presult__isset;

class IDataFrameService_flatMapValues_presult {
 public:


  virtual ~IDataFrameService_flatMapValues_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_flatMapValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_mapValues_args__isset {
  _IDataFrameService_mapValues_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_mapValues_args__isset;

class IDataFrameService_mapValues_args {
 public:

  IDataFrameService_mapValues_args(const IDataFrameService_mapValues_args&);
  IDataFrameService_mapValues_args& operator=(const IDataFrameService_mapValues_args&);
  IDataFrameService_mapValues_args() noexcept {
  }

  virtual ~IDataFrameService_mapValues_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_mapValues_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_mapValues_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_mapValues_pargs {
 public:


  virtual ~IDataFrameService_mapValues_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapValues_result__isset {
  _IDataFrameService_mapValues_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapValues_result__isset;

class IDataFrameService_mapValues_result {
 public:

  IDataFrameService_mapValues_result(const IDataFrameService_mapValues_result&);
  IDataFrameService_mapValues_result& operator=(const IDataFrameService_mapValues_result&);
  IDataFrameService_mapValues_result() noexcept {
  }

  virtual ~IDataFrameService_mapValues_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapValues_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_mapValues_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_mapValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_mapValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_mapValues_presult__isset {
  _IDataFrameService_mapValues_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_mapValues_presult__isset;

class IDataFrameService_mapValues_presult {
 public:


  virtual ~IDataFrameService_mapValues_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_mapValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_groupByKey_args__isset {
  _IDataFrameService_groupByKey_args__isset() : id(false) {}
  bool id :1;
} _IDataFrameService_groupByKey_args__isset;

class IDataFrameService_groupByKey_args {
 public:

  IDataFrameService_groupByKey_args(const IDataFrameService_groupByKey_args&) noexcept;
  IDataFrameService_groupByKey_args& operator=(const IDataFrameService_groupByKey_args&) noexcept;
  IDataFrameService_groupByKey_args() noexcept {
  }

  virtual ~IDataFrameService_groupByKey_args() noexcept;
  IDataFrameId id;

  _IDataFrameService_groupByKey_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  bool operator == (const IDataFrameService_groupByKey_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_groupByKey_pargs {
 public:


  virtual ~IDataFrameService_groupByKey_pargs() noexcept;
  const IDataFrameId* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupByKey_result__isset {
  _IDataFrameService_groupByKey_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupByKey_result__isset;

class IDataFrameService_groupByKey_result {
 public:

  IDataFrameService_groupByKey_result(const IDataFrameService_groupByKey_result&);
  IDataFrameService_groupByKey_result& operator=(const IDataFrameService_groupByKey_result&);
  IDataFrameService_groupByKey_result() noexcept {
  }

  virtual ~IDataFrameService_groupByKey_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupByKey_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_groupByKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupByKey_presult__isset {
  _IDataFrameService_groupByKey_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupByKey_presult__isset;

class IDataFrameService_groupByKey_presult {
 public:


  virtual ~IDataFrameService_groupByKey_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_groupByKey2a_args__isset {
  _IDataFrameService_groupByKey2a_args__isset() : id(false), numPartitions(false) {}
  bool id :1;
  bool numPartitions :1;
} _IDataFrameService_groupByKey2a_args__isset;

class IDataFrameService_groupByKey2a_args {
 public:

  IDataFrameService_groupByKey2a_args(const IDataFrameService_groupByKey2a_args&) noexcept;
  IDataFrameService_groupByKey2a_args& operator=(const IDataFrameService_groupByKey2a_args&) noexcept;
  IDataFrameService_groupByKey2a_args() noexcept
                                      : numPartitions(0) {
  }

  virtual ~IDataFrameService_groupByKey2a_args() noexcept;
  IDataFrameId id;
  int64_t numPartitions;

  _IDataFrameService_groupByKey2a_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_groupByKey2a_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupByKey2a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupByKey2a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_groupByKey2a_pargs {
 public:


  virtual ~IDataFrameService_groupByKey2a_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupByKey2a_result__isset {
  _IDataFrameService_groupByKey2a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupByKey2a_result__isset;

class IDataFrameService_groupByKey2a_result {
 public:

  IDataFrameService_groupByKey2a_result(const IDataFrameService_groupByKey2a_result&);
  IDataFrameService_groupByKey2a_result& operator=(const IDataFrameService_groupByKey2a_result&);
  IDataFrameService_groupByKey2a_result() noexcept {
  }

  virtual ~IDataFrameService_groupByKey2a_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupByKey2a_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_groupByKey2a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupByKey2a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupByKey2a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupByKey2a_presult__isset {
  _IDataFrameService_groupByKey2a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupByKey2a_presult__isset;

class IDataFrameService_groupByKey2a_presult {
 public:


  virtual ~IDataFrameService_groupByKey2a_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupByKey2a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_groupByKey2b_args__isset {
  _IDataFrameService_groupByKey2b_args__isset() : id(false), src(false) {}
  bool id :1;
  bool src :1;
} _IDataFrameService_groupByKey2b_args__isset;

class IDataFrameService_groupByKey2b_args {
 public:

  IDataFrameService_groupByKey2b_args(const IDataFrameService_groupByKey2b_args&);
  IDataFrameService_groupByKey2b_args& operator=(const IDataFrameService_groupByKey2b_args&);
  IDataFrameService_groupByKey2b_args() noexcept {
  }

  virtual ~IDataFrameService_groupByKey2b_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;

  _IDataFrameService_groupByKey2b_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_groupByKey2b_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupByKey2b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupByKey2b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_groupByKey2b_pargs {
 public:


  virtual ~IDataFrameService_groupByKey2b_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupByKey2b_result__isset {
  _IDataFrameService_groupByKey2b_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupByKey2b_result__isset;

class IDataFrameService_groupByKey2b_result {
 public:

  IDataFrameService_groupByKey2b_result(const IDataFrameService_groupByKey2b_result&);
  IDataFrameService_groupByKey2b_result& operator=(const IDataFrameService_groupByKey2b_result&);
  IDataFrameService_groupByKey2b_result() noexcept {
  }

  virtual ~IDataFrameService_groupByKey2b_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupByKey2b_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_groupByKey2b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupByKey2b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupByKey2b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupByKey2b_presult__isset {
  _IDataFrameService_groupByKey2b_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupByKey2b_presult__isset;

class IDataFrameService_groupByKey2b_presult {
 public:


  virtual ~IDataFrameService_groupByKey2b_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupByKey2b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_groupByKey3_args__isset {
  _IDataFrameService_groupByKey3_args__isset() : id(false), numPartitions(false), src(false) {}
  bool id :1;
  bool numPartitions :1;
  bool src :1;
} _IDataFrameService_groupByKey3_args__isset;

class IDataFrameService_groupByKey3_args {
 public:

  IDataFrameService_groupByKey3_args(const IDataFrameService_groupByKey3_args&);
  IDataFrameService_groupByKey3_args& operator=(const IDataFrameService_groupByKey3_args&);
  IDataFrameService_groupByKey3_args() noexcept
                                     : numPartitions(0) {
  }

  virtual ~IDataFrameService_groupByKey3_args() noexcept;
  IDataFrameId id;
  int64_t numPartitions;
   ::ignis::rpc::ISource src;

  _IDataFrameService_groupByKey3_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_numPartitions(const int64_t val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_groupByKey3_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupByKey3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupByKey3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_groupByKey3_pargs {
 public:


  virtual ~IDataFrameService_groupByKey3_pargs() noexcept;
  const IDataFrameId* id;
  const int64_t* numPartitions;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupByKey3_result__isset {
  _IDataFrameService_groupByKey3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupByKey3_result__isset;

class IDataFrameService_groupByKey3_result {
 public:

  IDataFrameService_groupByKey3_result(const IDataFrameService_groupByKey3_result&);
  IDataFrameService_groupByKey3_result& operator=(const IDataFrameService_groupByKey3_result&);
  IDataFrameService_groupByKey3_result() noexcept {
  }

  virtual ~IDataFrameService_groupByKey3_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupByKey3_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_groupByKey3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_groupByKey3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_groupByKey3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_groupByKey3_presult__isset {
  _IDataFrameService_groupByKey3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_groupByKey3_presult__isset;

class IDataFrameService_groupByKey3_presult {
 public:


  virtual ~IDataFrameService_groupByKey3_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_groupByKey3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_reduceByKey_args__isset {
  _IDataFrameService_reduceByKey_args__isset() : id(false), src(false), localReduce(false) {}
  bool id :1;
  bool src :1;
  bool localReduce :1;
} _IDataFrameService_reduceByKey_args__isset;

class IDataFrameService_reduceByKey_args {
 public:

  IDataFrameService_reduceByKey_args(const IDataFrameService_reduceByKey_args&);
  IDataFrameService_reduceByKey_args& operator=(const IDataFrameService_reduceByKey_args&);
  IDataFrameService_reduceByKey_args() noexcept
                                     : localReduce(0) {
  }

  virtual ~IDataFrameService_reduceByKey_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  bool localReduce;

  _IDataFrameService_reduceByKey_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_localReduce(const bool val);

  bool operator == (const IDataFrameService_reduceByKey_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(localReduce == rhs.localReduce))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_reduceByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_reduceByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_reduceByKey_pargs {
 public:


  virtual ~IDataFrameService_reduceByKey_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const bool* localReduce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_reduceByKey_result__isset {
  _IDataFrameService_reduceByKey_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_reduceByKey_result__isset;

class IDataFrameService_reduceByKey_result {
 public:

  IDataFrameService_reduceByKey_result(const IDataFrameService_reduceByKey_result&);
  IDataFrameService_reduceByKey_result& operator=(const IDataFrameService_reduceByKey_result&);
  IDataFrameService_reduceByKey_result() noexcept {
  }

  virtual ~IDataFrameService_reduceByKey_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_reduceByKey_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_reduceByKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_reduceByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_reduceByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_reduceByKey_presult__isset {
  _IDataFrameService_reduceByKey_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_reduceByKey_presult__isset;

class IDataFrameService_reduceByKey_presult {
 public:


  virtual ~IDataFrameService_reduceByKey_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_reduceByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_reduceByKey4_args__isset {
  _IDataFrameService_reduceByKey4_args__isset() : id(false), src(false), numPartitions(false), localReduce(false) {}
  bool id :1;
  bool src :1;
  bool numPartitions :1;
  bool localReduce :1;
} _IDataFrameService_reduceByKey4_args__isset;

class IDataFrameService_reduceByKey4_args {
 public:

  IDataFrameService_reduceByKey4_args(const IDataFrameService_reduceByKey4_args&);
  IDataFrameService_reduceByKey4_args& operator=(const IDataFrameService_reduceByKey4_args&);
  IDataFrameService_reduceByKey4_args() noexcept
                                      : numPartitions(0),
                                        localReduce(0) {
  }

  virtual ~IDataFrameService_reduceByKey4_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  int64_t numPartitions;
  bool localReduce;

  _IDataFrameService_reduceByKey4_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_numPartitions(const int64_t val);

  void __set_localReduce(const bool val);

  bool operator == (const IDataFrameService_reduceByKey4_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    if (!(localReduce == rhs.localReduce))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_reduceByKey4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_reduceByKey4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_reduceByKey4_pargs {
 public:


  virtual ~IDataFrameService_reduceByKey4_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const int64_t* numPartitions;
  const bool* localReduce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_reduceByKey4_result__isset {
  _IDataFrameService_reduceByKey4_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_reduceByKey4_result__isset;

class IDataFrameService_reduceByKey4_result {
 public:

  IDataFrameService_reduceByKey4_result(const IDataFrameService_reduceByKey4_result&);
  IDataFrameService_reduceByKey4_result& operator=(const IDataFrameService_reduceByKey4_result&);
  IDataFrameService_reduceByKey4_result() noexcept {
  }

  virtual ~IDataFrameService_reduceByKey4_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_reduceByKey4_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_reduceByKey4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_reduceByKey4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_reduceByKey4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_reduceByKey4_presult__isset {
  _IDataFrameService_reduceByKey4_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_reduceByKey4_presult__isset;

class IDataFrameService_reduceByKey4_presult {
 public:


  virtual ~IDataFrameService_reduceByKey4_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_reduceByKey4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_aggregateByKey_args__isset {
  _IDataFrameService_aggregateByKey_args__isset() : id(false), zero(false), seqOp(false) {}
  bool id :1;
  bool zero :1;
  bool seqOp :1;
} _IDataFrameService_aggregateByKey_args__isset;

class IDataFrameService_aggregateByKey_args {
 public:

  IDataFrameService_aggregateByKey_args(const IDataFrameService_aggregateByKey_args&);
  IDataFrameService_aggregateByKey_args& operator=(const IDataFrameService_aggregateByKey_args&);
  IDataFrameService_aggregateByKey_args() noexcept {
  }

  virtual ~IDataFrameService_aggregateByKey_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource seqOp;

  _IDataFrameService_aggregateByKey_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_seqOp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_aggregateByKey_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(seqOp == rhs.seqOp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregateByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregateByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_aggregateByKey_pargs {
 public:


  virtual ~IDataFrameService_aggregateByKey_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* seqOp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregateByKey_result__isset {
  _IDataFrameService_aggregateByKey_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregateByKey_result__isset;

class IDataFrameService_aggregateByKey_result {
 public:

  IDataFrameService_aggregateByKey_result(const IDataFrameService_aggregateByKey_result&);
  IDataFrameService_aggregateByKey_result& operator=(const IDataFrameService_aggregateByKey_result&);
  IDataFrameService_aggregateByKey_result() noexcept {
  }

  virtual ~IDataFrameService_aggregateByKey_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregateByKey_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_aggregateByKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregateByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregateByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregateByKey_presult__isset {
  _IDataFrameService_aggregateByKey_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregateByKey_presult__isset;

class IDataFrameService_aggregateByKey_presult {
 public:


  virtual ~IDataFrameService_aggregateByKey_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregateByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_aggregateByKey4a_args__isset {
  _IDataFrameService_aggregateByKey4a_args__isset() : id(false), zero(false), seqOp(false), numPartitions(false) {}
  bool id :1;
  bool zero :1;
  bool seqOp :1;
  bool numPartitions :1;
} _IDataFrameService_aggregateByKey4a_args__isset;

class IDataFrameService_aggregateByKey4a_args {
 public:

  IDataFrameService_aggregateByKey4a_args(const IDataFrameService_aggregateByKey4a_args&);
  IDataFrameService_aggregateByKey4a_args& operator=(const IDataFrameService_aggregateByKey4a_args&);
  IDataFrameService_aggregateByKey4a_args() noexcept
                                          : numPartitions(0) {
  }

  virtual ~IDataFrameService_aggregateByKey4a_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource seqOp;
  int64_t numPartitions;

  _IDataFrameService_aggregateByKey4a_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_seqOp(const  ::ignis::rpc::ISource& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_aggregateByKey4a_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(seqOp == rhs.seqOp))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregateByKey4a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregateByKey4a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_aggregateByKey4a_pargs {
 public:


  virtual ~IDataFrameService_aggregateByKey4a_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* seqOp;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregateByKey4a_result__isset {
  _IDataFrameService_aggregateByKey4a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregateByKey4a_result__isset;

class IDataFrameService_aggregateByKey4a_result {
 public:

  IDataFrameService_aggregateByKey4a_result(const IDataFrameService_aggregateByKey4a_result&);
  IDataFrameService_aggregateByKey4a_result& operator=(const IDataFrameService_aggregateByKey4a_result&);
  IDataFrameService_aggregateByKey4a_result() noexcept {
  }

  virtual ~IDataFrameService_aggregateByKey4a_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregateByKey4a_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_aggregateByKey4a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregateByKey4a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregateByKey4a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregateByKey4a_presult__isset {
  _IDataFrameService_aggregateByKey4a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregateByKey4a_presult__isset;

class IDataFrameService_aggregateByKey4a_presult {
 public:


  virtual ~IDataFrameService_aggregateByKey4a_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregateByKey4a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_aggregateByKey4b_args__isset {
  _IDataFrameService_aggregateByKey4b_args__isset() : id(false), zero(false), seqOp(false), combOp(false) {}
  bool id :1;
  bool zero :1;
  bool seqOp :1;
  bool combOp :1;
} _IDataFrameService_aggregateByKey4b_args__isset;

class IDataFrameService_aggregateByKey4b_args {
 public:

  IDataFrameService_aggregateByKey4b_args(const IDataFrameService_aggregateByKey4b_args&);
  IDataFrameService_aggregateByKey4b_args& operator=(const IDataFrameService_aggregateByKey4b_args&);
  IDataFrameService_aggregateByKey4b_args() noexcept {
  }

  virtual ~IDataFrameService_aggregateByKey4b_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource seqOp;
   ::ignis::rpc::ISource combOp;

  _IDataFrameService_aggregateByKey4b_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_seqOp(const  ::ignis::rpc::ISource& val);

  void __set_combOp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_aggregateByKey4b_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(seqOp == rhs.seqOp))
      return false;
    if (!(combOp == rhs.combOp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregateByKey4b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregateByKey4b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_aggregateByKey4b_pargs {
 public:


  virtual ~IDataFrameService_aggregateByKey4b_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* seqOp;
  const  ::ignis::rpc::ISource* combOp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregateByKey4b_result__isset {
  _IDataFrameService_aggregateByKey4b_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregateByKey4b_result__isset;

class IDataFrameService_aggregateByKey4b_result {
 public:

  IDataFrameService_aggregateByKey4b_result(const IDataFrameService_aggregateByKey4b_result&);
  IDataFrameService_aggregateByKey4b_result& operator=(const IDataFrameService_aggregateByKey4b_result&);
  IDataFrameService_aggregateByKey4b_result() noexcept {
  }

  virtual ~IDataFrameService_aggregateByKey4b_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregateByKey4b_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_aggregateByKey4b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregateByKey4b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregateByKey4b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregateByKey4b_presult__isset {
  _IDataFrameService_aggregateByKey4b_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregateByKey4b_presult__isset;

class IDataFrameService_aggregateByKey4b_presult {
 public:


  virtual ~IDataFrameService_aggregateByKey4b_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregateByKey4b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_aggregateByKey5_args__isset {
  _IDataFrameService_aggregateByKey5_args__isset() : id(false), zero(false), seqOp(false), combOp(false), numPartitions(false) {}
  bool id :1;
  bool zero :1;
  bool seqOp :1;
  bool combOp :1;
  bool numPartitions :1;
} _IDataFrameService_aggregateByKey5_args__isset;

class IDataFrameService_aggregateByKey5_args {
 public:

  IDataFrameService_aggregateByKey5_args(const IDataFrameService_aggregateByKey5_args&);
  IDataFrameService_aggregateByKey5_args& operator=(const IDataFrameService_aggregateByKey5_args&);
  IDataFrameService_aggregateByKey5_args() noexcept
                                         : numPartitions(0) {
  }

  virtual ~IDataFrameService_aggregateByKey5_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource seqOp;
   ::ignis::rpc::ISource combOp;
  int64_t numPartitions;

  _IDataFrameService_aggregateByKey5_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_seqOp(const  ::ignis::rpc::ISource& val);

  void __set_combOp(const  ::ignis::rpc::ISource& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_aggregateByKey5_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(seqOp == rhs.seqOp))
      return false;
    if (!(combOp == rhs.combOp))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregateByKey5_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregateByKey5_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_aggregateByKey5_pargs {
 public:


  virtual ~IDataFrameService_aggregateByKey5_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* seqOp;
  const  ::ignis::rpc::ISource* combOp;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregateByKey5_result__isset {
  _IDataFrameService_aggregateByKey5_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregateByKey5_result__isset;

class IDataFrameService_aggregateByKey5_result {
 public:

  IDataFrameService_aggregateByKey5_result(const IDataFrameService_aggregateByKey5_result&);
  IDataFrameService_aggregateByKey5_result& operator=(const IDataFrameService_aggregateByKey5_result&);
  IDataFrameService_aggregateByKey5_result() noexcept {
  }

  virtual ~IDataFrameService_aggregateByKey5_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregateByKey5_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_aggregateByKey5_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_aggregateByKey5_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_aggregateByKey5_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_aggregateByKey5_presult__isset {
  _IDataFrameService_aggregateByKey5_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_aggregateByKey5_presult__isset;

class IDataFrameService_aggregateByKey5_presult {
 public:


  virtual ~IDataFrameService_aggregateByKey5_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_aggregateByKey5_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_foldByKey_args__isset {
  _IDataFrameService_foldByKey_args__isset() : id(false), zero(false), src(false), localFold(false) {}
  bool id :1;
  bool zero :1;
  bool src :1;
  bool localFold :1;
} _IDataFrameService_foldByKey_args__isset;

class IDataFrameService_foldByKey_args {
 public:

  IDataFrameService_foldByKey_args(const IDataFrameService_foldByKey_args&);
  IDataFrameService_foldByKey_args& operator=(const IDataFrameService_foldByKey_args&);
  IDataFrameService_foldByKey_args() noexcept
                                   : localFold(0) {
  }

  virtual ~IDataFrameService_foldByKey_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource src;
  bool localFold;

  _IDataFrameService_foldByKey_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_localFold(const bool val);

  bool operator == (const IDataFrameService_foldByKey_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(localFold == rhs.localFold))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foldByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foldByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_foldByKey_pargs {
 public:


  virtual ~IDataFrameService_foldByKey_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* src;
  const bool* localFold;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foldByKey_result__isset {
  _IDataFrameService_foldByKey_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_foldByKey_result__isset;

class IDataFrameService_foldByKey_result {
 public:

  IDataFrameService_foldByKey_result(const IDataFrameService_foldByKey_result&);
  IDataFrameService_foldByKey_result& operator=(const IDataFrameService_foldByKey_result&);
  IDataFrameService_foldByKey_result() noexcept {
  }

  virtual ~IDataFrameService_foldByKey_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foldByKey_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_foldByKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foldByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foldByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foldByKey_presult__isset {
  _IDataFrameService_foldByKey_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_foldByKey_presult__isset;

class IDataFrameService_foldByKey_presult {
 public:


  virtual ~IDataFrameService_foldByKey_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foldByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_foldByKey5_args__isset {
  _IDataFrameService_foldByKey5_args__isset() : id(false), zero(false), src(false), numPartitions(false), localFold(false) {}
  bool id :1;
  bool zero :1;
  bool src :1;
  bool numPartitions :1;
  bool localFold :1;
} _IDataFrameService_foldByKey5_args__isset;

class IDataFrameService_foldByKey5_args {
 public:

  IDataFrameService_foldByKey5_args(const IDataFrameService_foldByKey5_args&);
  IDataFrameService_foldByKey5_args& operator=(const IDataFrameService_foldByKey5_args&);
  IDataFrameService_foldByKey5_args() noexcept
                                    : numPartitions(0),
                                      localFold(0) {
  }

  virtual ~IDataFrameService_foldByKey5_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource zero;
   ::ignis::rpc::ISource src;
  int64_t numPartitions;
  bool localFold;

  _IDataFrameService_foldByKey5_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_zero(const  ::ignis::rpc::ISource& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_numPartitions(const int64_t val);

  void __set_localFold(const bool val);

  bool operator == (const IDataFrameService_foldByKey5_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(zero == rhs.zero))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    if (!(localFold == rhs.localFold))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foldByKey5_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foldByKey5_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_foldByKey5_pargs {
 public:


  virtual ~IDataFrameService_foldByKey5_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* zero;
  const  ::ignis::rpc::ISource* src;
  const int64_t* numPartitions;
  const bool* localFold;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foldByKey5_result__isset {
  _IDataFrameService_foldByKey5_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_foldByKey5_result__isset;

class IDataFrameService_foldByKey5_result {
 public:

  IDataFrameService_foldByKey5_result(const IDataFrameService_foldByKey5_result&);
  IDataFrameService_foldByKey5_result& operator=(const IDataFrameService_foldByKey5_result&);
  IDataFrameService_foldByKey5_result() noexcept {
  }

  virtual ~IDataFrameService_foldByKey5_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foldByKey5_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_foldByKey5_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_foldByKey5_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_foldByKey5_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_foldByKey5_presult__isset {
  _IDataFrameService_foldByKey5_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_foldByKey5_presult__isset;

class IDataFrameService_foldByKey5_presult {
 public:


  virtual ~IDataFrameService_foldByKey5_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_foldByKey5_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sortByKey_args__isset {
  _IDataFrameService_sortByKey_args__isset() : id(false), ascending(false) {}
  bool id :1;
  bool ascending :1;
} _IDataFrameService_sortByKey_args__isset;

class IDataFrameService_sortByKey_args {
 public:

  IDataFrameService_sortByKey_args(const IDataFrameService_sortByKey_args&) noexcept;
  IDataFrameService_sortByKey_args& operator=(const IDataFrameService_sortByKey_args&) noexcept;
  IDataFrameService_sortByKey_args() noexcept
                                   : ascending(0) {
  }

  virtual ~IDataFrameService_sortByKey_args() noexcept;
  IDataFrameId id;
  bool ascending;

  _IDataFrameService_sortByKey_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_ascending(const bool val);

  bool operator == (const IDataFrameService_sortByKey_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sortByKey_pargs {
 public:


  virtual ~IDataFrameService_sortByKey_pargs() noexcept;
  const IDataFrameId* id;
  const bool* ascending;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortByKey_result__isset {
  _IDataFrameService_sortByKey_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortByKey_result__isset;

class IDataFrameService_sortByKey_result {
 public:

  IDataFrameService_sortByKey_result(const IDataFrameService_sortByKey_result&);
  IDataFrameService_sortByKey_result& operator=(const IDataFrameService_sortByKey_result&);
  IDataFrameService_sortByKey_result() noexcept {
  }

  virtual ~IDataFrameService_sortByKey_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortByKey_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sortByKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortByKey_presult__isset {
  _IDataFrameService_sortByKey_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortByKey_presult__isset;

class IDataFrameService_sortByKey_presult {
 public:


  virtual ~IDataFrameService_sortByKey_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sortByKey3a_args__isset {
  _IDataFrameService_sortByKey3a_args__isset() : id(false), ascending(false), numPartitions(false) {}
  bool id :1;
  bool ascending :1;
  bool numPartitions :1;
} _IDataFrameService_sortByKey3a_args__isset;

class IDataFrameService_sortByKey3a_args {
 public:

  IDataFrameService_sortByKey3a_args(const IDataFrameService_sortByKey3a_args&) noexcept;
  IDataFrameService_sortByKey3a_args& operator=(const IDataFrameService_sortByKey3a_args&) noexcept;
  IDataFrameService_sortByKey3a_args() noexcept
                                     : ascending(0),
                                       numPartitions(0) {
  }

  virtual ~IDataFrameService_sortByKey3a_args() noexcept;
  IDataFrameId id;
  bool ascending;
  int64_t numPartitions;

  _IDataFrameService_sortByKey3a_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_ascending(const bool val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_sortByKey3a_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortByKey3a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortByKey3a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sortByKey3a_pargs {
 public:


  virtual ~IDataFrameService_sortByKey3a_pargs() noexcept;
  const IDataFrameId* id;
  const bool* ascending;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortByKey3a_result__isset {
  _IDataFrameService_sortByKey3a_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortByKey3a_result__isset;

class IDataFrameService_sortByKey3a_result {
 public:

  IDataFrameService_sortByKey3a_result(const IDataFrameService_sortByKey3a_result&);
  IDataFrameService_sortByKey3a_result& operator=(const IDataFrameService_sortByKey3a_result&);
  IDataFrameService_sortByKey3a_result() noexcept {
  }

  virtual ~IDataFrameService_sortByKey3a_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortByKey3a_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sortByKey3a_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortByKey3a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortByKey3a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortByKey3a_presult__isset {
  _IDataFrameService_sortByKey3a_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortByKey3a_presult__isset;

class IDataFrameService_sortByKey3a_presult {
 public:


  virtual ~IDataFrameService_sortByKey3a_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortByKey3a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sortByKey3b_args__isset {
  _IDataFrameService_sortByKey3b_args__isset() : id(false), src(false), ascending(false) {}
  bool id :1;
  bool src :1;
  bool ascending :1;
} _IDataFrameService_sortByKey3b_args__isset;

class IDataFrameService_sortByKey3b_args {
 public:

  IDataFrameService_sortByKey3b_args(const IDataFrameService_sortByKey3b_args&);
  IDataFrameService_sortByKey3b_args& operator=(const IDataFrameService_sortByKey3b_args&);
  IDataFrameService_sortByKey3b_args() noexcept
                                     : ascending(0) {
  }

  virtual ~IDataFrameService_sortByKey3b_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  bool ascending;

  _IDataFrameService_sortByKey3b_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_ascending(const bool val);

  bool operator == (const IDataFrameService_sortByKey3b_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortByKey3b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortByKey3b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sortByKey3b_pargs {
 public:


  virtual ~IDataFrameService_sortByKey3b_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const bool* ascending;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortByKey3b_result__isset {
  _IDataFrameService_sortByKey3b_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortByKey3b_result__isset;

class IDataFrameService_sortByKey3b_result {
 public:

  IDataFrameService_sortByKey3b_result(const IDataFrameService_sortByKey3b_result&);
  IDataFrameService_sortByKey3b_result& operator=(const IDataFrameService_sortByKey3b_result&);
  IDataFrameService_sortByKey3b_result() noexcept {
  }

  virtual ~IDataFrameService_sortByKey3b_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortByKey3b_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sortByKey3b_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortByKey3b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortByKey3b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortByKey3b_presult__isset {
  _IDataFrameService_sortByKey3b_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortByKey3b_presult__isset;

class IDataFrameService_sortByKey3b_presult {
 public:


  virtual ~IDataFrameService_sortByKey3b_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortByKey3b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sortByKey4_args__isset {
  _IDataFrameService_sortByKey4_args__isset() : id(false), src(false), ascending(false), numPartitions(false) {}
  bool id :1;
  bool src :1;
  bool ascending :1;
  bool numPartitions :1;
} _IDataFrameService_sortByKey4_args__isset;

class IDataFrameService_sortByKey4_args {
 public:

  IDataFrameService_sortByKey4_args(const IDataFrameService_sortByKey4_args&);
  IDataFrameService_sortByKey4_args& operator=(const IDataFrameService_sortByKey4_args&);
  IDataFrameService_sortByKey4_args() noexcept
                                    : ascending(0),
                                      numPartitions(0) {
  }

  virtual ~IDataFrameService_sortByKey4_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource src;
  bool ascending;
  int64_t numPartitions;

  _IDataFrameService_sortByKey4_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_ascending(const bool val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IDataFrameService_sortByKey4_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(src == rhs.src))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortByKey4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortByKey4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sortByKey4_pargs {
 public:


  virtual ~IDataFrameService_sortByKey4_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* src;
  const bool* ascending;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortByKey4_result__isset {
  _IDataFrameService_sortByKey4_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortByKey4_result__isset;

class IDataFrameService_sortByKey4_result {
 public:

  IDataFrameService_sortByKey4_result(const IDataFrameService_sortByKey4_result&);
  IDataFrameService_sortByKey4_result& operator=(const IDataFrameService_sortByKey4_result&);
  IDataFrameService_sortByKey4_result() noexcept {
  }

  virtual ~IDataFrameService_sortByKey4_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortByKey4_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sortByKey4_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sortByKey4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sortByKey4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sortByKey4_presult__isset {
  _IDataFrameService_sortByKey4_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sortByKey4_presult__isset;

class IDataFrameService_sortByKey4_presult {
 public:


  virtual ~IDataFrameService_sortByKey4_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sortByKey4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_keys_args__isset {
  _IDataFrameService_keys_args__isset() : id(false), tp(false) {}
  bool id :1;
  bool tp :1;
} _IDataFrameService_keys_args__isset;

class IDataFrameService_keys_args {
 public:

  IDataFrameService_keys_args(const IDataFrameService_keys_args&);
  IDataFrameService_keys_args& operator=(const IDataFrameService_keys_args&);
  IDataFrameService_keys_args() noexcept {
  }

  virtual ~IDataFrameService_keys_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_keys_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_keys_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_keys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_keys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_keys_pargs {
 public:


  virtual ~IDataFrameService_keys_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_keys_result__isset {
  _IDataFrameService_keys_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_keys_result__isset;

class IDataFrameService_keys_result {
 public:

  IDataFrameService_keys_result(const IDataFrameService_keys_result&);
  IDataFrameService_keys_result& operator=(const IDataFrameService_keys_result&);
  IDataFrameService_keys_result() noexcept
                                : success(0) {
  }

  virtual ~IDataFrameService_keys_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_keys_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_keys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_keys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_keys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_keys_presult__isset {
  _IDataFrameService_keys_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_keys_presult__isset;

class IDataFrameService_keys_presult {
 public:


  virtual ~IDataFrameService_keys_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_keys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_values_args__isset {
  _IDataFrameService_values_args__isset() : id(false), tp(false) {}
  bool id :1;
  bool tp :1;
} _IDataFrameService_values_args__isset;

class IDataFrameService_values_args {
 public:

  IDataFrameService_values_args(const IDataFrameService_values_args&);
  IDataFrameService_values_args& operator=(const IDataFrameService_values_args&);
  IDataFrameService_values_args() noexcept {
  }

  virtual ~IDataFrameService_values_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_values_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_values_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_values_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_values_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_values_pargs {
 public:


  virtual ~IDataFrameService_values_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_values_result__isset {
  _IDataFrameService_values_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_values_result__isset;

class IDataFrameService_values_result {
 public:

  IDataFrameService_values_result(const IDataFrameService_values_result&);
  IDataFrameService_values_result& operator=(const IDataFrameService_values_result&);
  IDataFrameService_values_result() noexcept
                                  : success(0) {
  }

  virtual ~IDataFrameService_values_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_values_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_values_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_values_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_values_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_values_presult__isset {
  _IDataFrameService_values_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_values_presult__isset;

class IDataFrameService_values_presult {
 public:


  virtual ~IDataFrameService_values_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_values_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_sampleByKey_args__isset {
  _IDataFrameService_sampleByKey_args__isset() : id(false), withReplacement(false), fractions(false), seed(false) {}
  bool id :1;
  bool withReplacement :1;
  bool fractions :1;
  bool seed :1;
} _IDataFrameService_sampleByKey_args__isset;

class IDataFrameService_sampleByKey_args {
 public:

  IDataFrameService_sampleByKey_args(const IDataFrameService_sampleByKey_args&);
  IDataFrameService_sampleByKey_args& operator=(const IDataFrameService_sampleByKey_args&);
  IDataFrameService_sampleByKey_args() noexcept
                                     : withReplacement(0),
                                       seed(0) {
  }

  virtual ~IDataFrameService_sampleByKey_args() noexcept;
  IDataFrameId id;
  bool withReplacement;
   ::ignis::rpc::ISource fractions;
  int32_t seed;

  _IDataFrameService_sampleByKey_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_withReplacement(const bool val);

  void __set_fractions(const  ::ignis::rpc::ISource& val);

  void __set_seed(const int32_t val);

  bool operator == (const IDataFrameService_sampleByKey_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(withReplacement == rhs.withReplacement))
      return false;
    if (!(fractions == rhs.fractions))
      return false;
    if (!(seed == rhs.seed))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sampleByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sampleByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_sampleByKey_pargs {
 public:


  virtual ~IDataFrameService_sampleByKey_pargs() noexcept;
  const IDataFrameId* id;
  const bool* withReplacement;
  const  ::ignis::rpc::ISource* fractions;
  const int32_t* seed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sampleByKey_result__isset {
  _IDataFrameService_sampleByKey_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sampleByKey_result__isset;

class IDataFrameService_sampleByKey_result {
 public:

  IDataFrameService_sampleByKey_result(const IDataFrameService_sampleByKey_result&);
  IDataFrameService_sampleByKey_result& operator=(const IDataFrameService_sampleByKey_result&);
  IDataFrameService_sampleByKey_result() noexcept {
  }

  virtual ~IDataFrameService_sampleByKey_result() noexcept;
  IDataFrameId success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sampleByKey_result__isset __isset;

  void __set_success(const IDataFrameId& val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_sampleByKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_sampleByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_sampleByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_sampleByKey_presult__isset {
  _IDataFrameService_sampleByKey_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_sampleByKey_presult__isset;

class IDataFrameService_sampleByKey_presult {
 public:


  virtual ~IDataFrameService_sampleByKey_presult() noexcept;
  IDataFrameId* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_sampleByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_countByKey_args__isset {
  _IDataFrameService_countByKey_args__isset() : id(false), tp(false) {}
  bool id :1;
  bool tp :1;
} _IDataFrameService_countByKey_args__isset;

class IDataFrameService_countByKey_args {
 public:

  IDataFrameService_countByKey_args(const IDataFrameService_countByKey_args&);
  IDataFrameService_countByKey_args& operator=(const IDataFrameService_countByKey_args&);
  IDataFrameService_countByKey_args() noexcept {
  }

  virtual ~IDataFrameService_countByKey_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_countByKey_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_countByKey_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_countByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_countByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_countByKey_pargs {
 public:


  virtual ~IDataFrameService_countByKey_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_countByKey_result__isset {
  _IDataFrameService_countByKey_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_countByKey_result__isset;

class IDataFrameService_countByKey_result {
 public:

  IDataFrameService_countByKey_result(const IDataFrameService_countByKey_result&);
  IDataFrameService_countByKey_result& operator=(const IDataFrameService_countByKey_result&);
  IDataFrameService_countByKey_result() noexcept
                                      : success(0) {
  }

  virtual ~IDataFrameService_countByKey_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_countByKey_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_countByKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_countByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_countByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_countByKey_presult__isset {
  _IDataFrameService_countByKey_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_countByKey_presult__isset;

class IDataFrameService_countByKey_presult {
 public:


  virtual ~IDataFrameService_countByKey_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_countByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataFrameService_countByValue_args__isset {
  _IDataFrameService_countByValue_args__isset() : id(false), tp(false) {}
  bool id :1;
  bool tp :1;
} _IDataFrameService_countByValue_args__isset;

class IDataFrameService_countByValue_args {
 public:

  IDataFrameService_countByValue_args(const IDataFrameService_countByValue_args&);
  IDataFrameService_countByValue_args& operator=(const IDataFrameService_countByValue_args&);
  IDataFrameService_countByValue_args() noexcept {
  }

  virtual ~IDataFrameService_countByValue_args() noexcept;
  IDataFrameId id;
   ::ignis::rpc::ISource tp;

  _IDataFrameService_countByValue_args__isset __isset;

  void __set_id(const IDataFrameId& val);

  void __set_tp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataFrameService_countByValue_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tp == rhs.tp))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_countByValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_countByValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataFrameService_countByValue_pargs {
 public:


  virtual ~IDataFrameService_countByValue_pargs() noexcept;
  const IDataFrameId* id;
  const  ::ignis::rpc::ISource* tp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_countByValue_result__isset {
  _IDataFrameService_countByValue_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_countByValue_result__isset;

class IDataFrameService_countByValue_result {
 public:

  IDataFrameService_countByValue_result(const IDataFrameService_countByValue_result&);
  IDataFrameService_countByValue_result& operator=(const IDataFrameService_countByValue_result&);
  IDataFrameService_countByValue_result() noexcept
                                        : success(0) {
  }

  virtual ~IDataFrameService_countByValue_result() noexcept;
  int64_t success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_countByValue_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::driver::IDriverException& val);

  bool operator == (const IDataFrameService_countByValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataFrameService_countByValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataFrameService_countByValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataFrameService_countByValue_presult__isset {
  _IDataFrameService_countByValue_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataFrameService_countByValue_presult__isset;

class IDataFrameService_countByValue_presult {
 public:


  virtual ~IDataFrameService_countByValue_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::driver::IDriverException ex;

  _IDataFrameService_countByValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IDataFrameServiceClient : virtual public IDataFrameServiceIf {
 public:
  IDataFrameServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IDataFrameServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setName(const IDataFrameId& id, const std::string& name) override;
  void send_setName(const IDataFrameId& id, const std::string& name);
  void recv_setName();
  void persist(const IDataFrameId& id, const int8_t level) override;
  void send_persist(const IDataFrameId& id, const int8_t level);
  void recv_persist();
  void cache(const IDataFrameId& id) override;
  void send_cache(const IDataFrameId& id);
  void recv_cache();
  void unpersist(const IDataFrameId& id) override;
  void send_unpersist(const IDataFrameId& id);
  void recv_unpersist();
  void uncache(const IDataFrameId& id) override;
  void send_uncache(const IDataFrameId& id);
  void recv_uncache();
  int64_t partitions(const IDataFrameId& id) override;
  void send_partitions(const IDataFrameId& id);
  int64_t recv_partitions();
  void saveAsObjectFile(const IDataFrameId& id, const std::string& path, const int8_t compression) override;
  void send_saveAsObjectFile(const IDataFrameId& id, const std::string& path, const int8_t compression);
  void recv_saveAsObjectFile();
  void saveAsTextFile(const IDataFrameId& id, const std::string& path) override;
  void send_saveAsTextFile(const IDataFrameId& id, const std::string& path);
  void recv_saveAsTextFile();
  void saveAsJsonFile(const IDataFrameId& id, const std::string& path, const bool pretty) override;
  void send_saveAsJsonFile(const IDataFrameId& id, const std::string& path, const bool pretty);
  void recv_saveAsJsonFile();
  void repartition(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const bool preserveOrdering, const bool global_) override;
  void send_repartition(const IDataFrameId& id, const int64_t numPartitions, const bool preserveOrdering, const bool global_);
  void recv_repartition(IDataFrameId& _return);
  void partitionByRandom(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override;
  void send_partitionByRandom(const IDataFrameId& id, const int64_t numPartitions);
  void recv_partitionByRandom(IDataFrameId& _return);
  void partitionByHash(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override;
  void send_partitionByHash(const IDataFrameId& id, const int64_t numPartitions);
  void recv_partitionByHash(IDataFrameId& _return);
  void partitionBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions) override;
  void send_partitionBy(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions);
  void recv_partitionBy(IDataFrameId& _return);
  void map_(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_map_(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_map_(IDataFrameId& _return);
  void filter(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_filter(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_filter(IDataFrameId& _return);
  void flatmap(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_flatmap(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_flatmap(IDataFrameId& _return);
  void keyBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_keyBy(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_keyBy(IDataFrameId& _return);
  void mapPartitions(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) override;
  void send_mapPartitions(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void recv_mapPartitions(IDataFrameId& _return);
  void mapPartitionsWithIndex(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) override;
  void send_mapPartitionsWithIndex(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void recv_mapPartitionsWithIndex(IDataFrameId& _return);
  void mapExecutor(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_mapExecutor(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_mapExecutor(IDataFrameId& _return);
  void mapExecutorTo(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_mapExecutorTo(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_mapExecutorTo(IDataFrameId& _return);
  void groupBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_groupBy(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_groupBy(IDataFrameId& _return);
  void groupBy2(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions) override;
  void send_groupBy2(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions);
  void recv_groupBy2(IDataFrameId& _return);
  void sort(IDataFrameId& _return, const IDataFrameId& id, const bool ascending) override;
  void send_sort(const IDataFrameId& id, const bool ascending);
  void recv_sort(IDataFrameId& _return);
  void sort2(IDataFrameId& _return, const IDataFrameId& id, const bool ascending, const int64_t numPartitions) override;
  void send_sort2(const IDataFrameId& id, const bool ascending, const int64_t numPartitions);
  void recv_sort2(IDataFrameId& _return);
  void sortBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending) override;
  void send_sortBy(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending);
  void recv_sortBy(IDataFrameId& _return);
  void sortBy3(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) override;
  void send_sortBy3(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions);
  void recv_sortBy3(IDataFrameId& _return);
  void union_(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder) override;
  void send_union_(const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder);
  void recv_union_(IDataFrameId& _return);
  void union4(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder, const  ::ignis::rpc::ISource& src) override;
  void send_union4(const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder, const  ::ignis::rpc::ISource& src);
  void recv_union4(IDataFrameId& _return);
  void join(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other) override;
  void send_join(const IDataFrameId& id, const IDataFrameId& other);
  void recv_join(IDataFrameId& _return);
  void join3a(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions) override;
  void send_join3a(const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions);
  void recv_join3a(IDataFrameId& _return);
  void join3b(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const  ::ignis::rpc::ISource& src) override;
  void send_join3b(const IDataFrameId& id, const IDataFrameId& other, const  ::ignis::rpc::ISource& src);
  void recv_join3b(IDataFrameId& _return);
  void join4(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override;
  void send_join4(const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions, const  ::ignis::rpc::ISource& src);
  void recv_join4(IDataFrameId& _return);
  void distinct(IDataFrameId& _return, const IDataFrameId& id) override;
  void send_distinct(const IDataFrameId& id);
  void recv_distinct(IDataFrameId& _return);
  void distinct2a(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override;
  void send_distinct2a(const IDataFrameId& id, const int64_t numPartitions);
  void recv_distinct2a(IDataFrameId& _return);
  void distinct2b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_distinct2b(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_distinct2b(IDataFrameId& _return);
  void distinct3(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override;
  void send_distinct3(const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src);
  void recv_distinct3(IDataFrameId& _return);
  int64_t reduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override;
  void send_reduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp);
  int64_t recv_reduce();
  int64_t treeReduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override;
  void send_treeReduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp);
  int64_t recv_treeReduce();
  int64_t collect(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  void send_collect(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_collect();
  int64_t aggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp) override;
  void send_aggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_aggregate();
  int64_t treeAggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp) override;
  void send_treeAggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_treeAggregate();
  int64_t fold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override;
  void send_fold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp);
  int64_t recv_fold();
  int64_t treeFold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override;
  void send_treeFold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp);
  int64_t recv_treeFold();
  int64_t take(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override;
  void send_take(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp);
  int64_t recv_take();
  void foreach_(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_foreach_(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_foreach_();
  void foreachPartition(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_foreachPartition(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_foreachPartition();
  void foreachExecutor(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_foreachExecutor(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_foreachExecutor();
  int64_t top(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override;
  void send_top(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp);
  int64_t recv_top();
  int64_t top4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override;
  void send_top4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_top4();
  int64_t takeOrdered(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override;
  void send_takeOrdered(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp);
  int64_t recv_takeOrdered();
  int64_t takeOrdered4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override;
  void send_takeOrdered4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_takeOrdered4();
  void sample(IDataFrameId& _return, const IDataFrameId& id, const bool withReplacement, const double fraction, const int32_t seed) override;
  void send_sample(const IDataFrameId& id, const bool withReplacement, const double fraction, const int32_t seed);
  void recv_sample(IDataFrameId& _return);
  int64_t takeSample(const IDataFrameId& id, const bool withReplacement, const int64_t num, const int32_t seed, const  ::ignis::rpc::ISource& tp) override;
  void send_takeSample(const IDataFrameId& id, const bool withReplacement, const int64_t num, const int32_t seed, const  ::ignis::rpc::ISource& tp);
  int64_t recv_takeSample();
  int64_t count(const IDataFrameId& id) override;
  void send_count(const IDataFrameId& id);
  int64_t recv_count();
  int64_t max(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  void send_max(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_max();
  int64_t max3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override;
  void send_max3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_max3();
  int64_t min(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  void send_min(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_min();
  int64_t min3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override;
  void send_min3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_min3();
  /**
   * *****************************************Key-Value******************************************
   * 
   * @param id
   * @param src
   */
  void flatMapValues(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_flatMapValues(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_flatMapValues(IDataFrameId& _return);
  void mapValues(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_mapValues(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_mapValues(IDataFrameId& _return);
  void groupByKey(IDataFrameId& _return, const IDataFrameId& id) override;
  void send_groupByKey(const IDataFrameId& id);
  void recv_groupByKey(IDataFrameId& _return);
  void groupByKey2a(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override;
  void send_groupByKey2a(const IDataFrameId& id, const int64_t numPartitions);
  void recv_groupByKey2a(IDataFrameId& _return);
  void groupByKey2b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  void send_groupByKey2b(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_groupByKey2b(IDataFrameId& _return);
  void groupByKey3(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override;
  void send_groupByKey3(const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src);
  void recv_groupByKey3(IDataFrameId& _return);
  void reduceByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool localReduce) override;
  void send_reduceByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool localReduce);
  void recv_reduceByKey(IDataFrameId& _return);
  void reduceByKey4(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localReduce) override;
  void send_reduceByKey4(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localReduce);
  void recv_reduceByKey4(IDataFrameId& _return);
  void aggregateByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp) override;
  void send_aggregateByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp);
  void recv_aggregateByKey(IDataFrameId& _return);
  void aggregateByKey4a(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const int64_t numPartitions) override;
  void send_aggregateByKey4a(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const int64_t numPartitions);
  void recv_aggregateByKey4a(IDataFrameId& _return);
  void aggregateByKey4b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp) override;
  void send_aggregateByKey4b(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp);
  void recv_aggregateByKey4b(IDataFrameId& _return);
  void aggregateByKey5(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t numPartitions) override;
  void send_aggregateByKey5(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t numPartitions);
  void recv_aggregateByKey5(IDataFrameId& _return);
  void foldByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const bool localFold) override;
  void send_foldByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const bool localFold);
  void recv_foldByKey(IDataFrameId& _return);
  void foldByKey5(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localFold) override;
  void send_foldByKey5(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localFold);
  void recv_foldByKey5(IDataFrameId& _return);
  void sortByKey(IDataFrameId& _return, const IDataFrameId& id, const bool ascending) override;
  void send_sortByKey(const IDataFrameId& id, const bool ascending);
  void recv_sortByKey(IDataFrameId& _return);
  void sortByKey3a(IDataFrameId& _return, const IDataFrameId& id, const bool ascending, const int64_t numPartitions) override;
  void send_sortByKey3a(const IDataFrameId& id, const bool ascending, const int64_t numPartitions);
  void recv_sortByKey3a(IDataFrameId& _return);
  void sortByKey3b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending) override;
  void send_sortByKey3b(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending);
  void recv_sortByKey3b(IDataFrameId& _return);
  void sortByKey4(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) override;
  void send_sortByKey4(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions);
  void recv_sortByKey4(IDataFrameId& _return);
  int64_t keys(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  void send_keys(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_keys();
  int64_t values(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  void send_values(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_values();
  void sampleByKey(IDataFrameId& _return, const IDataFrameId& id, const bool withReplacement, const  ::ignis::rpc::ISource& fractions, const int32_t seed) override;
  void send_sampleByKey(const IDataFrameId& id, const bool withReplacement, const  ::ignis::rpc::ISource& fractions, const int32_t seed);
  void recv_sampleByKey(IDataFrameId& _return);
  int64_t countByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  void send_countByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_countByKey();
  int64_t countByValue(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  void send_countByValue(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_countByValue();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IDataFrameServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IDataFrameServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (IDataFrameServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_setName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_persist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unpersist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uncache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsObjectFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsTextFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsJsonFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_repartition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionByRandom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionByHash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_map_(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_flatmap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_keyBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mapPartitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mapPartitionsWithIndex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mapExecutor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mapExecutorTo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupBy2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sort2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sortBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sortBy3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_union_(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_union4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_join(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_join3a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_join3b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_join4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_distinct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_distinct2a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_distinct2b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_distinct3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reduce(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_treeReduce(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_collect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aggregate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_treeAggregate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_treeFold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_foreach_(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_foreachPartition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_foreachExecutor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_top(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_top4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_takeOrdered(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_takeOrdered4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sample(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_takeSample(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_max(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_max3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_min(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_min3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_flatMapValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mapValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupByKey2a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupByKey2b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupByKey3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reduceByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reduceByKey4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aggregateByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aggregateByKey4a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aggregateByKey4b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aggregateByKey5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_foldByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_foldByKey5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sortByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sortByKey3a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sortByKey3b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sortByKey4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_keys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_values(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sampleByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countByValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IDataFrameServiceProcessor(::std::shared_ptr<IDataFrameServiceIf> iface) :
    iface_(iface) {
    processMap_["setName"] = &IDataFrameServiceProcessor::process_setName;
    processMap_["persist"] = &IDataFrameServiceProcessor::process_persist;
    processMap_["cache"] = &IDataFrameServiceProcessor::process_cache;
    processMap_["unpersist"] = &IDataFrameServiceProcessor::process_unpersist;
    processMap_["uncache"] = &IDataFrameServiceProcessor::process_uncache;
    processMap_["partitions"] = &IDataFrameServiceProcessor::process_partitions;
    processMap_["saveAsObjectFile"] = &IDataFrameServiceProcessor::process_saveAsObjectFile;
    processMap_["saveAsTextFile"] = &IDataFrameServiceProcessor::process_saveAsTextFile;
    processMap_["saveAsJsonFile"] = &IDataFrameServiceProcessor::process_saveAsJsonFile;
    processMap_["repartition"] = &IDataFrameServiceProcessor::process_repartition;
    processMap_["partitionByRandom"] = &IDataFrameServiceProcessor::process_partitionByRandom;
    processMap_["partitionByHash"] = &IDataFrameServiceProcessor::process_partitionByHash;
    processMap_["partitionBy"] = &IDataFrameServiceProcessor::process_partitionBy;
    processMap_["map_"] = &IDataFrameServiceProcessor::process_map_;
    processMap_["filter"] = &IDataFrameServiceProcessor::process_filter;
    processMap_["flatmap"] = &IDataFrameServiceProcessor::process_flatmap;
    processMap_["keyBy"] = &IDataFrameServiceProcessor::process_keyBy;
    processMap_["mapPartitions"] = &IDataFrameServiceProcessor::process_mapPartitions;
    processMap_["mapPartitionsWithIndex"] = &IDataFrameServiceProcessor::process_mapPartitionsWithIndex;
    processMap_["mapExecutor"] = &IDataFrameServiceProcessor::process_mapExecutor;
    processMap_["mapExecutorTo"] = &IDataFrameServiceProcessor::process_mapExecutorTo;
    processMap_["groupBy"] = &IDataFrameServiceProcessor::process_groupBy;
    processMap_["groupBy2"] = &IDataFrameServiceProcessor::process_groupBy2;
    processMap_["sort"] = &IDataFrameServiceProcessor::process_sort;
    processMap_["sort2"] = &IDataFrameServiceProcessor::process_sort2;
    processMap_["sortBy"] = &IDataFrameServiceProcessor::process_sortBy;
    processMap_["sortBy3"] = &IDataFrameServiceProcessor::process_sortBy3;
    processMap_["union_"] = &IDataFrameServiceProcessor::process_union_;
    processMap_["union4"] = &IDataFrameServiceProcessor::process_union4;
    processMap_["join"] = &IDataFrameServiceProcessor::process_join;
    processMap_["join3a"] = &IDataFrameServiceProcessor::process_join3a;
    processMap_["join3b"] = &IDataFrameServiceProcessor::process_join3b;
    processMap_["join4"] = &IDataFrameServiceProcessor::process_join4;
    processMap_["distinct"] = &IDataFrameServiceProcessor::process_distinct;
    processMap_["distinct2a"] = &IDataFrameServiceProcessor::process_distinct2a;
    processMap_["distinct2b"] = &IDataFrameServiceProcessor::process_distinct2b;
    processMap_["distinct3"] = &IDataFrameServiceProcessor::process_distinct3;
    processMap_["reduce"] = &IDataFrameServiceProcessor::process_reduce;
    processMap_["treeReduce"] = &IDataFrameServiceProcessor::process_treeReduce;
    processMap_["collect"] = &IDataFrameServiceProcessor::process_collect;
    processMap_["aggregate"] = &IDataFrameServiceProcessor::process_aggregate;
    processMap_["treeAggregate"] = &IDataFrameServiceProcessor::process_treeAggregate;
    processMap_["fold"] = &IDataFrameServiceProcessor::process_fold;
    processMap_["treeFold"] = &IDataFrameServiceProcessor::process_treeFold;
    processMap_["take"] = &IDataFrameServiceProcessor::process_take;
    processMap_["foreach_"] = &IDataFrameServiceProcessor::process_foreach_;
    processMap_["foreachPartition"] = &IDataFrameServiceProcessor::process_foreachPartition;
    processMap_["foreachExecutor"] = &IDataFrameServiceProcessor::process_foreachExecutor;
    processMap_["top"] = &IDataFrameServiceProcessor::process_top;
    processMap_["top4"] = &IDataFrameServiceProcessor::process_top4;
    processMap_["takeOrdered"] = &IDataFrameServiceProcessor::process_takeOrdered;
    processMap_["takeOrdered4"] = &IDataFrameServiceProcessor::process_takeOrdered4;
    processMap_["sample"] = &IDataFrameServiceProcessor::process_sample;
    processMap_["takeSample"] = &IDataFrameServiceProcessor::process_takeSample;
    processMap_["count"] = &IDataFrameServiceProcessor::process_count;
    processMap_["max"] = &IDataFrameServiceProcessor::process_max;
    processMap_["max3"] = &IDataFrameServiceProcessor::process_max3;
    processMap_["min"] = &IDataFrameServiceProcessor::process_min;
    processMap_["min3"] = &IDataFrameServiceProcessor::process_min3;
    processMap_["flatMapValues"] = &IDataFrameServiceProcessor::process_flatMapValues;
    processMap_["mapValues"] = &IDataFrameServiceProcessor::process_mapValues;
    processMap_["groupByKey"] = &IDataFrameServiceProcessor::process_groupByKey;
    processMap_["groupByKey2a"] = &IDataFrameServiceProcessor::process_groupByKey2a;
    processMap_["groupByKey2b"] = &IDataFrameServiceProcessor::process_groupByKey2b;
    processMap_["groupByKey3"] = &IDataFrameServiceProcessor::process_groupByKey3;
    processMap_["reduceByKey"] = &IDataFrameServiceProcessor::process_reduceByKey;
    processMap_["reduceByKey4"] = &IDataFrameServiceProcessor::process_reduceByKey4;
    processMap_["aggregateByKey"] = &IDataFrameServiceProcessor::process_aggregateByKey;
    processMap_["aggregateByKey4a"] = &IDataFrameServiceProcessor::process_aggregateByKey4a;
    processMap_["aggregateByKey4b"] = &IDataFrameServiceProcessor::process_aggregateByKey4b;
    processMap_["aggregateByKey5"] = &IDataFrameServiceProcessor::process_aggregateByKey5;
    processMap_["foldByKey"] = &IDataFrameServiceProcessor::process_foldByKey;
    processMap_["foldByKey5"] = &IDataFrameServiceProcessor::process_foldByKey5;
    processMap_["sortByKey"] = &IDataFrameServiceProcessor::process_sortByKey;
    processMap_["sortByKey3a"] = &IDataFrameServiceProcessor::process_sortByKey3a;
    processMap_["sortByKey3b"] = &IDataFrameServiceProcessor::process_sortByKey3b;
    processMap_["sortByKey4"] = &IDataFrameServiceProcessor::process_sortByKey4;
    processMap_["keys"] = &IDataFrameServiceProcessor::process_keys;
    processMap_["values"] = &IDataFrameServiceProcessor::process_values;
    processMap_["sampleByKey"] = &IDataFrameServiceProcessor::process_sampleByKey;
    processMap_["countByKey"] = &IDataFrameServiceProcessor::process_countByKey;
    processMap_["countByValue"] = &IDataFrameServiceProcessor::process_countByValue;
  }

  virtual ~IDataFrameServiceProcessor() {}
};

class IDataFrameServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IDataFrameServiceProcessorFactory(const ::std::shared_ptr< IDataFrameServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< IDataFrameServiceIfFactory > handlerFactory_;
};

class IDataFrameServiceMultiface : virtual public IDataFrameServiceIf {
 public:
  IDataFrameServiceMultiface(std::vector<std::shared_ptr<IDataFrameServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IDataFrameServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<IDataFrameServiceIf> > ifaces_;
  IDataFrameServiceMultiface() {}
  void add(::std::shared_ptr<IDataFrameServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setName(const IDataFrameId& id, const std::string& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setName(id, name);
    }
    ifaces_[i]->setName(id, name);
  }

  void persist(const IDataFrameId& id, const int8_t level) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->persist(id, level);
    }
    ifaces_[i]->persist(id, level);
  }

  void cache(const IDataFrameId& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cache(id);
    }
    ifaces_[i]->cache(id);
  }

  void unpersist(const IDataFrameId& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unpersist(id);
    }
    ifaces_[i]->unpersist(id);
  }

  void uncache(const IDataFrameId& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uncache(id);
    }
    ifaces_[i]->uncache(id);
  }

  int64_t partitions(const IDataFrameId& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitions(id);
    }
    return ifaces_[i]->partitions(id);
  }

  void saveAsObjectFile(const IDataFrameId& id, const std::string& path, const int8_t compression) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsObjectFile(id, path, compression);
    }
    ifaces_[i]->saveAsObjectFile(id, path, compression);
  }

  void saveAsTextFile(const IDataFrameId& id, const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsTextFile(id, path);
    }
    ifaces_[i]->saveAsTextFile(id, path);
  }

  void saveAsJsonFile(const IDataFrameId& id, const std::string& path, const bool pretty) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsJsonFile(id, path, pretty);
    }
    ifaces_[i]->saveAsJsonFile(id, path, pretty);
  }

  void repartition(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const bool preserveOrdering, const bool global_) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->repartition(_return, id, numPartitions, preserveOrdering, global_);
    }
    ifaces_[i]->repartition(_return, id, numPartitions, preserveOrdering, global_);
    return;
  }

  void partitionByRandom(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionByRandom(_return, id, numPartitions);
    }
    ifaces_[i]->partitionByRandom(_return, id, numPartitions);
    return;
  }

  void partitionByHash(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionByHash(_return, id, numPartitions);
    }
    ifaces_[i]->partitionByHash(_return, id, numPartitions);
    return;
  }

  void partitionBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionBy(_return, id, src, numPartitions);
    }
    ifaces_[i]->partitionBy(_return, id, src, numPartitions);
    return;
  }

  void map_(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->map_(_return, id, src);
    }
    ifaces_[i]->map_(_return, id, src);
    return;
  }

  void filter(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filter(_return, id, src);
    }
    ifaces_[i]->filter(_return, id, src);
    return;
  }

  void flatmap(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->flatmap(_return, id, src);
    }
    ifaces_[i]->flatmap(_return, id, src);
    return;
  }

  void keyBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keyBy(_return, id, src);
    }
    ifaces_[i]->keyBy(_return, id, src);
    return;
  }

  void mapPartitions(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mapPartitions(_return, id, src, preservesPartitioning);
    }
    ifaces_[i]->mapPartitions(_return, id, src, preservesPartitioning);
    return;
  }

  void mapPartitionsWithIndex(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mapPartitionsWithIndex(_return, id, src, preservesPartitioning);
    }
    ifaces_[i]->mapPartitionsWithIndex(_return, id, src, preservesPartitioning);
    return;
  }

  void mapExecutor(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mapExecutor(_return, id, src);
    }
    ifaces_[i]->mapExecutor(_return, id, src);
    return;
  }

  void mapExecutorTo(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mapExecutorTo(_return, id, src);
    }
    ifaces_[i]->mapExecutorTo(_return, id, src);
    return;
  }

  void groupBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupBy(_return, id, src);
    }
    ifaces_[i]->groupBy(_return, id, src);
    return;
  }

  void groupBy2(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupBy2(_return, id, src, numPartitions);
    }
    ifaces_[i]->groupBy2(_return, id, src, numPartitions);
    return;
  }

  void sort(IDataFrameId& _return, const IDataFrameId& id, const bool ascending) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sort(_return, id, ascending);
    }
    ifaces_[i]->sort(_return, id, ascending);
    return;
  }

  void sort2(IDataFrameId& _return, const IDataFrameId& id, const bool ascending, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sort2(_return, id, ascending, numPartitions);
    }
    ifaces_[i]->sort2(_return, id, ascending, numPartitions);
    return;
  }

  void sortBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sortBy(_return, id, src, ascending);
    }
    ifaces_[i]->sortBy(_return, id, src, ascending);
    return;
  }

  void sortBy3(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sortBy3(_return, id, src, ascending, numPartitions);
    }
    ifaces_[i]->sortBy3(_return, id, src, ascending, numPartitions);
    return;
  }

  void union_(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->union_(_return, id, other, preserveOrder);
    }
    ifaces_[i]->union_(_return, id, other, preserveOrder);
    return;
  }

  void union4(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->union4(_return, id, other, preserveOrder, src);
    }
    ifaces_[i]->union4(_return, id, other, preserveOrder, src);
    return;
  }

  void join(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join(_return, id, other);
    }
    ifaces_[i]->join(_return, id, other);
    return;
  }

  void join3a(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join3a(_return, id, other, numPartitions);
    }
    ifaces_[i]->join3a(_return, id, other, numPartitions);
    return;
  }

  void join3b(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join3b(_return, id, other, src);
    }
    ifaces_[i]->join3b(_return, id, other, src);
    return;
  }

  void join4(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join4(_return, id, other, numPartitions, src);
    }
    ifaces_[i]->join4(_return, id, other, numPartitions, src);
    return;
  }

  void distinct(IDataFrameId& _return, const IDataFrameId& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->distinct(_return, id);
    }
    ifaces_[i]->distinct(_return, id);
    return;
  }

  void distinct2a(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->distinct2a(_return, id, numPartitions);
    }
    ifaces_[i]->distinct2a(_return, id, numPartitions);
    return;
  }

  void distinct2b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->distinct2b(_return, id, src);
    }
    ifaces_[i]->distinct2b(_return, id, src);
    return;
  }

  void distinct3(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->distinct3(_return, id, numPartitions, src);
    }
    ifaces_[i]->distinct3(_return, id, numPartitions, src);
    return;
  }

  int64_t reduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reduce(id, src, tp);
    }
    return ifaces_[i]->reduce(id, src, tp);
  }

  int64_t treeReduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->treeReduce(id, src, tp);
    }
    return ifaces_[i]->treeReduce(id, src, tp);
  }

  int64_t collect(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->collect(id, tp);
    }
    return ifaces_[i]->collect(id, tp);
  }

  int64_t aggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->aggregate(id, zero, seqOp, combOp, tp);
    }
    return ifaces_[i]->aggregate(id, zero, seqOp, combOp, tp);
  }

  int64_t treeAggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->treeAggregate(id, zero, seqOp, combOp, tp);
    }
    return ifaces_[i]->treeAggregate(id, zero, seqOp, combOp, tp);
  }

  int64_t fold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fold(id, zero, src, tp);
    }
    return ifaces_[i]->fold(id, zero, src, tp);
  }

  int64_t treeFold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->treeFold(id, zero, src, tp);
    }
    return ifaces_[i]->treeFold(id, zero, src, tp);
  }

  int64_t take(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take(id, num, tp);
    }
    return ifaces_[i]->take(id, num, tp);
  }

  void foreach_(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->foreach_(id, src);
    }
    ifaces_[i]->foreach_(id, src);
  }

  void foreachPartition(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->foreachPartition(id, src);
    }
    ifaces_[i]->foreachPartition(id, src);
  }

  void foreachExecutor(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->foreachExecutor(id, src);
    }
    ifaces_[i]->foreachExecutor(id, src);
  }

  int64_t top(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->top(id, num, tp);
    }
    return ifaces_[i]->top(id, num, tp);
  }

  int64_t top4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->top4(id, num, cmp, tp);
    }
    return ifaces_[i]->top4(id, num, cmp, tp);
  }

  int64_t takeOrdered(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->takeOrdered(id, num, tp);
    }
    return ifaces_[i]->takeOrdered(id, num, tp);
  }

  int64_t takeOrdered4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->takeOrdered4(id, num, cmp, tp);
    }
    return ifaces_[i]->takeOrdered4(id, num, cmp, tp);
  }

  void sample(IDataFrameId& _return, const IDataFrameId& id, const bool withReplacement, const double fraction, const int32_t seed) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sample(_return, id, withReplacement, fraction, seed);
    }
    ifaces_[i]->sample(_return, id, withReplacement, fraction, seed);
    return;
  }

  int64_t takeSample(const IDataFrameId& id, const bool withReplacement, const int64_t num, const int32_t seed, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->takeSample(id, withReplacement, num, seed, tp);
    }
    return ifaces_[i]->takeSample(id, withReplacement, num, seed, tp);
  }

  int64_t count(const IDataFrameId& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count(id);
    }
    return ifaces_[i]->count(id);
  }

  int64_t max(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->max(id, tp);
    }
    return ifaces_[i]->max(id, tp);
  }

  int64_t max3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->max3(id, cmp, tp);
    }
    return ifaces_[i]->max3(id, cmp, tp);
  }

  int64_t min(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->min(id, tp);
    }
    return ifaces_[i]->min(id, tp);
  }

  int64_t min3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->min3(id, cmp, tp);
    }
    return ifaces_[i]->min3(id, cmp, tp);
  }

  /**
   * *****************************************Key-Value******************************************
   * 
   * @param id
   * @param src
   */
  void flatMapValues(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->flatMapValues(_return, id, src);
    }
    ifaces_[i]->flatMapValues(_return, id, src);
    return;
  }

  void mapValues(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mapValues(_return, id, src);
    }
    ifaces_[i]->mapValues(_return, id, src);
    return;
  }

  void groupByKey(IDataFrameId& _return, const IDataFrameId& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupByKey(_return, id);
    }
    ifaces_[i]->groupByKey(_return, id);
    return;
  }

  void groupByKey2a(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupByKey2a(_return, id, numPartitions);
    }
    ifaces_[i]->groupByKey2a(_return, id, numPartitions);
    return;
  }

  void groupByKey2b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupByKey2b(_return, id, src);
    }
    ifaces_[i]->groupByKey2b(_return, id, src);
    return;
  }

  void groupByKey3(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupByKey3(_return, id, numPartitions, src);
    }
    ifaces_[i]->groupByKey3(_return, id, numPartitions, src);
    return;
  }

  void reduceByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool localReduce) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reduceByKey(_return, id, src, localReduce);
    }
    ifaces_[i]->reduceByKey(_return, id, src, localReduce);
    return;
  }

  void reduceByKey4(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localReduce) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reduceByKey4(_return, id, src, numPartitions, localReduce);
    }
    ifaces_[i]->reduceByKey4(_return, id, src, numPartitions, localReduce);
    return;
  }

  void aggregateByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->aggregateByKey(_return, id, zero, seqOp);
    }
    ifaces_[i]->aggregateByKey(_return, id, zero, seqOp);
    return;
  }

  void aggregateByKey4a(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->aggregateByKey4a(_return, id, zero, seqOp, numPartitions);
    }
    ifaces_[i]->aggregateByKey4a(_return, id, zero, seqOp, numPartitions);
    return;
  }

  void aggregateByKey4b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->aggregateByKey4b(_return, id, zero, seqOp, combOp);
    }
    ifaces_[i]->aggregateByKey4b(_return, id, zero, seqOp, combOp);
    return;
  }

  void aggregateByKey5(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->aggregateByKey5(_return, id, zero, seqOp, combOp, numPartitions);
    }
    ifaces_[i]->aggregateByKey5(_return, id, zero, seqOp, combOp, numPartitions);
    return;
  }

  void foldByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const bool localFold) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->foldByKey(_return, id, zero, src, localFold);
    }
    ifaces_[i]->foldByKey(_return, id, zero, src, localFold);
    return;
  }

  void foldByKey5(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localFold) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->foldByKey5(_return, id, zero, src, numPartitions, localFold);
    }
    ifaces_[i]->foldByKey5(_return, id, zero, src, numPartitions, localFold);
    return;
  }

  void sortByKey(IDataFrameId& _return, const IDataFrameId& id, const bool ascending) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sortByKey(_return, id, ascending);
    }
    ifaces_[i]->sortByKey(_return, id, ascending);
    return;
  }

  void sortByKey3a(IDataFrameId& _return, const IDataFrameId& id, const bool ascending, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sortByKey3a(_return, id, ascending, numPartitions);
    }
    ifaces_[i]->sortByKey3a(_return, id, ascending, numPartitions);
    return;
  }

  void sortByKey3b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sortByKey3b(_return, id, src, ascending);
    }
    ifaces_[i]->sortByKey3b(_return, id, src, ascending);
    return;
  }

  void sortByKey4(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sortByKey4(_return, id, src, ascending, numPartitions);
    }
    ifaces_[i]->sortByKey4(_return, id, src, ascending, numPartitions);
    return;
  }

  int64_t keys(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keys(id, tp);
    }
    return ifaces_[i]->keys(id, tp);
  }

  int64_t values(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->values(id, tp);
    }
    return ifaces_[i]->values(id, tp);
  }

  void sampleByKey(IDataFrameId& _return, const IDataFrameId& id, const bool withReplacement, const  ::ignis::rpc::ISource& fractions, const int32_t seed) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sampleByKey(_return, id, withReplacement, fractions, seed);
    }
    ifaces_[i]->sampleByKey(_return, id, withReplacement, fractions, seed);
    return;
  }

  int64_t countByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countByKey(id, tp);
    }
    return ifaces_[i]->countByKey(id, tp);
  }

  int64_t countByValue(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countByValue(id, tp);
    }
    return ifaces_[i]->countByValue(id, tp);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IDataFrameServiceConcurrentClient : virtual public IDataFrameServiceIf {
 public:
  IDataFrameServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IDataFrameServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setName(const IDataFrameId& id, const std::string& name) override;
  int32_t send_setName(const IDataFrameId& id, const std::string& name);
  void recv_setName(const int32_t seqid);
  void persist(const IDataFrameId& id, const int8_t level) override;
  int32_t send_persist(const IDataFrameId& id, const int8_t level);
  void recv_persist(const int32_t seqid);
  void cache(const IDataFrameId& id) override;
  int32_t send_cache(const IDataFrameId& id);
  void recv_cache(const int32_t seqid);
  void unpersist(const IDataFrameId& id) override;
  int32_t send_unpersist(const IDataFrameId& id);
  void recv_unpersist(const int32_t seqid);
  void uncache(const IDataFrameId& id) override;
  int32_t send_uncache(const IDataFrameId& id);
  void recv_uncache(const int32_t seqid);
  int64_t partitions(const IDataFrameId& id) override;
  int32_t send_partitions(const IDataFrameId& id);
  int64_t recv_partitions(const int32_t seqid);
  void saveAsObjectFile(const IDataFrameId& id, const std::string& path, const int8_t compression) override;
  int32_t send_saveAsObjectFile(const IDataFrameId& id, const std::string& path, const int8_t compression);
  void recv_saveAsObjectFile(const int32_t seqid);
  void saveAsTextFile(const IDataFrameId& id, const std::string& path) override;
  int32_t send_saveAsTextFile(const IDataFrameId& id, const std::string& path);
  void recv_saveAsTextFile(const int32_t seqid);
  void saveAsJsonFile(const IDataFrameId& id, const std::string& path, const bool pretty) override;
  int32_t send_saveAsJsonFile(const IDataFrameId& id, const std::string& path, const bool pretty);
  void recv_saveAsJsonFile(const int32_t seqid);
  void repartition(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const bool preserveOrdering, const bool global_) override;
  int32_t send_repartition(const IDataFrameId& id, const int64_t numPartitions, const bool preserveOrdering, const bool global_);
  void recv_repartition(IDataFrameId& _return, const int32_t seqid);
  void partitionByRandom(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override;
  int32_t send_partitionByRandom(const IDataFrameId& id, const int64_t numPartitions);
  void recv_partitionByRandom(IDataFrameId& _return, const int32_t seqid);
  void partitionByHash(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override;
  int32_t send_partitionByHash(const IDataFrameId& id, const int64_t numPartitions);
  void recv_partitionByHash(IDataFrameId& _return, const int32_t seqid);
  void partitionBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions) override;
  int32_t send_partitionBy(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions);
  void recv_partitionBy(IDataFrameId& _return, const int32_t seqid);
  void map_(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_map_(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_map_(IDataFrameId& _return, const int32_t seqid);
  void filter(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_filter(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_filter(IDataFrameId& _return, const int32_t seqid);
  void flatmap(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_flatmap(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_flatmap(IDataFrameId& _return, const int32_t seqid);
  void keyBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_keyBy(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_keyBy(IDataFrameId& _return, const int32_t seqid);
  void mapPartitions(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) override;
  int32_t send_mapPartitions(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void recv_mapPartitions(IDataFrameId& _return, const int32_t seqid);
  void mapPartitionsWithIndex(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) override;
  int32_t send_mapPartitionsWithIndex(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void recv_mapPartitionsWithIndex(IDataFrameId& _return, const int32_t seqid);
  void mapExecutor(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_mapExecutor(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_mapExecutor(IDataFrameId& _return, const int32_t seqid);
  void mapExecutorTo(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_mapExecutorTo(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_mapExecutorTo(IDataFrameId& _return, const int32_t seqid);
  void groupBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_groupBy(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_groupBy(IDataFrameId& _return, const int32_t seqid);
  void groupBy2(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions) override;
  int32_t send_groupBy2(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions);
  void recv_groupBy2(IDataFrameId& _return, const int32_t seqid);
  void sort(IDataFrameId& _return, const IDataFrameId& id, const bool ascending) override;
  int32_t send_sort(const IDataFrameId& id, const bool ascending);
  void recv_sort(IDataFrameId& _return, const int32_t seqid);
  void sort2(IDataFrameId& _return, const IDataFrameId& id, const bool ascending, const int64_t numPartitions) override;
  int32_t send_sort2(const IDataFrameId& id, const bool ascending, const int64_t numPartitions);
  void recv_sort2(IDataFrameId& _return, const int32_t seqid);
  void sortBy(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending) override;
  int32_t send_sortBy(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending);
  void recv_sortBy(IDataFrameId& _return, const int32_t seqid);
  void sortBy3(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) override;
  int32_t send_sortBy3(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions);
  void recv_sortBy3(IDataFrameId& _return, const int32_t seqid);
  void union_(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder) override;
  int32_t send_union_(const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder);
  void recv_union_(IDataFrameId& _return, const int32_t seqid);
  void union4(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder, const  ::ignis::rpc::ISource& src) override;
  int32_t send_union4(const IDataFrameId& id, const IDataFrameId& other, const bool preserveOrder, const  ::ignis::rpc::ISource& src);
  void recv_union4(IDataFrameId& _return, const int32_t seqid);
  void join(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other) override;
  int32_t send_join(const IDataFrameId& id, const IDataFrameId& other);
  void recv_join(IDataFrameId& _return, const int32_t seqid);
  void join3a(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions) override;
  int32_t send_join3a(const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions);
  void recv_join3a(IDataFrameId& _return, const int32_t seqid);
  void join3b(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const  ::ignis::rpc::ISource& src) override;
  int32_t send_join3b(const IDataFrameId& id, const IDataFrameId& other, const  ::ignis::rpc::ISource& src);
  void recv_join3b(IDataFrameId& _return, const int32_t seqid);
  void join4(IDataFrameId& _return, const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override;
  int32_t send_join4(const IDataFrameId& id, const IDataFrameId& other, const int64_t numPartitions, const  ::ignis::rpc::ISource& src);
  void recv_join4(IDataFrameId& _return, const int32_t seqid);
  void distinct(IDataFrameId& _return, const IDataFrameId& id) override;
  int32_t send_distinct(const IDataFrameId& id);
  void recv_distinct(IDataFrameId& _return, const int32_t seqid);
  void distinct2a(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override;
  int32_t send_distinct2a(const IDataFrameId& id, const int64_t numPartitions);
  void recv_distinct2a(IDataFrameId& _return, const int32_t seqid);
  void distinct2b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_distinct2b(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_distinct2b(IDataFrameId& _return, const int32_t seqid);
  void distinct3(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override;
  int32_t send_distinct3(const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src);
  void recv_distinct3(IDataFrameId& _return, const int32_t seqid);
  int64_t reduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_reduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp);
  int64_t recv_reduce(const int32_t seqid);
  int64_t treeReduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_treeReduce(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp);
  int64_t recv_treeReduce(const int32_t seqid);
  int64_t collect(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_collect(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_collect(const int32_t seqid);
  int64_t aggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_aggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_aggregate(const int32_t seqid);
  int64_t treeAggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_treeAggregate(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_treeAggregate(const int32_t seqid);
  int64_t fold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_fold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp);
  int64_t recv_fold(const int32_t seqid);
  int64_t treeFold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_treeFold(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const  ::ignis::rpc::ISource& tp);
  int64_t recv_treeFold(const int32_t seqid);
  int64_t take(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_take(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp);
  int64_t recv_take(const int32_t seqid);
  void foreach_(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_foreach_(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_foreach_(const int32_t seqid);
  void foreachPartition(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_foreachPartition(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_foreachPartition(const int32_t seqid);
  void foreachExecutor(const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_foreachExecutor(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_foreachExecutor(const int32_t seqid);
  int64_t top(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_top(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp);
  int64_t recv_top(const int32_t seqid);
  int64_t top4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_top4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_top4(const int32_t seqid);
  int64_t takeOrdered(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_takeOrdered(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& tp);
  int64_t recv_takeOrdered(const int32_t seqid);
  int64_t takeOrdered4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_takeOrdered4(const IDataFrameId& id, const int64_t num, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_takeOrdered4(const int32_t seqid);
  void sample(IDataFrameId& _return, const IDataFrameId& id, const bool withReplacement, const double fraction, const int32_t seed) override;
  int32_t send_sample(const IDataFrameId& id, const bool withReplacement, const double fraction, const int32_t seed);
  void recv_sample(IDataFrameId& _return, const int32_t seqid);
  int64_t takeSample(const IDataFrameId& id, const bool withReplacement, const int64_t num, const int32_t seed, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_takeSample(const IDataFrameId& id, const bool withReplacement, const int64_t num, const int32_t seed, const  ::ignis::rpc::ISource& tp);
  int64_t recv_takeSample(const int32_t seqid);
  int64_t count(const IDataFrameId& id) override;
  int32_t send_count(const IDataFrameId& id);
  int64_t recv_count(const int32_t seqid);
  int64_t max(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_max(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_max(const int32_t seqid);
  int64_t max3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_max3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_max3(const int32_t seqid);
  int64_t min(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_min(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_min(const int32_t seqid);
  int64_t min3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_min3(const IDataFrameId& id, const  ::ignis::rpc::ISource& cmp, const  ::ignis::rpc::ISource& tp);
  int64_t recv_min3(const int32_t seqid);
  /**
   * *****************************************Key-Value******************************************
   * 
   * @param id
   * @param src
   */
  void flatMapValues(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_flatMapValues(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_flatMapValues(IDataFrameId& _return, const int32_t seqid);
  void mapValues(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_mapValues(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_mapValues(IDataFrameId& _return, const int32_t seqid);
  void groupByKey(IDataFrameId& _return, const IDataFrameId& id) override;
  int32_t send_groupByKey(const IDataFrameId& id);
  void recv_groupByKey(IDataFrameId& _return, const int32_t seqid);
  void groupByKey2a(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions) override;
  int32_t send_groupByKey2a(const IDataFrameId& id, const int64_t numPartitions);
  void recv_groupByKey2a(IDataFrameId& _return, const int32_t seqid);
  void groupByKey2b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src) override;
  int32_t send_groupByKey2b(const IDataFrameId& id, const  ::ignis::rpc::ISource& src);
  void recv_groupByKey2b(IDataFrameId& _return, const int32_t seqid);
  void groupByKey3(IDataFrameId& _return, const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src) override;
  int32_t send_groupByKey3(const IDataFrameId& id, const int64_t numPartitions, const  ::ignis::rpc::ISource& src);
  void recv_groupByKey3(IDataFrameId& _return, const int32_t seqid);
  void reduceByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool localReduce) override;
  int32_t send_reduceByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool localReduce);
  void recv_reduceByKey(IDataFrameId& _return, const int32_t seqid);
  void reduceByKey4(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localReduce) override;
  int32_t send_reduceByKey4(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localReduce);
  void recv_reduceByKey4(IDataFrameId& _return, const int32_t seqid);
  void aggregateByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp) override;
  int32_t send_aggregateByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp);
  void recv_aggregateByKey(IDataFrameId& _return, const int32_t seqid);
  void aggregateByKey4a(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const int64_t numPartitions) override;
  int32_t send_aggregateByKey4a(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const int64_t numPartitions);
  void recv_aggregateByKey4a(IDataFrameId& _return, const int32_t seqid);
  void aggregateByKey4b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp) override;
  int32_t send_aggregateByKey4b(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp);
  void recv_aggregateByKey4b(IDataFrameId& _return, const int32_t seqid);
  void aggregateByKey5(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t numPartitions) override;
  int32_t send_aggregateByKey5(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t numPartitions);
  void recv_aggregateByKey5(IDataFrameId& _return, const int32_t seqid);
  void foldByKey(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const bool localFold) override;
  int32_t send_foldByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const bool localFold);
  void recv_foldByKey(IDataFrameId& _return, const int32_t seqid);
  void foldByKey5(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localFold) override;
  int32_t send_foldByKey5(const IDataFrameId& id, const  ::ignis::rpc::ISource& zero, const  ::ignis::rpc::ISource& src, const int64_t numPartitions, const bool localFold);
  void recv_foldByKey5(IDataFrameId& _return, const int32_t seqid);
  void sortByKey(IDataFrameId& _return, const IDataFrameId& id, const bool ascending) override;
  int32_t send_sortByKey(const IDataFrameId& id, const bool ascending);
  void recv_sortByKey(IDataFrameId& _return, const int32_t seqid);
  void sortByKey3a(IDataFrameId& _return, const IDataFrameId& id, const bool ascending, const int64_t numPartitions) override;
  int32_t send_sortByKey3a(const IDataFrameId& id, const bool ascending, const int64_t numPartitions);
  void recv_sortByKey3a(IDataFrameId& _return, const int32_t seqid);
  void sortByKey3b(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending) override;
  int32_t send_sortByKey3b(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending);
  void recv_sortByKey3b(IDataFrameId& _return, const int32_t seqid);
  void sortByKey4(IDataFrameId& _return, const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) override;
  int32_t send_sortByKey4(const IDataFrameId& id, const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions);
  void recv_sortByKey4(IDataFrameId& _return, const int32_t seqid);
  int64_t keys(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_keys(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_keys(const int32_t seqid);
  int64_t values(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_values(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_values(const int32_t seqid);
  void sampleByKey(IDataFrameId& _return, const IDataFrameId& id, const bool withReplacement, const  ::ignis::rpc::ISource& fractions, const int32_t seed) override;
  int32_t send_sampleByKey(const IDataFrameId& id, const bool withReplacement, const  ::ignis::rpc::ISource& fractions, const int32_t seed);
  void recv_sampleByKey(IDataFrameId& _return, const int32_t seqid);
  int64_t countByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_countByKey(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_countByKey(const int32_t seqid);
  int64_t countByValue(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp) override;
  int32_t send_countByValue(const IDataFrameId& id, const  ::ignis::rpc::ISource& tp);
  int64_t recv_countByValue(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
