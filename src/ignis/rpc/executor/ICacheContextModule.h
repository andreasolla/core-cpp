/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ICacheContextModule_H
#define ICacheContextModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "ICacheContextModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ICacheContextModuleIf {
 public:
  virtual ~ICacheContextModuleIf() {}
  virtual int64_t saveContext() = 0;
  virtual void loadContext(const int64_t id) = 0;
  virtual void cache(const int64_t id, const int8_t level) = 0;
  virtual void loadCache(const int64_t id) = 0;
};

class ICacheContextModuleIfFactory {
 public:
  typedef ICacheContextModuleIf Handler;

  virtual ~ICacheContextModuleIfFactory() {}

  virtual ICacheContextModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ICacheContextModuleIf* /* handler */) = 0;
};

class ICacheContextModuleIfSingletonFactory : virtual public ICacheContextModuleIfFactory {
 public:
  ICacheContextModuleIfSingletonFactory(const ::std::shared_ptr<ICacheContextModuleIf>& iface) : iface_(iface) {}
  virtual ~ICacheContextModuleIfSingletonFactory() {}

  virtual ICacheContextModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ICacheContextModuleIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ICacheContextModuleIf> iface_;
};

class ICacheContextModuleNull : virtual public ICacheContextModuleIf {
 public:
  virtual ~ICacheContextModuleNull() {}
  int64_t saveContext() {
    int64_t _return = 0;
    return _return;
  }
  void loadContext(const int64_t /* id */) {
    return;
  }
  void cache(const int64_t /* id */, const int8_t /* level */) {
    return;
  }
  void loadCache(const int64_t /* id */) {
    return;
  }
};


class ICacheContextModule_saveContext_args {
 public:

  ICacheContextModule_saveContext_args(const ICacheContextModule_saveContext_args&);
  ICacheContextModule_saveContext_args& operator=(const ICacheContextModule_saveContext_args&);
  ICacheContextModule_saveContext_args() {
  }

  virtual ~ICacheContextModule_saveContext_args() noexcept;

  bool operator == (const ICacheContextModule_saveContext_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ICacheContextModule_saveContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICacheContextModule_saveContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICacheContextModule_saveContext_pargs {
 public:


  virtual ~ICacheContextModule_saveContext_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICacheContextModule_saveContext_result__isset {
  _ICacheContextModule_saveContext_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ICacheContextModule_saveContext_result__isset;

class ICacheContextModule_saveContext_result {
 public:

  ICacheContextModule_saveContext_result(const ICacheContextModule_saveContext_result&);
  ICacheContextModule_saveContext_result& operator=(const ICacheContextModule_saveContext_result&);
  ICacheContextModule_saveContext_result() : success(0) {
  }

  virtual ~ICacheContextModule_saveContext_result() noexcept;
  int64_t success;
   ::ignis::rpc::IExecutorException ex;

  _ICacheContextModule_saveContext_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICacheContextModule_saveContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICacheContextModule_saveContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICacheContextModule_saveContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICacheContextModule_saveContext_presult__isset {
  _ICacheContextModule_saveContext_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ICacheContextModule_saveContext_presult__isset;

class ICacheContextModule_saveContext_presult {
 public:


  virtual ~ICacheContextModule_saveContext_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::IExecutorException ex;

  _ICacheContextModule_saveContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICacheContextModule_loadContext_args__isset {
  _ICacheContextModule_loadContext_args__isset() : id(false) {}
  bool id :1;
} _ICacheContextModule_loadContext_args__isset;

class ICacheContextModule_loadContext_args {
 public:

  ICacheContextModule_loadContext_args(const ICacheContextModule_loadContext_args&);
  ICacheContextModule_loadContext_args& operator=(const ICacheContextModule_loadContext_args&);
  ICacheContextModule_loadContext_args() : id(0) {
  }

  virtual ~ICacheContextModule_loadContext_args() noexcept;
  int64_t id;

  _ICacheContextModule_loadContext_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const ICacheContextModule_loadContext_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ICacheContextModule_loadContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICacheContextModule_loadContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICacheContextModule_loadContext_pargs {
 public:


  virtual ~ICacheContextModule_loadContext_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICacheContextModule_loadContext_result__isset {
  _ICacheContextModule_loadContext_result__isset() : ex(false) {}
  bool ex :1;
} _ICacheContextModule_loadContext_result__isset;

class ICacheContextModule_loadContext_result {
 public:

  ICacheContextModule_loadContext_result(const ICacheContextModule_loadContext_result&);
  ICacheContextModule_loadContext_result& operator=(const ICacheContextModule_loadContext_result&);
  ICacheContextModule_loadContext_result() {
  }

  virtual ~ICacheContextModule_loadContext_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICacheContextModule_loadContext_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICacheContextModule_loadContext_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICacheContextModule_loadContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICacheContextModule_loadContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICacheContextModule_loadContext_presult__isset {
  _ICacheContextModule_loadContext_presult__isset() : ex(false) {}
  bool ex :1;
} _ICacheContextModule_loadContext_presult__isset;

class ICacheContextModule_loadContext_presult {
 public:


  virtual ~ICacheContextModule_loadContext_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICacheContextModule_loadContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICacheContextModule_cache_args__isset {
  _ICacheContextModule_cache_args__isset() : id(false), level(false) {}
  bool id :1;
  bool level :1;
} _ICacheContextModule_cache_args__isset;

class ICacheContextModule_cache_args {
 public:

  ICacheContextModule_cache_args(const ICacheContextModule_cache_args&);
  ICacheContextModule_cache_args& operator=(const ICacheContextModule_cache_args&);
  ICacheContextModule_cache_args() : id(0), level(0) {
  }

  virtual ~ICacheContextModule_cache_args() noexcept;
  int64_t id;
  int8_t level;

  _ICacheContextModule_cache_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_level(const int8_t val);

  bool operator == (const ICacheContextModule_cache_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const ICacheContextModule_cache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICacheContextModule_cache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICacheContextModule_cache_pargs {
 public:


  virtual ~ICacheContextModule_cache_pargs() noexcept;
  const int64_t* id;
  const int8_t* level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICacheContextModule_cache_result__isset {
  _ICacheContextModule_cache_result__isset() : ex(false) {}
  bool ex :1;
} _ICacheContextModule_cache_result__isset;

class ICacheContextModule_cache_result {
 public:

  ICacheContextModule_cache_result(const ICacheContextModule_cache_result&);
  ICacheContextModule_cache_result& operator=(const ICacheContextModule_cache_result&);
  ICacheContextModule_cache_result() {
  }

  virtual ~ICacheContextModule_cache_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICacheContextModule_cache_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICacheContextModule_cache_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICacheContextModule_cache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICacheContextModule_cache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICacheContextModule_cache_presult__isset {
  _ICacheContextModule_cache_presult__isset() : ex(false) {}
  bool ex :1;
} _ICacheContextModule_cache_presult__isset;

class ICacheContextModule_cache_presult {
 public:


  virtual ~ICacheContextModule_cache_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICacheContextModule_cache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICacheContextModule_loadCache_args__isset {
  _ICacheContextModule_loadCache_args__isset() : id(false) {}
  bool id :1;
} _ICacheContextModule_loadCache_args__isset;

class ICacheContextModule_loadCache_args {
 public:

  ICacheContextModule_loadCache_args(const ICacheContextModule_loadCache_args&);
  ICacheContextModule_loadCache_args& operator=(const ICacheContextModule_loadCache_args&);
  ICacheContextModule_loadCache_args() : id(0) {
  }

  virtual ~ICacheContextModule_loadCache_args() noexcept;
  int64_t id;

  _ICacheContextModule_loadCache_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const ICacheContextModule_loadCache_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ICacheContextModule_loadCache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICacheContextModule_loadCache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICacheContextModule_loadCache_pargs {
 public:


  virtual ~ICacheContextModule_loadCache_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICacheContextModule_loadCache_result__isset {
  _ICacheContextModule_loadCache_result__isset() : ex(false) {}
  bool ex :1;
} _ICacheContextModule_loadCache_result__isset;

class ICacheContextModule_loadCache_result {
 public:

  ICacheContextModule_loadCache_result(const ICacheContextModule_loadCache_result&);
  ICacheContextModule_loadCache_result& operator=(const ICacheContextModule_loadCache_result&);
  ICacheContextModule_loadCache_result() {
  }

  virtual ~ICacheContextModule_loadCache_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICacheContextModule_loadCache_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICacheContextModule_loadCache_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICacheContextModule_loadCache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICacheContextModule_loadCache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICacheContextModule_loadCache_presult__isset {
  _ICacheContextModule_loadCache_presult__isset() : ex(false) {}
  bool ex :1;
} _ICacheContextModule_loadCache_presult__isset;

class ICacheContextModule_loadCache_presult {
 public:


  virtual ~ICacheContextModule_loadCache_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICacheContextModule_loadCache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ICacheContextModuleClient : virtual public ICacheContextModuleIf {
 public:
  ICacheContextModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ICacheContextModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t saveContext();
  void send_saveContext();
  int64_t recv_saveContext();
  void loadContext(const int64_t id);
  void send_loadContext(const int64_t id);
  void recv_loadContext();
  void cache(const int64_t id, const int8_t level);
  void send_cache(const int64_t id, const int8_t level);
  void recv_cache();
  void loadCache(const int64_t id);
  void send_loadCache(const int64_t id);
  void recv_loadCache();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ICacheContextModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ICacheContextModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ICacheContextModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_saveContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadCache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ICacheContextModuleProcessor(::std::shared_ptr<ICacheContextModuleIf> iface) :
    iface_(iface) {
    processMap_["saveContext"] = &ICacheContextModuleProcessor::process_saveContext;
    processMap_["loadContext"] = &ICacheContextModuleProcessor::process_loadContext;
    processMap_["cache"] = &ICacheContextModuleProcessor::process_cache;
    processMap_["loadCache"] = &ICacheContextModuleProcessor::process_loadCache;
  }

  virtual ~ICacheContextModuleProcessor() {}
};

class ICacheContextModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ICacheContextModuleProcessorFactory(const ::std::shared_ptr< ICacheContextModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ICacheContextModuleIfFactory > handlerFactory_;
};

class ICacheContextModuleMultiface : virtual public ICacheContextModuleIf {
 public:
  ICacheContextModuleMultiface(std::vector<std::shared_ptr<ICacheContextModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ICacheContextModuleMultiface() {}
 protected:
  std::vector<std::shared_ptr<ICacheContextModuleIf> > ifaces_;
  ICacheContextModuleMultiface() {}
  void add(::std::shared_ptr<ICacheContextModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t saveContext() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveContext();
    }
    return ifaces_[i]->saveContext();
  }

  void loadContext(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadContext(id);
    }
    ifaces_[i]->loadContext(id);
  }

  void cache(const int64_t id, const int8_t level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cache(id, level);
    }
    ifaces_[i]->cache(id, level);
  }

  void loadCache(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadCache(id);
    }
    ifaces_[i]->loadCache(id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ICacheContextModuleConcurrentClient : virtual public ICacheContextModuleIf {
 public:
  ICacheContextModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ICacheContextModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t saveContext();
  int32_t send_saveContext();
  int64_t recv_saveContext(const int32_t seqid);
  void loadContext(const int64_t id);
  int32_t send_loadContext(const int64_t id);
  void recv_loadContext(const int32_t seqid);
  void cache(const int64_t id, const int8_t level);
  int32_t send_cache(const int64_t id, const int8_t level);
  void recv_cache(const int32_t seqid);
  void loadCache(const int64_t id);
  int32_t send_loadCache(const int64_t id);
  void recv_loadCache(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
