/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IIOModule_H
#define IIOModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IIOModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IIOModuleIf {
 public:
  virtual ~IIOModuleIf() {}
  virtual void loadClass(const  ::ignis::rpc::ISource& src) = 0;
  virtual void loadLibrary(const std::string& path) = 0;
  virtual int64_t partitionCount() = 0;
  virtual void countByPartition(std::vector<int64_t> & _return) = 0;
  virtual int64_t partitionApproxSize() = 0;
  virtual void plainFile(const std::string& path, const int8_t delim) = 0;
  virtual void plainFile3(const std::string& path, const int64_t minPartitions, const int8_t delim) = 0;
  virtual void textFile(const std::string& path) = 0;
  virtual void textFile2(const std::string& path, const int64_t minPartitions) = 0;
  virtual void partitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions) = 0;
  virtual void partitionObjectFile4(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src) = 0;
  virtual void partitionTextFile(const std::string& path, const int64_t first, const int64_t partitions) = 0;
  virtual void partitionJsonFile4a(const std::string& path, const int64_t first, const int64_t partitions, const bool objectMapping) = 0;
  virtual void partitionJsonFile4b(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src) = 0;
  virtual void saveAsObjectFile(const std::string& path, const int8_t compression, const int64_t first) = 0;
  virtual void saveAsTextFile(const std::string& path, const int64_t first) = 0;
  virtual void saveAsJsonFile(const std::string& path, const int64_t first, const bool pretty) = 0;
};

class IIOModuleIfFactory {
 public:
  typedef IIOModuleIf Handler;

  virtual ~IIOModuleIfFactory() {}

  virtual IIOModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IIOModuleIf* /* handler */) = 0;
  };

class IIOModuleIfSingletonFactory : virtual public IIOModuleIfFactory {
 public:
  IIOModuleIfSingletonFactory(const ::std::shared_ptr<IIOModuleIf>& iface) : iface_(iface) {}
  virtual ~IIOModuleIfSingletonFactory() {}

  virtual IIOModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(IIOModuleIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<IIOModuleIf> iface_;
};

class IIOModuleNull : virtual public IIOModuleIf {
 public:
  virtual ~IIOModuleNull() {}
  void loadClass(const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void loadLibrary(const std::string& /* path */) override {
    return;
  }
  int64_t partitionCount() override {
    int64_t _return = 0;
    return _return;
  }
  void countByPartition(std::vector<int64_t> & /* _return */) override {
    return;
  }
  int64_t partitionApproxSize() override {
    int64_t _return = 0;
    return _return;
  }
  void plainFile(const std::string& /* path */, const int8_t /* delim */) override {
    return;
  }
  void plainFile3(const std::string& /* path */, const int64_t /* minPartitions */, const int8_t /* delim */) override {
    return;
  }
  void textFile(const std::string& /* path */) override {
    return;
  }
  void textFile2(const std::string& /* path */, const int64_t /* minPartitions */) override {
    return;
  }
  void partitionObjectFile(const std::string& /* path */, const int64_t /* first */, const int64_t /* partitions */) override {
    return;
  }
  void partitionObjectFile4(const std::string& /* path */, const int64_t /* first */, const int64_t /* partitions */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void partitionTextFile(const std::string& /* path */, const int64_t /* first */, const int64_t /* partitions */) override {
    return;
  }
  void partitionJsonFile4a(const std::string& /* path */, const int64_t /* first */, const int64_t /* partitions */, const bool /* objectMapping */) override {
    return;
  }
  void partitionJsonFile4b(const std::string& /* path */, const int64_t /* first */, const int64_t /* partitions */, const  ::ignis::rpc::ISource& /* src */) override {
    return;
  }
  void saveAsObjectFile(const std::string& /* path */, const int8_t /* compression */, const int64_t /* first */) override {
    return;
  }
  void saveAsTextFile(const std::string& /* path */, const int64_t /* first */) override {
    return;
  }
  void saveAsJsonFile(const std::string& /* path */, const int64_t /* first */, const bool /* pretty */) override {
    return;
  }
};

typedef struct _IIOModule_loadClass_args__isset {
  _IIOModule_loadClass_args__isset() : src(false) {}
  bool src :1;
} _IIOModule_loadClass_args__isset;

class IIOModule_loadClass_args {
 public:

  IIOModule_loadClass_args(const IIOModule_loadClass_args&);
  IIOModule_loadClass_args& operator=(const IIOModule_loadClass_args&);
  IIOModule_loadClass_args() noexcept {
  }

  virtual ~IIOModule_loadClass_args() noexcept;
   ::ignis::rpc::ISource src;

  _IIOModule_loadClass_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IIOModule_loadClass_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IIOModule_loadClass_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_loadClass_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_loadClass_pargs {
 public:


  virtual ~IIOModule_loadClass_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_loadClass_result__isset {
  _IIOModule_loadClass_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_loadClass_result__isset;

class IIOModule_loadClass_result {
 public:

  IIOModule_loadClass_result(const IIOModule_loadClass_result&);
  IIOModule_loadClass_result& operator=(const IIOModule_loadClass_result&);
  IIOModule_loadClass_result() noexcept {
  }

  virtual ~IIOModule_loadClass_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_loadClass_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_loadClass_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_loadClass_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_loadClass_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_loadClass_presult__isset {
  _IIOModule_loadClass_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_loadClass_presult__isset;

class IIOModule_loadClass_presult {
 public:


  virtual ~IIOModule_loadClass_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_loadClass_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_loadLibrary_args__isset {
  _IIOModule_loadLibrary_args__isset() : path(false) {}
  bool path :1;
} _IIOModule_loadLibrary_args__isset;

class IIOModule_loadLibrary_args {
 public:

  IIOModule_loadLibrary_args(const IIOModule_loadLibrary_args&);
  IIOModule_loadLibrary_args& operator=(const IIOModule_loadLibrary_args&);
  IIOModule_loadLibrary_args() noexcept
                             : path() {
  }

  virtual ~IIOModule_loadLibrary_args() noexcept;
  std::string path;

  _IIOModule_loadLibrary_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const IIOModule_loadLibrary_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IIOModule_loadLibrary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_loadLibrary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_loadLibrary_pargs {
 public:


  virtual ~IIOModule_loadLibrary_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_loadLibrary_result__isset {
  _IIOModule_loadLibrary_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_loadLibrary_result__isset;

class IIOModule_loadLibrary_result {
 public:

  IIOModule_loadLibrary_result(const IIOModule_loadLibrary_result&);
  IIOModule_loadLibrary_result& operator=(const IIOModule_loadLibrary_result&);
  IIOModule_loadLibrary_result() noexcept {
  }

  virtual ~IIOModule_loadLibrary_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_loadLibrary_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_loadLibrary_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_loadLibrary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_loadLibrary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_loadLibrary_presult__isset {
  _IIOModule_loadLibrary_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_loadLibrary_presult__isset;

class IIOModule_loadLibrary_presult {
 public:


  virtual ~IIOModule_loadLibrary_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_loadLibrary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IIOModule_partitionCount_args {
 public:

  IIOModule_partitionCount_args(const IIOModule_partitionCount_args&) noexcept;
  IIOModule_partitionCount_args& operator=(const IIOModule_partitionCount_args&) noexcept;
  IIOModule_partitionCount_args() noexcept {
  }

  virtual ~IIOModule_partitionCount_args() noexcept;

  bool operator == (const IIOModule_partitionCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IIOModule_partitionCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_partitionCount_pargs {
 public:


  virtual ~IIOModule_partitionCount_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionCount_result__isset {
  _IIOModule_partitionCount_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IIOModule_partitionCount_result__isset;

class IIOModule_partitionCount_result {
 public:

  IIOModule_partitionCount_result(const IIOModule_partitionCount_result&);
  IIOModule_partitionCount_result& operator=(const IIOModule_partitionCount_result&);
  IIOModule_partitionCount_result() noexcept
                                  : success(0) {
  }

  virtual ~IIOModule_partitionCount_result() noexcept;
  int64_t success;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_partitionCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionCount_presult__isset {
  _IIOModule_partitionCount_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IIOModule_partitionCount_presult__isset;

class IIOModule_partitionCount_presult {
 public:


  virtual ~IIOModule_partitionCount_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IIOModule_countByPartition_args {
 public:

  IIOModule_countByPartition_args(const IIOModule_countByPartition_args&) noexcept;
  IIOModule_countByPartition_args& operator=(const IIOModule_countByPartition_args&) noexcept;
  IIOModule_countByPartition_args() noexcept {
  }

  virtual ~IIOModule_countByPartition_args() noexcept;

  bool operator == (const IIOModule_countByPartition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IIOModule_countByPartition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_countByPartition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_countByPartition_pargs {
 public:


  virtual ~IIOModule_countByPartition_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_countByPartition_result__isset {
  _IIOModule_countByPartition_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IIOModule_countByPartition_result__isset;

class IIOModule_countByPartition_result {
 public:

  IIOModule_countByPartition_result(const IIOModule_countByPartition_result&);
  IIOModule_countByPartition_result& operator=(const IIOModule_countByPartition_result&);
  IIOModule_countByPartition_result() noexcept {
  }

  virtual ~IIOModule_countByPartition_result() noexcept;
  std::vector<int64_t>  success;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_countByPartition_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_countByPartition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_countByPartition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_countByPartition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_countByPartition_presult__isset {
  _IIOModule_countByPartition_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IIOModule_countByPartition_presult__isset;

class IIOModule_countByPartition_presult {
 public:


  virtual ~IIOModule_countByPartition_presult() noexcept;
  std::vector<int64_t> * success;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_countByPartition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IIOModule_partitionApproxSize_args {
 public:

  IIOModule_partitionApproxSize_args(const IIOModule_partitionApproxSize_args&) noexcept;
  IIOModule_partitionApproxSize_args& operator=(const IIOModule_partitionApproxSize_args&) noexcept;
  IIOModule_partitionApproxSize_args() noexcept {
  }

  virtual ~IIOModule_partitionApproxSize_args() noexcept;

  bool operator == (const IIOModule_partitionApproxSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IIOModule_partitionApproxSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionApproxSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_partitionApproxSize_pargs {
 public:


  virtual ~IIOModule_partitionApproxSize_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionApproxSize_result__isset {
  _IIOModule_partitionApproxSize_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IIOModule_partitionApproxSize_result__isset;

class IIOModule_partitionApproxSize_result {
 public:

  IIOModule_partitionApproxSize_result(const IIOModule_partitionApproxSize_result&);
  IIOModule_partitionApproxSize_result& operator=(const IIOModule_partitionApproxSize_result&);
  IIOModule_partitionApproxSize_result() noexcept
                                       : success(0) {
  }

  virtual ~IIOModule_partitionApproxSize_result() noexcept;
  int64_t success;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionApproxSize_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_partitionApproxSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionApproxSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionApproxSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionApproxSize_presult__isset {
  _IIOModule_partitionApproxSize_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IIOModule_partitionApproxSize_presult__isset;

class IIOModule_partitionApproxSize_presult {
 public:


  virtual ~IIOModule_partitionApproxSize_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionApproxSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_plainFile_args__isset {
  _IIOModule_plainFile_args__isset() : path(false), delim(false) {}
  bool path :1;
  bool delim :1;
} _IIOModule_plainFile_args__isset;

class IIOModule_plainFile_args {
 public:

  IIOModule_plainFile_args(const IIOModule_plainFile_args&);
  IIOModule_plainFile_args& operator=(const IIOModule_plainFile_args&);
  IIOModule_plainFile_args() noexcept
                           : path(),
                             delim(0) {
  }

  virtual ~IIOModule_plainFile_args() noexcept;
  std::string path;
  int8_t delim;

  _IIOModule_plainFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_delim(const int8_t val);

  bool operator == (const IIOModule_plainFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(delim == rhs.delim))
      return false;
    return true;
  }
  bool operator != (const IIOModule_plainFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_plainFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_plainFile_pargs {
 public:


  virtual ~IIOModule_plainFile_pargs() noexcept;
  const std::string* path;
  const int8_t* delim;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_plainFile_result__isset {
  _IIOModule_plainFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_plainFile_result__isset;

class IIOModule_plainFile_result {
 public:

  IIOModule_plainFile_result(const IIOModule_plainFile_result&);
  IIOModule_plainFile_result& operator=(const IIOModule_plainFile_result&);
  IIOModule_plainFile_result() noexcept {
  }

  virtual ~IIOModule_plainFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_plainFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_plainFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_plainFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_plainFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_plainFile_presult__isset {
  _IIOModule_plainFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_plainFile_presult__isset;

class IIOModule_plainFile_presult {
 public:


  virtual ~IIOModule_plainFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_plainFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_plainFile3_args__isset {
  _IIOModule_plainFile3_args__isset() : path(false), minPartitions(false), delim(false) {}
  bool path :1;
  bool minPartitions :1;
  bool delim :1;
} _IIOModule_plainFile3_args__isset;

class IIOModule_plainFile3_args {
 public:

  IIOModule_plainFile3_args(const IIOModule_plainFile3_args&);
  IIOModule_plainFile3_args& operator=(const IIOModule_plainFile3_args&);
  IIOModule_plainFile3_args() noexcept
                            : path(),
                              minPartitions(0),
                              delim(0) {
  }

  virtual ~IIOModule_plainFile3_args() noexcept;
  std::string path;
  int64_t minPartitions;
  int8_t delim;

  _IIOModule_plainFile3_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_minPartitions(const int64_t val);

  void __set_delim(const int8_t val);

  bool operator == (const IIOModule_plainFile3_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(minPartitions == rhs.minPartitions))
      return false;
    if (!(delim == rhs.delim))
      return false;
    return true;
  }
  bool operator != (const IIOModule_plainFile3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_plainFile3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_plainFile3_pargs {
 public:


  virtual ~IIOModule_plainFile3_pargs() noexcept;
  const std::string* path;
  const int64_t* minPartitions;
  const int8_t* delim;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_plainFile3_result__isset {
  _IIOModule_plainFile3_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_plainFile3_result__isset;

class IIOModule_plainFile3_result {
 public:

  IIOModule_plainFile3_result(const IIOModule_plainFile3_result&);
  IIOModule_plainFile3_result& operator=(const IIOModule_plainFile3_result&);
  IIOModule_plainFile3_result() noexcept {
  }

  virtual ~IIOModule_plainFile3_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_plainFile3_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_plainFile3_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_plainFile3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_plainFile3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_plainFile3_presult__isset {
  _IIOModule_plainFile3_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_plainFile3_presult__isset;

class IIOModule_plainFile3_presult {
 public:


  virtual ~IIOModule_plainFile3_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_plainFile3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_textFile_args__isset {
  _IIOModule_textFile_args__isset() : path(false) {}
  bool path :1;
} _IIOModule_textFile_args__isset;

class IIOModule_textFile_args {
 public:

  IIOModule_textFile_args(const IIOModule_textFile_args&);
  IIOModule_textFile_args& operator=(const IIOModule_textFile_args&);
  IIOModule_textFile_args() noexcept
                          : path() {
  }

  virtual ~IIOModule_textFile_args() noexcept;
  std::string path;

  _IIOModule_textFile_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const IIOModule_textFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IIOModule_textFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_textFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_textFile_pargs {
 public:


  virtual ~IIOModule_textFile_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_textFile_result__isset {
  _IIOModule_textFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_textFile_result__isset;

class IIOModule_textFile_result {
 public:

  IIOModule_textFile_result(const IIOModule_textFile_result&);
  IIOModule_textFile_result& operator=(const IIOModule_textFile_result&);
  IIOModule_textFile_result() noexcept {
  }

  virtual ~IIOModule_textFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_textFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_textFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_textFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_textFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_textFile_presult__isset {
  _IIOModule_textFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_textFile_presult__isset;

class IIOModule_textFile_presult {
 public:


  virtual ~IIOModule_textFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_textFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_textFile2_args__isset {
  _IIOModule_textFile2_args__isset() : path(false), minPartitions(false) {}
  bool path :1;
  bool minPartitions :1;
} _IIOModule_textFile2_args__isset;

class IIOModule_textFile2_args {
 public:

  IIOModule_textFile2_args(const IIOModule_textFile2_args&);
  IIOModule_textFile2_args& operator=(const IIOModule_textFile2_args&);
  IIOModule_textFile2_args() noexcept
                           : path(),
                             minPartitions(0) {
  }

  virtual ~IIOModule_textFile2_args() noexcept;
  std::string path;
  int64_t minPartitions;

  _IIOModule_textFile2_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_minPartitions(const int64_t val);

  bool operator == (const IIOModule_textFile2_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(minPartitions == rhs.minPartitions))
      return false;
    return true;
  }
  bool operator != (const IIOModule_textFile2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_textFile2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_textFile2_pargs {
 public:


  virtual ~IIOModule_textFile2_pargs() noexcept;
  const std::string* path;
  const int64_t* minPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_textFile2_result__isset {
  _IIOModule_textFile2_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_textFile2_result__isset;

class IIOModule_textFile2_result {
 public:

  IIOModule_textFile2_result(const IIOModule_textFile2_result&);
  IIOModule_textFile2_result& operator=(const IIOModule_textFile2_result&);
  IIOModule_textFile2_result() noexcept {
  }

  virtual ~IIOModule_textFile2_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_textFile2_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_textFile2_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_textFile2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_textFile2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_textFile2_presult__isset {
  _IIOModule_textFile2_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_textFile2_presult__isset;

class IIOModule_textFile2_presult {
 public:


  virtual ~IIOModule_textFile2_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_textFile2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_partitionObjectFile_args__isset {
  _IIOModule_partitionObjectFile_args__isset() : path(false), first(false), partitions(false) {}
  bool path :1;
  bool first :1;
  bool partitions :1;
} _IIOModule_partitionObjectFile_args__isset;

class IIOModule_partitionObjectFile_args {
 public:

  IIOModule_partitionObjectFile_args(const IIOModule_partitionObjectFile_args&);
  IIOModule_partitionObjectFile_args& operator=(const IIOModule_partitionObjectFile_args&);
  IIOModule_partitionObjectFile_args() noexcept
                                     : path(),
                                       first(0),
                                       partitions(0) {
  }

  virtual ~IIOModule_partitionObjectFile_args() noexcept;
  std::string path;
  int64_t first;
  int64_t partitions;

  _IIOModule_partitionObjectFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  void __set_partitions(const int64_t val);

  bool operator == (const IIOModule_partitionObjectFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionObjectFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionObjectFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_partitionObjectFile_pargs {
 public:


  virtual ~IIOModule_partitionObjectFile_pargs() noexcept;
  const std::string* path;
  const int64_t* first;
  const int64_t* partitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionObjectFile_result__isset {
  _IIOModule_partitionObjectFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionObjectFile_result__isset;

class IIOModule_partitionObjectFile_result {
 public:

  IIOModule_partitionObjectFile_result(const IIOModule_partitionObjectFile_result&);
  IIOModule_partitionObjectFile_result& operator=(const IIOModule_partitionObjectFile_result&);
  IIOModule_partitionObjectFile_result() noexcept {
  }

  virtual ~IIOModule_partitionObjectFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionObjectFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_partitionObjectFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionObjectFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionObjectFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionObjectFile_presult__isset {
  _IIOModule_partitionObjectFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionObjectFile_presult__isset;

class IIOModule_partitionObjectFile_presult {
 public:


  virtual ~IIOModule_partitionObjectFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionObjectFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_partitionObjectFile4_args__isset {
  _IIOModule_partitionObjectFile4_args__isset() : path(false), first(false), partitions(false), src(false) {}
  bool path :1;
  bool first :1;
  bool partitions :1;
  bool src :1;
} _IIOModule_partitionObjectFile4_args__isset;

class IIOModule_partitionObjectFile4_args {
 public:

  IIOModule_partitionObjectFile4_args(const IIOModule_partitionObjectFile4_args&);
  IIOModule_partitionObjectFile4_args& operator=(const IIOModule_partitionObjectFile4_args&);
  IIOModule_partitionObjectFile4_args() noexcept
                                      : path(),
                                        first(0),
                                        partitions(0) {
  }

  virtual ~IIOModule_partitionObjectFile4_args() noexcept;
  std::string path;
  int64_t first;
  int64_t partitions;
   ::ignis::rpc::ISource src;

  _IIOModule_partitionObjectFile4_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  void __set_partitions(const int64_t val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IIOModule_partitionObjectFile4_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionObjectFile4_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionObjectFile4_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_partitionObjectFile4_pargs {
 public:


  virtual ~IIOModule_partitionObjectFile4_pargs() noexcept;
  const std::string* path;
  const int64_t* first;
  const int64_t* partitions;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionObjectFile4_result__isset {
  _IIOModule_partitionObjectFile4_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionObjectFile4_result__isset;

class IIOModule_partitionObjectFile4_result {
 public:

  IIOModule_partitionObjectFile4_result(const IIOModule_partitionObjectFile4_result&);
  IIOModule_partitionObjectFile4_result& operator=(const IIOModule_partitionObjectFile4_result&);
  IIOModule_partitionObjectFile4_result() noexcept {
  }

  virtual ~IIOModule_partitionObjectFile4_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionObjectFile4_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_partitionObjectFile4_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionObjectFile4_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionObjectFile4_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionObjectFile4_presult__isset {
  _IIOModule_partitionObjectFile4_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionObjectFile4_presult__isset;

class IIOModule_partitionObjectFile4_presult {
 public:


  virtual ~IIOModule_partitionObjectFile4_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionObjectFile4_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_partitionTextFile_args__isset {
  _IIOModule_partitionTextFile_args__isset() : path(false), first(false), partitions(false) {}
  bool path :1;
  bool first :1;
  bool partitions :1;
} _IIOModule_partitionTextFile_args__isset;

class IIOModule_partitionTextFile_args {
 public:

  IIOModule_partitionTextFile_args(const IIOModule_partitionTextFile_args&);
  IIOModule_partitionTextFile_args& operator=(const IIOModule_partitionTextFile_args&);
  IIOModule_partitionTextFile_args() noexcept
                                   : path(),
                                     first(0),
                                     partitions(0) {
  }

  virtual ~IIOModule_partitionTextFile_args() noexcept;
  std::string path;
  int64_t first;
  int64_t partitions;

  _IIOModule_partitionTextFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  void __set_partitions(const int64_t val);

  bool operator == (const IIOModule_partitionTextFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionTextFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionTextFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_partitionTextFile_pargs {
 public:


  virtual ~IIOModule_partitionTextFile_pargs() noexcept;
  const std::string* path;
  const int64_t* first;
  const int64_t* partitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionTextFile_result__isset {
  _IIOModule_partitionTextFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionTextFile_result__isset;

class IIOModule_partitionTextFile_result {
 public:

  IIOModule_partitionTextFile_result(const IIOModule_partitionTextFile_result&);
  IIOModule_partitionTextFile_result& operator=(const IIOModule_partitionTextFile_result&);
  IIOModule_partitionTextFile_result() noexcept {
  }

  virtual ~IIOModule_partitionTextFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionTextFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_partitionTextFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionTextFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionTextFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionTextFile_presult__isset {
  _IIOModule_partitionTextFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionTextFile_presult__isset;

class IIOModule_partitionTextFile_presult {
 public:


  virtual ~IIOModule_partitionTextFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionTextFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_partitionJsonFile4a_args__isset {
  _IIOModule_partitionJsonFile4a_args__isset() : path(false), first(false), partitions(false), objectMapping(false) {}
  bool path :1;
  bool first :1;
  bool partitions :1;
  bool objectMapping :1;
} _IIOModule_partitionJsonFile4a_args__isset;

class IIOModule_partitionJsonFile4a_args {
 public:

  IIOModule_partitionJsonFile4a_args(const IIOModule_partitionJsonFile4a_args&);
  IIOModule_partitionJsonFile4a_args& operator=(const IIOModule_partitionJsonFile4a_args&);
  IIOModule_partitionJsonFile4a_args() noexcept
                                     : path(),
                                       first(0),
                                       partitions(0),
                                       objectMapping(0) {
  }

  virtual ~IIOModule_partitionJsonFile4a_args() noexcept;
  std::string path;
  int64_t first;
  int64_t partitions;
  bool objectMapping;

  _IIOModule_partitionJsonFile4a_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  void __set_partitions(const int64_t val);

  void __set_objectMapping(const bool val);

  bool operator == (const IIOModule_partitionJsonFile4a_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    if (!(objectMapping == rhs.objectMapping))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionJsonFile4a_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionJsonFile4a_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_partitionJsonFile4a_pargs {
 public:


  virtual ~IIOModule_partitionJsonFile4a_pargs() noexcept;
  const std::string* path;
  const int64_t* first;
  const int64_t* partitions;
  const bool* objectMapping;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionJsonFile4a_result__isset {
  _IIOModule_partitionJsonFile4a_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionJsonFile4a_result__isset;

class IIOModule_partitionJsonFile4a_result {
 public:

  IIOModule_partitionJsonFile4a_result(const IIOModule_partitionJsonFile4a_result&);
  IIOModule_partitionJsonFile4a_result& operator=(const IIOModule_partitionJsonFile4a_result&);
  IIOModule_partitionJsonFile4a_result() noexcept {
  }

  virtual ~IIOModule_partitionJsonFile4a_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionJsonFile4a_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_partitionJsonFile4a_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionJsonFile4a_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionJsonFile4a_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionJsonFile4a_presult__isset {
  _IIOModule_partitionJsonFile4a_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionJsonFile4a_presult__isset;

class IIOModule_partitionJsonFile4a_presult {
 public:


  virtual ~IIOModule_partitionJsonFile4a_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionJsonFile4a_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_partitionJsonFile4b_args__isset {
  _IIOModule_partitionJsonFile4b_args__isset() : path(false), first(false), partitions(false), src(false) {}
  bool path :1;
  bool first :1;
  bool partitions :1;
  bool src :1;
} _IIOModule_partitionJsonFile4b_args__isset;

class IIOModule_partitionJsonFile4b_args {
 public:

  IIOModule_partitionJsonFile4b_args(const IIOModule_partitionJsonFile4b_args&);
  IIOModule_partitionJsonFile4b_args& operator=(const IIOModule_partitionJsonFile4b_args&);
  IIOModule_partitionJsonFile4b_args() noexcept
                                     : path(),
                                       first(0),
                                       partitions(0) {
  }

  virtual ~IIOModule_partitionJsonFile4b_args() noexcept;
  std::string path;
  int64_t first;
  int64_t partitions;
   ::ignis::rpc::ISource src;

  _IIOModule_partitionJsonFile4b_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  void __set_partitions(const int64_t val);

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IIOModule_partitionJsonFile4b_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionJsonFile4b_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionJsonFile4b_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_partitionJsonFile4b_pargs {
 public:


  virtual ~IIOModule_partitionJsonFile4b_pargs() noexcept;
  const std::string* path;
  const int64_t* first;
  const int64_t* partitions;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionJsonFile4b_result__isset {
  _IIOModule_partitionJsonFile4b_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionJsonFile4b_result__isset;

class IIOModule_partitionJsonFile4b_result {
 public:

  IIOModule_partitionJsonFile4b_result(const IIOModule_partitionJsonFile4b_result&);
  IIOModule_partitionJsonFile4b_result& operator=(const IIOModule_partitionJsonFile4b_result&);
  IIOModule_partitionJsonFile4b_result() noexcept {
  }

  virtual ~IIOModule_partitionJsonFile4b_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionJsonFile4b_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_partitionJsonFile4b_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_partitionJsonFile4b_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_partitionJsonFile4b_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_partitionJsonFile4b_presult__isset {
  _IIOModule_partitionJsonFile4b_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_partitionJsonFile4b_presult__isset;

class IIOModule_partitionJsonFile4b_presult {
 public:


  virtual ~IIOModule_partitionJsonFile4b_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_partitionJsonFile4b_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_saveAsObjectFile_args__isset {
  _IIOModule_saveAsObjectFile_args__isset() : path(false), compression(false), first(false) {}
  bool path :1;
  bool compression :1;
  bool first :1;
} _IIOModule_saveAsObjectFile_args__isset;

class IIOModule_saveAsObjectFile_args {
 public:

  IIOModule_saveAsObjectFile_args(const IIOModule_saveAsObjectFile_args&);
  IIOModule_saveAsObjectFile_args& operator=(const IIOModule_saveAsObjectFile_args&);
  IIOModule_saveAsObjectFile_args() noexcept
                                  : path(),
                                    compression(0),
                                    first(0) {
  }

  virtual ~IIOModule_saveAsObjectFile_args() noexcept;
  std::string path;
  int8_t compression;
  int64_t first;

  _IIOModule_saveAsObjectFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_compression(const int8_t val);

  void __set_first(const int64_t val);

  bool operator == (const IIOModule_saveAsObjectFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(compression == rhs.compression))
      return false;
    if (!(first == rhs.first))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsObjectFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsObjectFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_saveAsObjectFile_pargs {
 public:


  virtual ~IIOModule_saveAsObjectFile_pargs() noexcept;
  const std::string* path;
  const int8_t* compression;
  const int64_t* first;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsObjectFile_result__isset {
  _IIOModule_saveAsObjectFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsObjectFile_result__isset;

class IIOModule_saveAsObjectFile_result {
 public:

  IIOModule_saveAsObjectFile_result(const IIOModule_saveAsObjectFile_result&);
  IIOModule_saveAsObjectFile_result& operator=(const IIOModule_saveAsObjectFile_result&);
  IIOModule_saveAsObjectFile_result() noexcept {
  }

  virtual ~IIOModule_saveAsObjectFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsObjectFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_saveAsObjectFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsObjectFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsObjectFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsObjectFile_presult__isset {
  _IIOModule_saveAsObjectFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsObjectFile_presult__isset;

class IIOModule_saveAsObjectFile_presult {
 public:


  virtual ~IIOModule_saveAsObjectFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsObjectFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_saveAsTextFile_args__isset {
  _IIOModule_saveAsTextFile_args__isset() : path(false), first(false) {}
  bool path :1;
  bool first :1;
} _IIOModule_saveAsTextFile_args__isset;

class IIOModule_saveAsTextFile_args {
 public:

  IIOModule_saveAsTextFile_args(const IIOModule_saveAsTextFile_args&);
  IIOModule_saveAsTextFile_args& operator=(const IIOModule_saveAsTextFile_args&);
  IIOModule_saveAsTextFile_args() noexcept
                                : path(),
                                  first(0) {
  }

  virtual ~IIOModule_saveAsTextFile_args() noexcept;
  std::string path;
  int64_t first;

  _IIOModule_saveAsTextFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  bool operator == (const IIOModule_saveAsTextFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsTextFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsTextFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_saveAsTextFile_pargs {
 public:


  virtual ~IIOModule_saveAsTextFile_pargs() noexcept;
  const std::string* path;
  const int64_t* first;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsTextFile_result__isset {
  _IIOModule_saveAsTextFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsTextFile_result__isset;

class IIOModule_saveAsTextFile_result {
 public:

  IIOModule_saveAsTextFile_result(const IIOModule_saveAsTextFile_result&);
  IIOModule_saveAsTextFile_result& operator=(const IIOModule_saveAsTextFile_result&);
  IIOModule_saveAsTextFile_result() noexcept {
  }

  virtual ~IIOModule_saveAsTextFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsTextFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_saveAsTextFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsTextFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsTextFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsTextFile_presult__isset {
  _IIOModule_saveAsTextFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsTextFile_presult__isset;

class IIOModule_saveAsTextFile_presult {
 public:


  virtual ~IIOModule_saveAsTextFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsTextFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_saveAsJsonFile_args__isset {
  _IIOModule_saveAsJsonFile_args__isset() : path(false), first(false), pretty(false) {}
  bool path :1;
  bool first :1;
  bool pretty :1;
} _IIOModule_saveAsJsonFile_args__isset;

class IIOModule_saveAsJsonFile_args {
 public:

  IIOModule_saveAsJsonFile_args(const IIOModule_saveAsJsonFile_args&);
  IIOModule_saveAsJsonFile_args& operator=(const IIOModule_saveAsJsonFile_args&);
  IIOModule_saveAsJsonFile_args() noexcept
                                : path(),
                                  first(0),
                                  pretty(0) {
  }

  virtual ~IIOModule_saveAsJsonFile_args() noexcept;
  std::string path;
  int64_t first;
  bool pretty;

  _IIOModule_saveAsJsonFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  void __set_pretty(const bool val);

  bool operator == (const IIOModule_saveAsJsonFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(pretty == rhs.pretty))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsJsonFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsJsonFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_saveAsJsonFile_pargs {
 public:


  virtual ~IIOModule_saveAsJsonFile_pargs() noexcept;
  const std::string* path;
  const int64_t* first;
  const bool* pretty;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsJsonFile_result__isset {
  _IIOModule_saveAsJsonFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsJsonFile_result__isset;

class IIOModule_saveAsJsonFile_result {
 public:

  IIOModule_saveAsJsonFile_result(const IIOModule_saveAsJsonFile_result&);
  IIOModule_saveAsJsonFile_result& operator=(const IIOModule_saveAsJsonFile_result&);
  IIOModule_saveAsJsonFile_result() noexcept {
  }

  virtual ~IIOModule_saveAsJsonFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsJsonFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_saveAsJsonFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsJsonFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsJsonFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsJsonFile_presult__isset {
  _IIOModule_saveAsJsonFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsJsonFile_presult__isset;

class IIOModule_saveAsJsonFile_presult {
 public:


  virtual ~IIOModule_saveAsJsonFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsJsonFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IIOModuleClient : virtual public IIOModuleIf {
 public:
  IIOModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IIOModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void loadClass(const  ::ignis::rpc::ISource& src) override;
  void send_loadClass(const  ::ignis::rpc::ISource& src);
  void recv_loadClass();
  void loadLibrary(const std::string& path) override;
  void send_loadLibrary(const std::string& path);
  void recv_loadLibrary();
  int64_t partitionCount() override;
  void send_partitionCount();
  int64_t recv_partitionCount();
  void countByPartition(std::vector<int64_t> & _return) override;
  void send_countByPartition();
  void recv_countByPartition(std::vector<int64_t> & _return);
  int64_t partitionApproxSize() override;
  void send_partitionApproxSize();
  int64_t recv_partitionApproxSize();
  void plainFile(const std::string& path, const int8_t delim) override;
  void send_plainFile(const std::string& path, const int8_t delim);
  void recv_plainFile();
  void plainFile3(const std::string& path, const int64_t minPartitions, const int8_t delim) override;
  void send_plainFile3(const std::string& path, const int64_t minPartitions, const int8_t delim);
  void recv_plainFile3();
  void textFile(const std::string& path) override;
  void send_textFile(const std::string& path);
  void recv_textFile();
  void textFile2(const std::string& path, const int64_t minPartitions) override;
  void send_textFile2(const std::string& path, const int64_t minPartitions);
  void recv_textFile2();
  void partitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions) override;
  void send_partitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions);
  void recv_partitionObjectFile();
  void partitionObjectFile4(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src) override;
  void send_partitionObjectFile4(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src);
  void recv_partitionObjectFile4();
  void partitionTextFile(const std::string& path, const int64_t first, const int64_t partitions) override;
  void send_partitionTextFile(const std::string& path, const int64_t first, const int64_t partitions);
  void recv_partitionTextFile();
  void partitionJsonFile4a(const std::string& path, const int64_t first, const int64_t partitions, const bool objectMapping) override;
  void send_partitionJsonFile4a(const std::string& path, const int64_t first, const int64_t partitions, const bool objectMapping);
  void recv_partitionJsonFile4a();
  void partitionJsonFile4b(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src) override;
  void send_partitionJsonFile4b(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src);
  void recv_partitionJsonFile4b();
  void saveAsObjectFile(const std::string& path, const int8_t compression, const int64_t first) override;
  void send_saveAsObjectFile(const std::string& path, const int8_t compression, const int64_t first);
  void recv_saveAsObjectFile();
  void saveAsTextFile(const std::string& path, const int64_t first) override;
  void send_saveAsTextFile(const std::string& path, const int64_t first);
  void recv_saveAsTextFile();
  void saveAsJsonFile(const std::string& path, const int64_t first, const bool pretty) override;
  void send_saveAsJsonFile(const std::string& path, const int64_t first, const bool pretty);
  void recv_saveAsJsonFile();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IIOModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IIOModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (IIOModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_loadClass(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadLibrary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countByPartition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionApproxSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_plainFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_plainFile3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_textFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_textFile2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionObjectFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionObjectFile4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionTextFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionJsonFile4a(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_partitionJsonFile4b(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsObjectFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsTextFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsJsonFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IIOModuleProcessor(::std::shared_ptr<IIOModuleIf> iface) :
    iface_(iface) {
    processMap_["loadClass"] = &IIOModuleProcessor::process_loadClass;
    processMap_["loadLibrary"] = &IIOModuleProcessor::process_loadLibrary;
    processMap_["partitionCount"] = &IIOModuleProcessor::process_partitionCount;
    processMap_["countByPartition"] = &IIOModuleProcessor::process_countByPartition;
    processMap_["partitionApproxSize"] = &IIOModuleProcessor::process_partitionApproxSize;
    processMap_["plainFile"] = &IIOModuleProcessor::process_plainFile;
    processMap_["plainFile3"] = &IIOModuleProcessor::process_plainFile3;
    processMap_["textFile"] = &IIOModuleProcessor::process_textFile;
    processMap_["textFile2"] = &IIOModuleProcessor::process_textFile2;
    processMap_["partitionObjectFile"] = &IIOModuleProcessor::process_partitionObjectFile;
    processMap_["partitionObjectFile4"] = &IIOModuleProcessor::process_partitionObjectFile4;
    processMap_["partitionTextFile"] = &IIOModuleProcessor::process_partitionTextFile;
    processMap_["partitionJsonFile4a"] = &IIOModuleProcessor::process_partitionJsonFile4a;
    processMap_["partitionJsonFile4b"] = &IIOModuleProcessor::process_partitionJsonFile4b;
    processMap_["saveAsObjectFile"] = &IIOModuleProcessor::process_saveAsObjectFile;
    processMap_["saveAsTextFile"] = &IIOModuleProcessor::process_saveAsTextFile;
    processMap_["saveAsJsonFile"] = &IIOModuleProcessor::process_saveAsJsonFile;
  }

  virtual ~IIOModuleProcessor() {}
};

class IIOModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IIOModuleProcessorFactory(const ::std::shared_ptr< IIOModuleIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< IIOModuleIfFactory > handlerFactory_;
};

class IIOModuleMultiface : virtual public IIOModuleIf {
 public:
  IIOModuleMultiface(std::vector<std::shared_ptr<IIOModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IIOModuleMultiface() {}
 protected:
  std::vector<std::shared_ptr<IIOModuleIf> > ifaces_;
  IIOModuleMultiface() {}
  void add(::std::shared_ptr<IIOModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void loadClass(const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadClass(src);
    }
    ifaces_[i]->loadClass(src);
  }

  void loadLibrary(const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadLibrary(path);
    }
    ifaces_[i]->loadLibrary(path);
  }

  int64_t partitionCount() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionCount();
    }
    return ifaces_[i]->partitionCount();
  }

  void countByPartition(std::vector<int64_t> & _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countByPartition(_return);
    }
    ifaces_[i]->countByPartition(_return);
    return;
  }

  int64_t partitionApproxSize() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionApproxSize();
    }
    return ifaces_[i]->partitionApproxSize();
  }

  void plainFile(const std::string& path, const int8_t delim) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->plainFile(path, delim);
    }
    ifaces_[i]->plainFile(path, delim);
  }

  void plainFile3(const std::string& path, const int64_t minPartitions, const int8_t delim) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->plainFile3(path, minPartitions, delim);
    }
    ifaces_[i]->plainFile3(path, minPartitions, delim);
  }

  void textFile(const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->textFile(path);
    }
    ifaces_[i]->textFile(path);
  }

  void textFile2(const std::string& path, const int64_t minPartitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->textFile2(path, minPartitions);
    }
    ifaces_[i]->textFile2(path, minPartitions);
  }

  void partitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionObjectFile(path, first, partitions);
    }
    ifaces_[i]->partitionObjectFile(path, first, partitions);
  }

  void partitionObjectFile4(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionObjectFile4(path, first, partitions, src);
    }
    ifaces_[i]->partitionObjectFile4(path, first, partitions, src);
  }

  void partitionTextFile(const std::string& path, const int64_t first, const int64_t partitions) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionTextFile(path, first, partitions);
    }
    ifaces_[i]->partitionTextFile(path, first, partitions);
  }

  void partitionJsonFile4a(const std::string& path, const int64_t first, const int64_t partitions, const bool objectMapping) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionJsonFile4a(path, first, partitions, objectMapping);
    }
    ifaces_[i]->partitionJsonFile4a(path, first, partitions, objectMapping);
  }

  void partitionJsonFile4b(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->partitionJsonFile4b(path, first, partitions, src);
    }
    ifaces_[i]->partitionJsonFile4b(path, first, partitions, src);
  }

  void saveAsObjectFile(const std::string& path, const int8_t compression, const int64_t first) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsObjectFile(path, compression, first);
    }
    ifaces_[i]->saveAsObjectFile(path, compression, first);
  }

  void saveAsTextFile(const std::string& path, const int64_t first) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsTextFile(path, first);
    }
    ifaces_[i]->saveAsTextFile(path, first);
  }

  void saveAsJsonFile(const std::string& path, const int64_t first, const bool pretty) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsJsonFile(path, first, pretty);
    }
    ifaces_[i]->saveAsJsonFile(path, first, pretty);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IIOModuleConcurrentClient : virtual public IIOModuleIf {
 public:
  IIOModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IIOModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void loadClass(const  ::ignis::rpc::ISource& src) override;
  int32_t send_loadClass(const  ::ignis::rpc::ISource& src);
  void recv_loadClass(const int32_t seqid);
  void loadLibrary(const std::string& path) override;
  int32_t send_loadLibrary(const std::string& path);
  void recv_loadLibrary(const int32_t seqid);
  int64_t partitionCount() override;
  int32_t send_partitionCount();
  int64_t recv_partitionCount(const int32_t seqid);
  void countByPartition(std::vector<int64_t> & _return) override;
  int32_t send_countByPartition();
  void recv_countByPartition(std::vector<int64_t> & _return, const int32_t seqid);
  int64_t partitionApproxSize() override;
  int32_t send_partitionApproxSize();
  int64_t recv_partitionApproxSize(const int32_t seqid);
  void plainFile(const std::string& path, const int8_t delim) override;
  int32_t send_plainFile(const std::string& path, const int8_t delim);
  void recv_plainFile(const int32_t seqid);
  void plainFile3(const std::string& path, const int64_t minPartitions, const int8_t delim) override;
  int32_t send_plainFile3(const std::string& path, const int64_t minPartitions, const int8_t delim);
  void recv_plainFile3(const int32_t seqid);
  void textFile(const std::string& path) override;
  int32_t send_textFile(const std::string& path);
  void recv_textFile(const int32_t seqid);
  void textFile2(const std::string& path, const int64_t minPartitions) override;
  int32_t send_textFile2(const std::string& path, const int64_t minPartitions);
  void recv_textFile2(const int32_t seqid);
  void partitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions) override;
  int32_t send_partitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions);
  void recv_partitionObjectFile(const int32_t seqid);
  void partitionObjectFile4(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src) override;
  int32_t send_partitionObjectFile4(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src);
  void recv_partitionObjectFile4(const int32_t seqid);
  void partitionTextFile(const std::string& path, const int64_t first, const int64_t partitions) override;
  int32_t send_partitionTextFile(const std::string& path, const int64_t first, const int64_t partitions);
  void recv_partitionTextFile(const int32_t seqid);
  void partitionJsonFile4a(const std::string& path, const int64_t first, const int64_t partitions, const bool objectMapping) override;
  int32_t send_partitionJsonFile4a(const std::string& path, const int64_t first, const int64_t partitions, const bool objectMapping);
  void recv_partitionJsonFile4a(const int32_t seqid);
  void partitionJsonFile4b(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src) override;
  int32_t send_partitionJsonFile4b(const std::string& path, const int64_t first, const int64_t partitions, const  ::ignis::rpc::ISource& src);
  void recv_partitionJsonFile4b(const int32_t seqid);
  void saveAsObjectFile(const std::string& path, const int8_t compression, const int64_t first) override;
  int32_t send_saveAsObjectFile(const std::string& path, const int8_t compression, const int64_t first);
  void recv_saveAsObjectFile(const int32_t seqid);
  void saveAsTextFile(const std::string& path, const int64_t first) override;
  int32_t send_saveAsTextFile(const std::string& path, const int64_t first);
  void recv_saveAsTextFile(const int32_t seqid);
  void saveAsJsonFile(const std::string& path, const int64_t first, const bool pretty) override;
  int32_t send_saveAsJsonFile(const std::string& path, const int64_t first, const bool pretty);
  void recv_saveAsJsonFile(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
