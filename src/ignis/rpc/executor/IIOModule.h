/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IIOModule_H
#define IIOModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IIOModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IIOModuleIf {
 public:
  virtual ~IIOModuleIf() {}
  virtual void textFile(const std::string& path, const int64_t partitions) = 0;
  virtual void openPartitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions) = 0;
  virtual void openPartitionObjectFileFunction(const  ::ignis::rpc::ISource& src, const std::string& path, const int64_t first, const int64_t partitions) = 0;
  virtual void saveAsPartitionObjectFile(const std::string& path, const int8_t compression, const int64_t first) = 0;
  virtual void saveAsTextFile(const std::string& path, const int64_t first) = 0;
  virtual void saveAsJsonFile(const std::string& path, const int64_t first) = 0;
};

class IIOModuleIfFactory {
 public:
  typedef IIOModuleIf Handler;

  virtual ~IIOModuleIfFactory() {}

  virtual IIOModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IIOModuleIf* /* handler */) = 0;
};

class IIOModuleIfSingletonFactory : virtual public IIOModuleIfFactory {
 public:
  IIOModuleIfSingletonFactory(const ::std::shared_ptr<IIOModuleIf>& iface) : iface_(iface) {}
  virtual ~IIOModuleIfSingletonFactory() {}

  virtual IIOModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IIOModuleIf* /* handler */) {}

 protected:
  ::std::shared_ptr<IIOModuleIf> iface_;
};

class IIOModuleNull : virtual public IIOModuleIf {
 public:
  virtual ~IIOModuleNull() {}
  void textFile(const std::string& /* path */, const int64_t /* partitions */) {
    return;
  }
  void openPartitionObjectFile(const std::string& /* path */, const int64_t /* first */, const int64_t /* partitions */) {
    return;
  }
  void openPartitionObjectFileFunction(const  ::ignis::rpc::ISource& /* src */, const std::string& /* path */, const int64_t /* first */, const int64_t /* partitions */) {
    return;
  }
  void saveAsPartitionObjectFile(const std::string& /* path */, const int8_t /* compression */, const int64_t /* first */) {
    return;
  }
  void saveAsTextFile(const std::string& /* path */, const int64_t /* first */) {
    return;
  }
  void saveAsJsonFile(const std::string& /* path */, const int64_t /* first */) {
    return;
  }
};

typedef struct _IIOModule_textFile_args__isset {
  _IIOModule_textFile_args__isset() : path(false), partitions(false) {}
  bool path :1;
  bool partitions :1;
} _IIOModule_textFile_args__isset;

class IIOModule_textFile_args {
 public:

  IIOModule_textFile_args(const IIOModule_textFile_args&);
  IIOModule_textFile_args& operator=(const IIOModule_textFile_args&);
  IIOModule_textFile_args() : path(), partitions(0) {
  }

  virtual ~IIOModule_textFile_args() noexcept;
  std::string path;
  int64_t partitions;

  _IIOModule_textFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_partitions(const int64_t val);

  bool operator == (const IIOModule_textFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const IIOModule_textFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_textFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_textFile_pargs {
 public:


  virtual ~IIOModule_textFile_pargs() noexcept;
  const std::string* path;
  const int64_t* partitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_textFile_result {
 public:

  IIOModule_textFile_result(const IIOModule_textFile_result&);
  IIOModule_textFile_result& operator=(const IIOModule_textFile_result&);
  IIOModule_textFile_result() {
  }

  virtual ~IIOModule_textFile_result() noexcept;

  bool operator == (const IIOModule_textFile_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IIOModule_textFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_textFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_textFile_presult {
 public:


  virtual ~IIOModule_textFile_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_openPartitionObjectFile_args__isset {
  _IIOModule_openPartitionObjectFile_args__isset() : path(false), first(false), partitions(false) {}
  bool path :1;
  bool first :1;
  bool partitions :1;
} _IIOModule_openPartitionObjectFile_args__isset;

class IIOModule_openPartitionObjectFile_args {
 public:

  IIOModule_openPartitionObjectFile_args(const IIOModule_openPartitionObjectFile_args&);
  IIOModule_openPartitionObjectFile_args& operator=(const IIOModule_openPartitionObjectFile_args&);
  IIOModule_openPartitionObjectFile_args() : path(), first(0), partitions(0) {
  }

  virtual ~IIOModule_openPartitionObjectFile_args() noexcept;
  std::string path;
  int64_t first;
  int64_t partitions;

  _IIOModule_openPartitionObjectFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  void __set_partitions(const int64_t val);

  bool operator == (const IIOModule_openPartitionObjectFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const IIOModule_openPartitionObjectFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_openPartitionObjectFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_openPartitionObjectFile_pargs {
 public:


  virtual ~IIOModule_openPartitionObjectFile_pargs() noexcept;
  const std::string* path;
  const int64_t* first;
  const int64_t* partitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_openPartitionObjectFile_result__isset {
  _IIOModule_openPartitionObjectFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_openPartitionObjectFile_result__isset;

class IIOModule_openPartitionObjectFile_result {
 public:

  IIOModule_openPartitionObjectFile_result(const IIOModule_openPartitionObjectFile_result&);
  IIOModule_openPartitionObjectFile_result& operator=(const IIOModule_openPartitionObjectFile_result&);
  IIOModule_openPartitionObjectFile_result() {
  }

  virtual ~IIOModule_openPartitionObjectFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_openPartitionObjectFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_openPartitionObjectFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_openPartitionObjectFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_openPartitionObjectFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_openPartitionObjectFile_presult__isset {
  _IIOModule_openPartitionObjectFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_openPartitionObjectFile_presult__isset;

class IIOModule_openPartitionObjectFile_presult {
 public:


  virtual ~IIOModule_openPartitionObjectFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_openPartitionObjectFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_openPartitionObjectFileFunction_args__isset {
  _IIOModule_openPartitionObjectFileFunction_args__isset() : src(false), path(false), first(false), partitions(false) {}
  bool src :1;
  bool path :1;
  bool first :1;
  bool partitions :1;
} _IIOModule_openPartitionObjectFileFunction_args__isset;

class IIOModule_openPartitionObjectFileFunction_args {
 public:

  IIOModule_openPartitionObjectFileFunction_args(const IIOModule_openPartitionObjectFileFunction_args&);
  IIOModule_openPartitionObjectFileFunction_args& operator=(const IIOModule_openPartitionObjectFileFunction_args&);
  IIOModule_openPartitionObjectFileFunction_args() : path(), first(0), partitions(0) {
  }

  virtual ~IIOModule_openPartitionObjectFileFunction_args() noexcept;
   ::ignis::rpc::ISource src;
  std::string path;
  int64_t first;
  int64_t partitions;

  _IIOModule_openPartitionObjectFileFunction_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  void __set_partitions(const int64_t val);

  bool operator == (const IIOModule_openPartitionObjectFileFunction_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const IIOModule_openPartitionObjectFileFunction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_openPartitionObjectFileFunction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_openPartitionObjectFileFunction_pargs {
 public:


  virtual ~IIOModule_openPartitionObjectFileFunction_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;
  const std::string* path;
  const int64_t* first;
  const int64_t* partitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_openPartitionObjectFileFunction_result__isset {
  _IIOModule_openPartitionObjectFileFunction_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_openPartitionObjectFileFunction_result__isset;

class IIOModule_openPartitionObjectFileFunction_result {
 public:

  IIOModule_openPartitionObjectFileFunction_result(const IIOModule_openPartitionObjectFileFunction_result&);
  IIOModule_openPartitionObjectFileFunction_result& operator=(const IIOModule_openPartitionObjectFileFunction_result&);
  IIOModule_openPartitionObjectFileFunction_result() {
  }

  virtual ~IIOModule_openPartitionObjectFileFunction_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_openPartitionObjectFileFunction_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_openPartitionObjectFileFunction_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_openPartitionObjectFileFunction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_openPartitionObjectFileFunction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_openPartitionObjectFileFunction_presult__isset {
  _IIOModule_openPartitionObjectFileFunction_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_openPartitionObjectFileFunction_presult__isset;

class IIOModule_openPartitionObjectFileFunction_presult {
 public:


  virtual ~IIOModule_openPartitionObjectFileFunction_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_openPartitionObjectFileFunction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_saveAsPartitionObjectFile_args__isset {
  _IIOModule_saveAsPartitionObjectFile_args__isset() : path(false), compression(false), first(false) {}
  bool path :1;
  bool compression :1;
  bool first :1;
} _IIOModule_saveAsPartitionObjectFile_args__isset;

class IIOModule_saveAsPartitionObjectFile_args {
 public:

  IIOModule_saveAsPartitionObjectFile_args(const IIOModule_saveAsPartitionObjectFile_args&);
  IIOModule_saveAsPartitionObjectFile_args& operator=(const IIOModule_saveAsPartitionObjectFile_args&);
  IIOModule_saveAsPartitionObjectFile_args() : path(), compression(0), first(0) {
  }

  virtual ~IIOModule_saveAsPartitionObjectFile_args() noexcept;
  std::string path;
  int8_t compression;
  int64_t first;

  _IIOModule_saveAsPartitionObjectFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_compression(const int8_t val);

  void __set_first(const int64_t val);

  bool operator == (const IIOModule_saveAsPartitionObjectFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(compression == rhs.compression))
      return false;
    if (!(first == rhs.first))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsPartitionObjectFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsPartitionObjectFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_saveAsPartitionObjectFile_pargs {
 public:


  virtual ~IIOModule_saveAsPartitionObjectFile_pargs() noexcept;
  const std::string* path;
  const int8_t* compression;
  const int64_t* first;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsPartitionObjectFile_result__isset {
  _IIOModule_saveAsPartitionObjectFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsPartitionObjectFile_result__isset;

class IIOModule_saveAsPartitionObjectFile_result {
 public:

  IIOModule_saveAsPartitionObjectFile_result(const IIOModule_saveAsPartitionObjectFile_result&);
  IIOModule_saveAsPartitionObjectFile_result& operator=(const IIOModule_saveAsPartitionObjectFile_result&);
  IIOModule_saveAsPartitionObjectFile_result() {
  }

  virtual ~IIOModule_saveAsPartitionObjectFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsPartitionObjectFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_saveAsPartitionObjectFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsPartitionObjectFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsPartitionObjectFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsPartitionObjectFile_presult__isset {
  _IIOModule_saveAsPartitionObjectFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsPartitionObjectFile_presult__isset;

class IIOModule_saveAsPartitionObjectFile_presult {
 public:


  virtual ~IIOModule_saveAsPartitionObjectFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsPartitionObjectFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_saveAsTextFile_args__isset {
  _IIOModule_saveAsTextFile_args__isset() : path(false), first(false) {}
  bool path :1;
  bool first :1;
} _IIOModule_saveAsTextFile_args__isset;

class IIOModule_saveAsTextFile_args {
 public:

  IIOModule_saveAsTextFile_args(const IIOModule_saveAsTextFile_args&);
  IIOModule_saveAsTextFile_args& operator=(const IIOModule_saveAsTextFile_args&);
  IIOModule_saveAsTextFile_args() : path(), first(0) {
  }

  virtual ~IIOModule_saveAsTextFile_args() noexcept;
  std::string path;
  int64_t first;

  _IIOModule_saveAsTextFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  bool operator == (const IIOModule_saveAsTextFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsTextFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsTextFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_saveAsTextFile_pargs {
 public:


  virtual ~IIOModule_saveAsTextFile_pargs() noexcept;
  const std::string* path;
  const int64_t* first;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsTextFile_result__isset {
  _IIOModule_saveAsTextFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsTextFile_result__isset;

class IIOModule_saveAsTextFile_result {
 public:

  IIOModule_saveAsTextFile_result(const IIOModule_saveAsTextFile_result&);
  IIOModule_saveAsTextFile_result& operator=(const IIOModule_saveAsTextFile_result&);
  IIOModule_saveAsTextFile_result() {
  }

  virtual ~IIOModule_saveAsTextFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsTextFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_saveAsTextFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsTextFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsTextFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsTextFile_presult__isset {
  _IIOModule_saveAsTextFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsTextFile_presult__isset;

class IIOModule_saveAsTextFile_presult {
 public:


  virtual ~IIOModule_saveAsTextFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsTextFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IIOModule_saveAsJsonFile_args__isset {
  _IIOModule_saveAsJsonFile_args__isset() : path(false), first(false) {}
  bool path :1;
  bool first :1;
} _IIOModule_saveAsJsonFile_args__isset;

class IIOModule_saveAsJsonFile_args {
 public:

  IIOModule_saveAsJsonFile_args(const IIOModule_saveAsJsonFile_args&);
  IIOModule_saveAsJsonFile_args& operator=(const IIOModule_saveAsJsonFile_args&);
  IIOModule_saveAsJsonFile_args() : path(), first(0) {
  }

  virtual ~IIOModule_saveAsJsonFile_args() noexcept;
  std::string path;
  int64_t first;

  _IIOModule_saveAsJsonFile_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_first(const int64_t val);

  bool operator == (const IIOModule_saveAsJsonFile_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(first == rhs.first))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsJsonFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsJsonFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IIOModule_saveAsJsonFile_pargs {
 public:


  virtual ~IIOModule_saveAsJsonFile_pargs() noexcept;
  const std::string* path;
  const int64_t* first;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsJsonFile_result__isset {
  _IIOModule_saveAsJsonFile_result__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsJsonFile_result__isset;

class IIOModule_saveAsJsonFile_result {
 public:

  IIOModule_saveAsJsonFile_result(const IIOModule_saveAsJsonFile_result&);
  IIOModule_saveAsJsonFile_result& operator=(const IIOModule_saveAsJsonFile_result&);
  IIOModule_saveAsJsonFile_result() {
  }

  virtual ~IIOModule_saveAsJsonFile_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsJsonFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IIOModule_saveAsJsonFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IIOModule_saveAsJsonFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IIOModule_saveAsJsonFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IIOModule_saveAsJsonFile_presult__isset {
  _IIOModule_saveAsJsonFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IIOModule_saveAsJsonFile_presult__isset;

class IIOModule_saveAsJsonFile_presult {
 public:


  virtual ~IIOModule_saveAsJsonFile_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IIOModule_saveAsJsonFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IIOModuleClient : virtual public IIOModuleIf {
 public:
  IIOModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IIOModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void textFile(const std::string& path, const int64_t partitions);
  void send_textFile(const std::string& path, const int64_t partitions);
  void recv_textFile();
  void openPartitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions);
  void send_openPartitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions);
  void recv_openPartitionObjectFile();
  void openPartitionObjectFileFunction(const  ::ignis::rpc::ISource& src, const std::string& path, const int64_t first, const int64_t partitions);
  void send_openPartitionObjectFileFunction(const  ::ignis::rpc::ISource& src, const std::string& path, const int64_t first, const int64_t partitions);
  void recv_openPartitionObjectFileFunction();
  void saveAsPartitionObjectFile(const std::string& path, const int8_t compression, const int64_t first);
  void send_saveAsPartitionObjectFile(const std::string& path, const int8_t compression, const int64_t first);
  void recv_saveAsPartitionObjectFile();
  void saveAsTextFile(const std::string& path, const int64_t first);
  void send_saveAsTextFile(const std::string& path, const int64_t first);
  void recv_saveAsTextFile();
  void saveAsJsonFile(const std::string& path, const int64_t first);
  void send_saveAsJsonFile(const std::string& path, const int64_t first);
  void recv_saveAsJsonFile();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IIOModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IIOModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IIOModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_textFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openPartitionObjectFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openPartitionObjectFileFunction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsPartitionObjectFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsTextFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsJsonFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IIOModuleProcessor(::std::shared_ptr<IIOModuleIf> iface) :
    iface_(iface) {
    processMap_["textFile"] = &IIOModuleProcessor::process_textFile;
    processMap_["openPartitionObjectFile"] = &IIOModuleProcessor::process_openPartitionObjectFile;
    processMap_["openPartitionObjectFileFunction"] = &IIOModuleProcessor::process_openPartitionObjectFileFunction;
    processMap_["saveAsPartitionObjectFile"] = &IIOModuleProcessor::process_saveAsPartitionObjectFile;
    processMap_["saveAsTextFile"] = &IIOModuleProcessor::process_saveAsTextFile;
    processMap_["saveAsJsonFile"] = &IIOModuleProcessor::process_saveAsJsonFile;
  }

  virtual ~IIOModuleProcessor() {}
};

class IIOModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IIOModuleProcessorFactory(const ::std::shared_ptr< IIOModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< IIOModuleIfFactory > handlerFactory_;
};

class IIOModuleMultiface : virtual public IIOModuleIf {
 public:
  IIOModuleMultiface(std::vector<std::shared_ptr<IIOModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IIOModuleMultiface() {}
 protected:
  std::vector<std::shared_ptr<IIOModuleIf> > ifaces_;
  IIOModuleMultiface() {}
  void add(::std::shared_ptr<IIOModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void textFile(const std::string& path, const int64_t partitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->textFile(path, partitions);
    }
    ifaces_[i]->textFile(path, partitions);
  }

  void openPartitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openPartitionObjectFile(path, first, partitions);
    }
    ifaces_[i]->openPartitionObjectFile(path, first, partitions);
  }

  void openPartitionObjectFileFunction(const  ::ignis::rpc::ISource& src, const std::string& path, const int64_t first, const int64_t partitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openPartitionObjectFileFunction(src, path, first, partitions);
    }
    ifaces_[i]->openPartitionObjectFileFunction(src, path, first, partitions);
  }

  void saveAsPartitionObjectFile(const std::string& path, const int8_t compression, const int64_t first) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsPartitionObjectFile(path, compression, first);
    }
    ifaces_[i]->saveAsPartitionObjectFile(path, compression, first);
  }

  void saveAsTextFile(const std::string& path, const int64_t first) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsTextFile(path, first);
    }
    ifaces_[i]->saveAsTextFile(path, first);
  }

  void saveAsJsonFile(const std::string& path, const int64_t first) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsJsonFile(path, first);
    }
    ifaces_[i]->saveAsJsonFile(path, first);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IIOModuleConcurrentClient : virtual public IIOModuleIf {
 public:
  IIOModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IIOModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void textFile(const std::string& path, const int64_t partitions);
  int32_t send_textFile(const std::string& path, const int64_t partitions);
  void recv_textFile(const int32_t seqid);
  void openPartitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions);
  int32_t send_openPartitionObjectFile(const std::string& path, const int64_t first, const int64_t partitions);
  void recv_openPartitionObjectFile(const int32_t seqid);
  void openPartitionObjectFileFunction(const  ::ignis::rpc::ISource& src, const std::string& path, const int64_t first, const int64_t partitions);
  int32_t send_openPartitionObjectFileFunction(const  ::ignis::rpc::ISource& src, const std::string& path, const int64_t first, const int64_t partitions);
  void recv_openPartitionObjectFileFunction(const int32_t seqid);
  void saveAsPartitionObjectFile(const std::string& path, const int8_t compression, const int64_t first);
  int32_t send_saveAsPartitionObjectFile(const std::string& path, const int8_t compression, const int64_t first);
  void recv_saveAsPartitionObjectFile(const int32_t seqid);
  void saveAsTextFile(const std::string& path, const int64_t first);
  int32_t send_saveAsTextFile(const std::string& path, const int64_t first);
  void recv_saveAsTextFile(const int32_t seqid);
  void saveAsJsonFile(const std::string& path, const int64_t first);
  int32_t send_saveAsJsonFile(const std::string& path, const int64_t first);
  void recv_saveAsJsonFile(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
