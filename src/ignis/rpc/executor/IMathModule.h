/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IMathModule_H
#define IMathModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IMathModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IMathModuleIf {
 public:
  virtual ~IMathModuleIf() {}
  virtual void sample(const bool withReplacement, const double fraction, const int32_t seed) = 0;
  virtual void takeSample(const bool withReplacement, const double fraction, const int32_t seed) = 0;
  virtual int64_t count() = 0;
  virtual void max(const  ::ignis::rpc::ISource& cmp) = 0;
  virtual void min(const  ::ignis::rpc::ISource& cmp) = 0;
};

class IMathModuleIfFactory {
 public:
  typedef IMathModuleIf Handler;

  virtual ~IMathModuleIfFactory() {}

  virtual IMathModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IMathModuleIf* /* handler */) = 0;
};

class IMathModuleIfSingletonFactory : virtual public IMathModuleIfFactory {
 public:
  IMathModuleIfSingletonFactory(const ::std::shared_ptr<IMathModuleIf>& iface) : iface_(iface) {}
  virtual ~IMathModuleIfSingletonFactory() {}

  virtual IMathModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IMathModuleIf* /* handler */) {}

 protected:
  ::std::shared_ptr<IMathModuleIf> iface_;
};

class IMathModuleNull : virtual public IMathModuleIf {
 public:
  virtual ~IMathModuleNull() {}
  void sample(const bool /* withReplacement */, const double /* fraction */, const int32_t /* seed */) {
    return;
  }
  void takeSample(const bool /* withReplacement */, const double /* fraction */, const int32_t /* seed */) {
    return;
  }
  int64_t count() {
    int64_t _return = 0;
    return _return;
  }
  void max(const  ::ignis::rpc::ISource& /* cmp */) {
    return;
  }
  void min(const  ::ignis::rpc::ISource& /* cmp */) {
    return;
  }
};

typedef struct _IMathModule_sample_args__isset {
  _IMathModule_sample_args__isset() : withReplacement(false), fraction(false), seed(false) {}
  bool withReplacement :1;
  bool fraction :1;
  bool seed :1;
} _IMathModule_sample_args__isset;

class IMathModule_sample_args {
 public:

  IMathModule_sample_args(const IMathModule_sample_args&);
  IMathModule_sample_args& operator=(const IMathModule_sample_args&);
  IMathModule_sample_args() : withReplacement(0), fraction(0), seed(0) {
  }

  virtual ~IMathModule_sample_args() noexcept;
  bool withReplacement;
  double fraction;
  int32_t seed;

  _IMathModule_sample_args__isset __isset;

  void __set_withReplacement(const bool val);

  void __set_fraction(const double val);

  void __set_seed(const int32_t val);

  bool operator == (const IMathModule_sample_args & rhs) const
  {
    if (!(withReplacement == rhs.withReplacement))
      return false;
    if (!(fraction == rhs.fraction))
      return false;
    if (!(seed == rhs.seed))
      return false;
    return true;
  }
  bool operator != (const IMathModule_sample_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_sample_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IMathModule_sample_pargs {
 public:


  virtual ~IMathModule_sample_pargs() noexcept;
  const bool* withReplacement;
  const double* fraction;
  const int32_t* seed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_sample_result__isset {
  _IMathModule_sample_result__isset() : ex(false) {}
  bool ex :1;
} _IMathModule_sample_result__isset;

class IMathModule_sample_result {
 public:

  IMathModule_sample_result(const IMathModule_sample_result&);
  IMathModule_sample_result& operator=(const IMathModule_sample_result&);
  IMathModule_sample_result() {
  }

  virtual ~IMathModule_sample_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_sample_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IMathModule_sample_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IMathModule_sample_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_sample_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_sample_presult__isset {
  _IMathModule_sample_presult__isset() : ex(false) {}
  bool ex :1;
} _IMathModule_sample_presult__isset;

class IMathModule_sample_presult {
 public:


  virtual ~IMathModule_sample_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_sample_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IMathModule_takeSample_args__isset {
  _IMathModule_takeSample_args__isset() : withReplacement(false), fraction(false), seed(false) {}
  bool withReplacement :1;
  bool fraction :1;
  bool seed :1;
} _IMathModule_takeSample_args__isset;

class IMathModule_takeSample_args {
 public:

  IMathModule_takeSample_args(const IMathModule_takeSample_args&);
  IMathModule_takeSample_args& operator=(const IMathModule_takeSample_args&);
  IMathModule_takeSample_args() : withReplacement(0), fraction(0), seed(0) {
  }

  virtual ~IMathModule_takeSample_args() noexcept;
  bool withReplacement;
  double fraction;
  int32_t seed;

  _IMathModule_takeSample_args__isset __isset;

  void __set_withReplacement(const bool val);

  void __set_fraction(const double val);

  void __set_seed(const int32_t val);

  bool operator == (const IMathModule_takeSample_args & rhs) const
  {
    if (!(withReplacement == rhs.withReplacement))
      return false;
    if (!(fraction == rhs.fraction))
      return false;
    if (!(seed == rhs.seed))
      return false;
    return true;
  }
  bool operator != (const IMathModule_takeSample_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_takeSample_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IMathModule_takeSample_pargs {
 public:


  virtual ~IMathModule_takeSample_pargs() noexcept;
  const bool* withReplacement;
  const double* fraction;
  const int32_t* seed;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_takeSample_result__isset {
  _IMathModule_takeSample_result__isset() : ex(false) {}
  bool ex :1;
} _IMathModule_takeSample_result__isset;

class IMathModule_takeSample_result {
 public:

  IMathModule_takeSample_result(const IMathModule_takeSample_result&);
  IMathModule_takeSample_result& operator=(const IMathModule_takeSample_result&);
  IMathModule_takeSample_result() {
  }

  virtual ~IMathModule_takeSample_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_takeSample_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IMathModule_takeSample_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IMathModule_takeSample_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_takeSample_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_takeSample_presult__isset {
  _IMathModule_takeSample_presult__isset() : ex(false) {}
  bool ex :1;
} _IMathModule_takeSample_presult__isset;

class IMathModule_takeSample_presult {
 public:


  virtual ~IMathModule_takeSample_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_takeSample_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IMathModule_count_args {
 public:

  IMathModule_count_args(const IMathModule_count_args&);
  IMathModule_count_args& operator=(const IMathModule_count_args&);
  IMathModule_count_args() {
  }

  virtual ~IMathModule_count_args() noexcept;

  bool operator == (const IMathModule_count_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IMathModule_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IMathModule_count_pargs {
 public:


  virtual ~IMathModule_count_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_count_result__isset {
  _IMathModule_count_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IMathModule_count_result__isset;

class IMathModule_count_result {
 public:

  IMathModule_count_result(const IMathModule_count_result&);
  IMathModule_count_result& operator=(const IMathModule_count_result&);
  IMathModule_count_result() : success(0) {
  }

  virtual ~IMathModule_count_result() noexcept;
  int64_t success;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_count_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IMathModule_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IMathModule_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_count_presult__isset {
  _IMathModule_count_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IMathModule_count_presult__isset;

class IMathModule_count_presult {
 public:


  virtual ~IMathModule_count_presult() noexcept;
  int64_t* success;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IMathModule_max_args__isset {
  _IMathModule_max_args__isset() : cmp(false) {}
  bool cmp :1;
} _IMathModule_max_args__isset;

class IMathModule_max_args {
 public:

  IMathModule_max_args(const IMathModule_max_args&);
  IMathModule_max_args& operator=(const IMathModule_max_args&);
  IMathModule_max_args() {
  }

  virtual ~IMathModule_max_args() noexcept;
   ::ignis::rpc::ISource cmp;

  _IMathModule_max_args__isset __isset;

  void __set_cmp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IMathModule_max_args & rhs) const
  {
    if (!(cmp == rhs.cmp))
      return false;
    return true;
  }
  bool operator != (const IMathModule_max_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_max_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IMathModule_max_pargs {
 public:


  virtual ~IMathModule_max_pargs() noexcept;
  const  ::ignis::rpc::ISource* cmp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_max_result__isset {
  _IMathModule_max_result__isset() : ex(false) {}
  bool ex :1;
} _IMathModule_max_result__isset;

class IMathModule_max_result {
 public:

  IMathModule_max_result(const IMathModule_max_result&);
  IMathModule_max_result& operator=(const IMathModule_max_result&);
  IMathModule_max_result() {
  }

  virtual ~IMathModule_max_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_max_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IMathModule_max_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IMathModule_max_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_max_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_max_presult__isset {
  _IMathModule_max_presult__isset() : ex(false) {}
  bool ex :1;
} _IMathModule_max_presult__isset;

class IMathModule_max_presult {
 public:


  virtual ~IMathModule_max_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_max_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IMathModule_min_args__isset {
  _IMathModule_min_args__isset() : cmp(false) {}
  bool cmp :1;
} _IMathModule_min_args__isset;

class IMathModule_min_args {
 public:

  IMathModule_min_args(const IMathModule_min_args&);
  IMathModule_min_args& operator=(const IMathModule_min_args&);
  IMathModule_min_args() {
  }

  virtual ~IMathModule_min_args() noexcept;
   ::ignis::rpc::ISource cmp;

  _IMathModule_min_args__isset __isset;

  void __set_cmp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IMathModule_min_args & rhs) const
  {
    if (!(cmp == rhs.cmp))
      return false;
    return true;
  }
  bool operator != (const IMathModule_min_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_min_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IMathModule_min_pargs {
 public:


  virtual ~IMathModule_min_pargs() noexcept;
  const  ::ignis::rpc::ISource* cmp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_min_result__isset {
  _IMathModule_min_result__isset() : ex(false) {}
  bool ex :1;
} _IMathModule_min_result__isset;

class IMathModule_min_result {
 public:

  IMathModule_min_result(const IMathModule_min_result&);
  IMathModule_min_result& operator=(const IMathModule_min_result&);
  IMathModule_min_result() {
  }

  virtual ~IMathModule_min_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_min_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IMathModule_min_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IMathModule_min_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IMathModule_min_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IMathModule_min_presult__isset {
  _IMathModule_min_presult__isset() : ex(false) {}
  bool ex :1;
} _IMathModule_min_presult__isset;

class IMathModule_min_presult {
 public:


  virtual ~IMathModule_min_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IMathModule_min_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IMathModuleClient : virtual public IMathModuleIf {
 public:
  IMathModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IMathModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sample(const bool withReplacement, const double fraction, const int32_t seed);
  void send_sample(const bool withReplacement, const double fraction, const int32_t seed);
  void recv_sample();
  void takeSample(const bool withReplacement, const double fraction, const int32_t seed);
  void send_takeSample(const bool withReplacement, const double fraction, const int32_t seed);
  void recv_takeSample();
  int64_t count();
  void send_count();
  int64_t recv_count();
  void max(const  ::ignis::rpc::ISource& cmp);
  void send_max(const  ::ignis::rpc::ISource& cmp);
  void recv_max();
  void min(const  ::ignis::rpc::ISource& cmp);
  void send_min(const  ::ignis::rpc::ISource& cmp);
  void recv_min();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IMathModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IMathModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IMathModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sample(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_takeSample(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_max(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_min(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IMathModuleProcessor(::std::shared_ptr<IMathModuleIf> iface) :
    iface_(iface) {
    processMap_["sample"] = &IMathModuleProcessor::process_sample;
    processMap_["takeSample"] = &IMathModuleProcessor::process_takeSample;
    processMap_["count"] = &IMathModuleProcessor::process_count;
    processMap_["max"] = &IMathModuleProcessor::process_max;
    processMap_["min"] = &IMathModuleProcessor::process_min;
  }

  virtual ~IMathModuleProcessor() {}
};

class IMathModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IMathModuleProcessorFactory(const ::std::shared_ptr< IMathModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< IMathModuleIfFactory > handlerFactory_;
};

class IMathModuleMultiface : virtual public IMathModuleIf {
 public:
  IMathModuleMultiface(std::vector<std::shared_ptr<IMathModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IMathModuleMultiface() {}
 protected:
  std::vector<std::shared_ptr<IMathModuleIf> > ifaces_;
  IMathModuleMultiface() {}
  void add(::std::shared_ptr<IMathModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sample(const bool withReplacement, const double fraction, const int32_t seed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sample(withReplacement, fraction, seed);
    }
    ifaces_[i]->sample(withReplacement, fraction, seed);
  }

  void takeSample(const bool withReplacement, const double fraction, const int32_t seed) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->takeSample(withReplacement, fraction, seed);
    }
    ifaces_[i]->takeSample(withReplacement, fraction, seed);
  }

  int64_t count() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count();
    }
    return ifaces_[i]->count();
  }

  void max(const  ::ignis::rpc::ISource& cmp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->max(cmp);
    }
    ifaces_[i]->max(cmp);
  }

  void min(const  ::ignis::rpc::ISource& cmp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->min(cmp);
    }
    ifaces_[i]->min(cmp);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IMathModuleConcurrentClient : virtual public IMathModuleIf {
 public:
  IMathModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IMathModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sample(const bool withReplacement, const double fraction, const int32_t seed);
  int32_t send_sample(const bool withReplacement, const double fraction, const int32_t seed);
  void recv_sample(const int32_t seqid);
  void takeSample(const bool withReplacement, const double fraction, const int32_t seed);
  int32_t send_takeSample(const bool withReplacement, const double fraction, const int32_t seed);
  void recv_takeSample(const int32_t seqid);
  int64_t count();
  int32_t send_count();
  int64_t recv_count(const int32_t seqid);
  void max(const  ::ignis::rpc::ISource& cmp);
  int32_t send_max(const  ::ignis::rpc::ISource& cmp);
  void recv_max(const int32_t seqid);
  void min(const  ::ignis::rpc::ISource& cmp);
  int32_t send_min(const  ::ignis::rpc::ISource& cmp);
  void recv_min(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
