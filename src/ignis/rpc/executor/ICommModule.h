/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ICommModule_H
#define ICommModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "ICommModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ICommModuleIf {
 public:
  virtual ~ICommModuleIf() {}
  virtual void createGroup(std::string& _return) = 0;
  virtual void joinGroupMembers(const std::string& group, const int64_t size) = 0;
  virtual void joinToGroup(const std::string& group, const std::string& id) = 0;
  virtual bool hasGroup(const std::string& id) = 0;
  virtual void destroyGroup(const std::string& id) = 0;
  virtual void destroyGroups() = 0;
  virtual void getPartitions(std::vector<std::string> & _return) = 0;
  virtual void setPartitions(const std::vector<std::string> & partitions) = 0;
  virtual void driverGather(const std::string& id) = 0;
  virtual void driverGather0(const std::string& id) = 0;
  virtual void driverScatter(const std::string& id) = 0;
};

class ICommModuleIfFactory {
 public:
  typedef ICommModuleIf Handler;

  virtual ~ICommModuleIfFactory() {}

  virtual ICommModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ICommModuleIf* /* handler */) = 0;
};

class ICommModuleIfSingletonFactory : virtual public ICommModuleIfFactory {
 public:
  ICommModuleIfSingletonFactory(const ::std::shared_ptr<ICommModuleIf>& iface) : iface_(iface) {}
  virtual ~ICommModuleIfSingletonFactory() {}

  virtual ICommModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ICommModuleIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ICommModuleIf> iface_;
};

class ICommModuleNull : virtual public ICommModuleIf {
 public:
  virtual ~ICommModuleNull() {}
  void createGroup(std::string& /* _return */) {
    return;
  }
  void joinGroupMembers(const std::string& /* group */, const int64_t /* size */) {
    return;
  }
  void joinToGroup(const std::string& /* group */, const std::string& /* id */) {
    return;
  }
  bool hasGroup(const std::string& /* id */) {
    bool _return = false;
    return _return;
  }
  void destroyGroup(const std::string& /* id */) {
    return;
  }
  void destroyGroups() {
    return;
  }
  void getPartitions(std::vector<std::string> & /* _return */) {
    return;
  }
  void setPartitions(const std::vector<std::string> & /* partitions */) {
    return;
  }
  void driverGather(const std::string& /* id */) {
    return;
  }
  void driverGather0(const std::string& /* id */) {
    return;
  }
  void driverScatter(const std::string& /* id */) {
    return;
  }
};


class ICommModule_createGroup_args {
 public:

  ICommModule_createGroup_args(const ICommModule_createGroup_args&);
  ICommModule_createGroup_args& operator=(const ICommModule_createGroup_args&);
  ICommModule_createGroup_args() {
  }

  virtual ~ICommModule_createGroup_args() noexcept;

  bool operator == (const ICommModule_createGroup_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ICommModule_createGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_createGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_createGroup_pargs {
 public:


  virtual ~ICommModule_createGroup_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_createGroup_result__isset {
  _ICommModule_createGroup_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ICommModule_createGroup_result__isset;

class ICommModule_createGroup_result {
 public:

  ICommModule_createGroup_result(const ICommModule_createGroup_result&);
  ICommModule_createGroup_result& operator=(const ICommModule_createGroup_result&);
  ICommModule_createGroup_result() : success() {
  }

  virtual ~ICommModule_createGroup_result() noexcept;
  std::string success;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_createGroup_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_createGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_createGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_createGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_createGroup_presult__isset {
  _ICommModule_createGroup_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ICommModule_createGroup_presult__isset;

class ICommModule_createGroup_presult {
 public:


  virtual ~ICommModule_createGroup_presult() noexcept;
  std::string* success;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_createGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICommModule_joinGroupMembers_args__isset {
  _ICommModule_joinGroupMembers_args__isset() : group(false), size(false) {}
  bool group :1;
  bool size :1;
} _ICommModule_joinGroupMembers_args__isset;

class ICommModule_joinGroupMembers_args {
 public:

  ICommModule_joinGroupMembers_args(const ICommModule_joinGroupMembers_args&);
  ICommModule_joinGroupMembers_args& operator=(const ICommModule_joinGroupMembers_args&);
  ICommModule_joinGroupMembers_args() : group(), size(0) {
  }

  virtual ~ICommModule_joinGroupMembers_args() noexcept;
  std::string group;
  int64_t size;

  _ICommModule_joinGroupMembers_args__isset __isset;

  void __set_group(const std::string& val);

  void __set_size(const int64_t val);

  bool operator == (const ICommModule_joinGroupMembers_args & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const ICommModule_joinGroupMembers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_joinGroupMembers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_joinGroupMembers_pargs {
 public:


  virtual ~ICommModule_joinGroupMembers_pargs() noexcept;
  const std::string* group;
  const int64_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_joinGroupMembers_result__isset {
  _ICommModule_joinGroupMembers_result__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_joinGroupMembers_result__isset;

class ICommModule_joinGroupMembers_result {
 public:

  ICommModule_joinGroupMembers_result(const ICommModule_joinGroupMembers_result&);
  ICommModule_joinGroupMembers_result& operator=(const ICommModule_joinGroupMembers_result&);
  ICommModule_joinGroupMembers_result() {
  }

  virtual ~ICommModule_joinGroupMembers_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_joinGroupMembers_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_joinGroupMembers_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_joinGroupMembers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_joinGroupMembers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_joinGroupMembers_presult__isset {
  _ICommModule_joinGroupMembers_presult__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_joinGroupMembers_presult__isset;

class ICommModule_joinGroupMembers_presult {
 public:


  virtual ~ICommModule_joinGroupMembers_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_joinGroupMembers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICommModule_joinToGroup_args__isset {
  _ICommModule_joinToGroup_args__isset() : group(false), id(false) {}
  bool group :1;
  bool id :1;
} _ICommModule_joinToGroup_args__isset;

class ICommModule_joinToGroup_args {
 public:

  ICommModule_joinToGroup_args(const ICommModule_joinToGroup_args&);
  ICommModule_joinToGroup_args& operator=(const ICommModule_joinToGroup_args&);
  ICommModule_joinToGroup_args() : group(), id() {
  }

  virtual ~ICommModule_joinToGroup_args() noexcept;
  std::string group;
  std::string id;

  _ICommModule_joinToGroup_args__isset __isset;

  void __set_group(const std::string& val);

  void __set_id(const std::string& val);

  bool operator == (const ICommModule_joinToGroup_args & rhs) const
  {
    if (!(group == rhs.group))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ICommModule_joinToGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_joinToGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_joinToGroup_pargs {
 public:


  virtual ~ICommModule_joinToGroup_pargs() noexcept;
  const std::string* group;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_joinToGroup_result__isset {
  _ICommModule_joinToGroup_result__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_joinToGroup_result__isset;

class ICommModule_joinToGroup_result {
 public:

  ICommModule_joinToGroup_result(const ICommModule_joinToGroup_result&);
  ICommModule_joinToGroup_result& operator=(const ICommModule_joinToGroup_result&);
  ICommModule_joinToGroup_result() {
  }

  virtual ~ICommModule_joinToGroup_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_joinToGroup_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_joinToGroup_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_joinToGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_joinToGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_joinToGroup_presult__isset {
  _ICommModule_joinToGroup_presult__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_joinToGroup_presult__isset;

class ICommModule_joinToGroup_presult {
 public:


  virtual ~ICommModule_joinToGroup_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_joinToGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICommModule_hasGroup_args__isset {
  _ICommModule_hasGroup_args__isset() : id(false) {}
  bool id :1;
} _ICommModule_hasGroup_args__isset;

class ICommModule_hasGroup_args {
 public:

  ICommModule_hasGroup_args(const ICommModule_hasGroup_args&);
  ICommModule_hasGroup_args& operator=(const ICommModule_hasGroup_args&);
  ICommModule_hasGroup_args() : id() {
  }

  virtual ~ICommModule_hasGroup_args() noexcept;
  std::string id;

  _ICommModule_hasGroup_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const ICommModule_hasGroup_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ICommModule_hasGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_hasGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_hasGroup_pargs {
 public:


  virtual ~ICommModule_hasGroup_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_hasGroup_result__isset {
  _ICommModule_hasGroup_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ICommModule_hasGroup_result__isset;

class ICommModule_hasGroup_result {
 public:

  ICommModule_hasGroup_result(const ICommModule_hasGroup_result&);
  ICommModule_hasGroup_result& operator=(const ICommModule_hasGroup_result&);
  ICommModule_hasGroup_result() : success(0) {
  }

  virtual ~ICommModule_hasGroup_result() noexcept;
  bool success;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_hasGroup_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_hasGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_hasGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_hasGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_hasGroup_presult__isset {
  _ICommModule_hasGroup_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ICommModule_hasGroup_presult__isset;

class ICommModule_hasGroup_presult {
 public:


  virtual ~ICommModule_hasGroup_presult() noexcept;
  bool* success;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_hasGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICommModule_destroyGroup_args__isset {
  _ICommModule_destroyGroup_args__isset() : id(false) {}
  bool id :1;
} _ICommModule_destroyGroup_args__isset;

class ICommModule_destroyGroup_args {
 public:

  ICommModule_destroyGroup_args(const ICommModule_destroyGroup_args&);
  ICommModule_destroyGroup_args& operator=(const ICommModule_destroyGroup_args&);
  ICommModule_destroyGroup_args() : id() {
  }

  virtual ~ICommModule_destroyGroup_args() noexcept;
  std::string id;

  _ICommModule_destroyGroup_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const ICommModule_destroyGroup_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ICommModule_destroyGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_destroyGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_destroyGroup_pargs {
 public:


  virtual ~ICommModule_destroyGroup_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_destroyGroup_result__isset {
  _ICommModule_destroyGroup_result__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_destroyGroup_result__isset;

class ICommModule_destroyGroup_result {
 public:

  ICommModule_destroyGroup_result(const ICommModule_destroyGroup_result&);
  ICommModule_destroyGroup_result& operator=(const ICommModule_destroyGroup_result&);
  ICommModule_destroyGroup_result() {
  }

  virtual ~ICommModule_destroyGroup_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_destroyGroup_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_destroyGroup_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_destroyGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_destroyGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_destroyGroup_presult__isset {
  _ICommModule_destroyGroup_presult__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_destroyGroup_presult__isset;

class ICommModule_destroyGroup_presult {
 public:


  virtual ~ICommModule_destroyGroup_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_destroyGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ICommModule_destroyGroups_args {
 public:

  ICommModule_destroyGroups_args(const ICommModule_destroyGroups_args&);
  ICommModule_destroyGroups_args& operator=(const ICommModule_destroyGroups_args&);
  ICommModule_destroyGroups_args() {
  }

  virtual ~ICommModule_destroyGroups_args() noexcept;

  bool operator == (const ICommModule_destroyGroups_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ICommModule_destroyGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_destroyGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_destroyGroups_pargs {
 public:


  virtual ~ICommModule_destroyGroups_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_destroyGroups_result__isset {
  _ICommModule_destroyGroups_result__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_destroyGroups_result__isset;

class ICommModule_destroyGroups_result {
 public:

  ICommModule_destroyGroups_result(const ICommModule_destroyGroups_result&);
  ICommModule_destroyGroups_result& operator=(const ICommModule_destroyGroups_result&);
  ICommModule_destroyGroups_result() {
  }

  virtual ~ICommModule_destroyGroups_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_destroyGroups_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_destroyGroups_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_destroyGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_destroyGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_destroyGroups_presult__isset {
  _ICommModule_destroyGroups_presult__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_destroyGroups_presult__isset;

class ICommModule_destroyGroups_presult {
 public:


  virtual ~ICommModule_destroyGroups_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_destroyGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ICommModule_getPartitions_args {
 public:

  ICommModule_getPartitions_args(const ICommModule_getPartitions_args&);
  ICommModule_getPartitions_args& operator=(const ICommModule_getPartitions_args&);
  ICommModule_getPartitions_args() {
  }

  virtual ~ICommModule_getPartitions_args() noexcept;

  bool operator == (const ICommModule_getPartitions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ICommModule_getPartitions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_getPartitions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_getPartitions_pargs {
 public:


  virtual ~ICommModule_getPartitions_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_getPartitions_result__isset {
  _ICommModule_getPartitions_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ICommModule_getPartitions_result__isset;

class ICommModule_getPartitions_result {
 public:

  ICommModule_getPartitions_result(const ICommModule_getPartitions_result&);
  ICommModule_getPartitions_result& operator=(const ICommModule_getPartitions_result&);
  ICommModule_getPartitions_result() {
  }

  virtual ~ICommModule_getPartitions_result() noexcept;
  std::vector<std::string>  success;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_getPartitions_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_getPartitions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_getPartitions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_getPartitions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_getPartitions_presult__isset {
  _ICommModule_getPartitions_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ICommModule_getPartitions_presult__isset;

class ICommModule_getPartitions_presult {
 public:


  virtual ~ICommModule_getPartitions_presult() noexcept;
  std::vector<std::string> * success;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_getPartitions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICommModule_setPartitions_args__isset {
  _ICommModule_setPartitions_args__isset() : partitions(false) {}
  bool partitions :1;
} _ICommModule_setPartitions_args__isset;

class ICommModule_setPartitions_args {
 public:

  ICommModule_setPartitions_args(const ICommModule_setPartitions_args&);
  ICommModule_setPartitions_args& operator=(const ICommModule_setPartitions_args&);
  ICommModule_setPartitions_args() {
  }

  virtual ~ICommModule_setPartitions_args() noexcept;
  std::vector<std::string>  partitions;

  _ICommModule_setPartitions_args__isset __isset;

  void __set_partitions(const std::vector<std::string> & val);

  bool operator == (const ICommModule_setPartitions_args & rhs) const
  {
    if (!(partitions == rhs.partitions))
      return false;
    return true;
  }
  bool operator != (const ICommModule_setPartitions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_setPartitions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_setPartitions_pargs {
 public:


  virtual ~ICommModule_setPartitions_pargs() noexcept;
  const std::vector<std::string> * partitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_setPartitions_result__isset {
  _ICommModule_setPartitions_result__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_setPartitions_result__isset;

class ICommModule_setPartitions_result {
 public:

  ICommModule_setPartitions_result(const ICommModule_setPartitions_result&);
  ICommModule_setPartitions_result& operator=(const ICommModule_setPartitions_result&);
  ICommModule_setPartitions_result() {
  }

  virtual ~ICommModule_setPartitions_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_setPartitions_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_setPartitions_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_setPartitions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_setPartitions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_setPartitions_presult__isset {
  _ICommModule_setPartitions_presult__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_setPartitions_presult__isset;

class ICommModule_setPartitions_presult {
 public:


  virtual ~ICommModule_setPartitions_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_setPartitions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICommModule_driverGather_args__isset {
  _ICommModule_driverGather_args__isset() : id(false) {}
  bool id :1;
} _ICommModule_driverGather_args__isset;

class ICommModule_driverGather_args {
 public:

  ICommModule_driverGather_args(const ICommModule_driverGather_args&);
  ICommModule_driverGather_args& operator=(const ICommModule_driverGather_args&);
  ICommModule_driverGather_args() : id() {
  }

  virtual ~ICommModule_driverGather_args() noexcept;
  std::string id;

  _ICommModule_driverGather_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const ICommModule_driverGather_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ICommModule_driverGather_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_driverGather_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_driverGather_pargs {
 public:


  virtual ~ICommModule_driverGather_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_driverGather_result__isset {
  _ICommModule_driverGather_result__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_driverGather_result__isset;

class ICommModule_driverGather_result {
 public:

  ICommModule_driverGather_result(const ICommModule_driverGather_result&);
  ICommModule_driverGather_result& operator=(const ICommModule_driverGather_result&);
  ICommModule_driverGather_result() {
  }

  virtual ~ICommModule_driverGather_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_driverGather_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_driverGather_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_driverGather_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_driverGather_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_driverGather_presult__isset {
  _ICommModule_driverGather_presult__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_driverGather_presult__isset;

class ICommModule_driverGather_presult {
 public:


  virtual ~ICommModule_driverGather_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_driverGather_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICommModule_driverGather0_args__isset {
  _ICommModule_driverGather0_args__isset() : id(false) {}
  bool id :1;
} _ICommModule_driverGather0_args__isset;

class ICommModule_driverGather0_args {
 public:

  ICommModule_driverGather0_args(const ICommModule_driverGather0_args&);
  ICommModule_driverGather0_args& operator=(const ICommModule_driverGather0_args&);
  ICommModule_driverGather0_args() : id() {
  }

  virtual ~ICommModule_driverGather0_args() noexcept;
  std::string id;

  _ICommModule_driverGather0_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const ICommModule_driverGather0_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ICommModule_driverGather0_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_driverGather0_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_driverGather0_pargs {
 public:


  virtual ~ICommModule_driverGather0_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_driverGather0_result__isset {
  _ICommModule_driverGather0_result__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_driverGather0_result__isset;

class ICommModule_driverGather0_result {
 public:

  ICommModule_driverGather0_result(const ICommModule_driverGather0_result&);
  ICommModule_driverGather0_result& operator=(const ICommModule_driverGather0_result&);
  ICommModule_driverGather0_result() {
  }

  virtual ~ICommModule_driverGather0_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_driverGather0_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_driverGather0_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_driverGather0_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_driverGather0_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_driverGather0_presult__isset {
  _ICommModule_driverGather0_presult__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_driverGather0_presult__isset;

class ICommModule_driverGather0_presult {
 public:


  virtual ~ICommModule_driverGather0_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_driverGather0_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ICommModule_driverScatter_args__isset {
  _ICommModule_driverScatter_args__isset() : id(false) {}
  bool id :1;
} _ICommModule_driverScatter_args__isset;

class ICommModule_driverScatter_args {
 public:

  ICommModule_driverScatter_args(const ICommModule_driverScatter_args&);
  ICommModule_driverScatter_args& operator=(const ICommModule_driverScatter_args&);
  ICommModule_driverScatter_args() : id() {
  }

  virtual ~ICommModule_driverScatter_args() noexcept;
  std::string id;

  _ICommModule_driverScatter_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const ICommModule_driverScatter_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ICommModule_driverScatter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_driverScatter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ICommModule_driverScatter_pargs {
 public:


  virtual ~ICommModule_driverScatter_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_driverScatter_result__isset {
  _ICommModule_driverScatter_result__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_driverScatter_result__isset;

class ICommModule_driverScatter_result {
 public:

  ICommModule_driverScatter_result(const ICommModule_driverScatter_result&);
  ICommModule_driverScatter_result& operator=(const ICommModule_driverScatter_result&);
  ICommModule_driverScatter_result() {
  }

  virtual ~ICommModule_driverScatter_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_driverScatter_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const ICommModule_driverScatter_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ICommModule_driverScatter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ICommModule_driverScatter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ICommModule_driverScatter_presult__isset {
  _ICommModule_driverScatter_presult__isset() : ex(false) {}
  bool ex :1;
} _ICommModule_driverScatter_presult__isset;

class ICommModule_driverScatter_presult {
 public:


  virtual ~ICommModule_driverScatter_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _ICommModule_driverScatter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ICommModuleClient : virtual public ICommModuleIf {
 public:
  ICommModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ICommModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createGroup(std::string& _return);
  void send_createGroup();
  void recv_createGroup(std::string& _return);
  void joinGroupMembers(const std::string& group, const int64_t size);
  void send_joinGroupMembers(const std::string& group, const int64_t size);
  void recv_joinGroupMembers();
  void joinToGroup(const std::string& group, const std::string& id);
  void send_joinToGroup(const std::string& group, const std::string& id);
  void recv_joinToGroup();
  bool hasGroup(const std::string& id);
  void send_hasGroup(const std::string& id);
  bool recv_hasGroup();
  void destroyGroup(const std::string& id);
  void send_destroyGroup(const std::string& id);
  void recv_destroyGroup();
  void destroyGroups();
  void send_destroyGroups();
  void recv_destroyGroups();
  void getPartitions(std::vector<std::string> & _return);
  void send_getPartitions();
  void recv_getPartitions(std::vector<std::string> & _return);
  void setPartitions(const std::vector<std::string> & partitions);
  void send_setPartitions(const std::vector<std::string> & partitions);
  void recv_setPartitions();
  void driverGather(const std::string& id);
  void send_driverGather(const std::string& id);
  void recv_driverGather();
  void driverGather0(const std::string& id);
  void send_driverGather0(const std::string& id);
  void recv_driverGather0();
  void driverScatter(const std::string& id);
  void send_driverScatter(const std::string& id);
  void recv_driverScatter();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ICommModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ICommModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ICommModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_joinGroupMembers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_joinToGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hasGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_destroyGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_destroyGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPartitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPartitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_driverGather(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_driverGather0(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_driverScatter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ICommModuleProcessor(::std::shared_ptr<ICommModuleIf> iface) :
    iface_(iface) {
    processMap_["createGroup"] = &ICommModuleProcessor::process_createGroup;
    processMap_["joinGroupMembers"] = &ICommModuleProcessor::process_joinGroupMembers;
    processMap_["joinToGroup"] = &ICommModuleProcessor::process_joinToGroup;
    processMap_["hasGroup"] = &ICommModuleProcessor::process_hasGroup;
    processMap_["destroyGroup"] = &ICommModuleProcessor::process_destroyGroup;
    processMap_["destroyGroups"] = &ICommModuleProcessor::process_destroyGroups;
    processMap_["getPartitions"] = &ICommModuleProcessor::process_getPartitions;
    processMap_["setPartitions"] = &ICommModuleProcessor::process_setPartitions;
    processMap_["driverGather"] = &ICommModuleProcessor::process_driverGather;
    processMap_["driverGather0"] = &ICommModuleProcessor::process_driverGather0;
    processMap_["driverScatter"] = &ICommModuleProcessor::process_driverScatter;
  }

  virtual ~ICommModuleProcessor() {}
};

class ICommModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ICommModuleProcessorFactory(const ::std::shared_ptr< ICommModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ICommModuleIfFactory > handlerFactory_;
};

class ICommModuleMultiface : virtual public ICommModuleIf {
 public:
  ICommModuleMultiface(std::vector<std::shared_ptr<ICommModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ICommModuleMultiface() {}
 protected:
  std::vector<std::shared_ptr<ICommModuleIf> > ifaces_;
  ICommModuleMultiface() {}
  void add(::std::shared_ptr<ICommModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createGroup(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createGroup(_return);
    }
    ifaces_[i]->createGroup(_return);
    return;
  }

  void joinGroupMembers(const std::string& group, const int64_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->joinGroupMembers(group, size);
    }
    ifaces_[i]->joinGroupMembers(group, size);
  }

  void joinToGroup(const std::string& group, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->joinToGroup(group, id);
    }
    ifaces_[i]->joinToGroup(group, id);
  }

  bool hasGroup(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hasGroup(id);
    }
    return ifaces_[i]->hasGroup(id);
  }

  void destroyGroup(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->destroyGroup(id);
    }
    ifaces_[i]->destroyGroup(id);
  }

  void destroyGroups() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->destroyGroups();
    }
    ifaces_[i]->destroyGroups();
  }

  void getPartitions(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPartitions(_return);
    }
    ifaces_[i]->getPartitions(_return);
    return;
  }

  void setPartitions(const std::vector<std::string> & partitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPartitions(partitions);
    }
    ifaces_[i]->setPartitions(partitions);
  }

  void driverGather(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->driverGather(id);
    }
    ifaces_[i]->driverGather(id);
  }

  void driverGather0(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->driverGather0(id);
    }
    ifaces_[i]->driverGather0(id);
  }

  void driverScatter(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->driverScatter(id);
    }
    ifaces_[i]->driverScatter(id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ICommModuleConcurrentClient : virtual public ICommModuleIf {
 public:
  ICommModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ICommModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createGroup(std::string& _return);
  int32_t send_createGroup();
  void recv_createGroup(std::string& _return, const int32_t seqid);
  void joinGroupMembers(const std::string& group, const int64_t size);
  int32_t send_joinGroupMembers(const std::string& group, const int64_t size);
  void recv_joinGroupMembers(const int32_t seqid);
  void joinToGroup(const std::string& group, const std::string& id);
  int32_t send_joinToGroup(const std::string& group, const std::string& id);
  void recv_joinToGroup(const int32_t seqid);
  bool hasGroup(const std::string& id);
  int32_t send_hasGroup(const std::string& id);
  bool recv_hasGroup(const int32_t seqid);
  void destroyGroup(const std::string& id);
  int32_t send_destroyGroup(const std::string& id);
  void recv_destroyGroup(const int32_t seqid);
  void destroyGroups();
  int32_t send_destroyGroups();
  void recv_destroyGroups(const int32_t seqid);
  void getPartitions(std::vector<std::string> & _return);
  int32_t send_getPartitions();
  void recv_getPartitions(std::vector<std::string> & _return, const int32_t seqid);
  void setPartitions(const std::vector<std::string> & partitions);
  int32_t send_setPartitions(const std::vector<std::string> & partitions);
  void recv_setPartitions(const int32_t seqid);
  void driverGather(const std::string& id);
  int32_t send_driverGather(const std::string& id);
  void recv_driverGather(const int32_t seqid);
  void driverGather0(const std::string& id);
  int32_t send_driverGather0(const std::string& id);
  void recv_driverGather0(const int32_t seqid);
  void driverScatter(const std::string& id);
  int32_t send_driverScatter(const std::string& id);
  void recv_driverScatter(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
