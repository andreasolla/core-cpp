/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IExecutorServerModule_H
#define IExecutorServerModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IExecutorServerModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IExecutorServerModuleIf {
 public:
  virtual ~IExecutorServerModuleIf() {}
  virtual void start(const std::map<std::string, std::string> & properties, const std::map<std::string, std::string> & env) = 0;
  virtual void stop() = 0;
  virtual bool test() = 0;
};

class IExecutorServerModuleIfFactory {
 public:
  typedef IExecutorServerModuleIf Handler;

  virtual ~IExecutorServerModuleIfFactory() {}

  virtual IExecutorServerModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IExecutorServerModuleIf* /* handler */) = 0;
  };

class IExecutorServerModuleIfSingletonFactory : virtual public IExecutorServerModuleIfFactory {
 public:
  IExecutorServerModuleIfSingletonFactory(const ::std::shared_ptr<IExecutorServerModuleIf>& iface) : iface_(iface) {}
  virtual ~IExecutorServerModuleIfSingletonFactory() {}

  virtual IExecutorServerModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(IExecutorServerModuleIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<IExecutorServerModuleIf> iface_;
};

class IExecutorServerModuleNull : virtual public IExecutorServerModuleIf {
 public:
  virtual ~IExecutorServerModuleNull() {}
  void start(const std::map<std::string, std::string> & /* properties */, const std::map<std::string, std::string> & /* env */) override {
    return;
  }
  void stop() override {
    return;
  }
  bool test() override {
    bool _return = false;
    return _return;
  }
};

typedef struct _IExecutorServerModule_start_args__isset {
  _IExecutorServerModule_start_args__isset() : properties(false), env(false) {}
  bool properties :1;
  bool env :1;
} _IExecutorServerModule_start_args__isset;

class IExecutorServerModule_start_args {
 public:

  IExecutorServerModule_start_args(const IExecutorServerModule_start_args&);
  IExecutorServerModule_start_args& operator=(const IExecutorServerModule_start_args&);
  IExecutorServerModule_start_args() noexcept {
  }

  virtual ~IExecutorServerModule_start_args() noexcept;
  std::map<std::string, std::string>  properties;
  std::map<std::string, std::string>  env;

  _IExecutorServerModule_start_args__isset __isset;

  void __set_properties(const std::map<std::string, std::string> & val);

  void __set_env(const std::map<std::string, std::string> & val);

  bool operator == (const IExecutorServerModule_start_args & rhs) const
  {
    if (!(properties == rhs.properties))
      return false;
    if (!(env == rhs.env))
      return false;
    return true;
  }
  bool operator != (const IExecutorServerModule_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IExecutorServerModule_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IExecutorServerModule_start_pargs {
 public:


  virtual ~IExecutorServerModule_start_pargs() noexcept;
  const std::map<std::string, std::string> * properties;
  const std::map<std::string, std::string> * env;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IExecutorServerModule_start_result__isset {
  _IExecutorServerModule_start_result__isset() : ex(false) {}
  bool ex :1;
} _IExecutorServerModule_start_result__isset;

class IExecutorServerModule_start_result {
 public:

  IExecutorServerModule_start_result(const IExecutorServerModule_start_result&);
  IExecutorServerModule_start_result& operator=(const IExecutorServerModule_start_result&);
  IExecutorServerModule_start_result() noexcept {
  }

  virtual ~IExecutorServerModule_start_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IExecutorServerModule_start_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IExecutorServerModule_start_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IExecutorServerModule_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IExecutorServerModule_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IExecutorServerModule_start_presult__isset {
  _IExecutorServerModule_start_presult__isset() : ex(false) {}
  bool ex :1;
} _IExecutorServerModule_start_presult__isset;

class IExecutorServerModule_start_presult {
 public:


  virtual ~IExecutorServerModule_start_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IExecutorServerModule_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IExecutorServerModule_stop_args {
 public:

  IExecutorServerModule_stop_args(const IExecutorServerModule_stop_args&) noexcept;
  IExecutorServerModule_stop_args& operator=(const IExecutorServerModule_stop_args&) noexcept;
  IExecutorServerModule_stop_args() noexcept {
  }

  virtual ~IExecutorServerModule_stop_args() noexcept;

  bool operator == (const IExecutorServerModule_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IExecutorServerModule_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IExecutorServerModule_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IExecutorServerModule_stop_pargs {
 public:


  virtual ~IExecutorServerModule_stop_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IExecutorServerModule_stop_result__isset {
  _IExecutorServerModule_stop_result__isset() : ex(false) {}
  bool ex :1;
} _IExecutorServerModule_stop_result__isset;

class IExecutorServerModule_stop_result {
 public:

  IExecutorServerModule_stop_result(const IExecutorServerModule_stop_result&);
  IExecutorServerModule_stop_result& operator=(const IExecutorServerModule_stop_result&);
  IExecutorServerModule_stop_result() noexcept {
  }

  virtual ~IExecutorServerModule_stop_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IExecutorServerModule_stop_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IExecutorServerModule_stop_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IExecutorServerModule_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IExecutorServerModule_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IExecutorServerModule_stop_presult__isset {
  _IExecutorServerModule_stop_presult__isset() : ex(false) {}
  bool ex :1;
} _IExecutorServerModule_stop_presult__isset;

class IExecutorServerModule_stop_presult {
 public:


  virtual ~IExecutorServerModule_stop_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IExecutorServerModule_stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IExecutorServerModule_test_args {
 public:

  IExecutorServerModule_test_args(const IExecutorServerModule_test_args&) noexcept;
  IExecutorServerModule_test_args& operator=(const IExecutorServerModule_test_args&) noexcept;
  IExecutorServerModule_test_args() noexcept {
  }

  virtual ~IExecutorServerModule_test_args() noexcept;

  bool operator == (const IExecutorServerModule_test_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IExecutorServerModule_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IExecutorServerModule_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IExecutorServerModule_test_pargs {
 public:


  virtual ~IExecutorServerModule_test_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IExecutorServerModule_test_result__isset {
  _IExecutorServerModule_test_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IExecutorServerModule_test_result__isset;

class IExecutorServerModule_test_result {
 public:

  IExecutorServerModule_test_result(const IExecutorServerModule_test_result&);
  IExecutorServerModule_test_result& operator=(const IExecutorServerModule_test_result&);
  IExecutorServerModule_test_result() noexcept
                                    : success(0) {
  }

  virtual ~IExecutorServerModule_test_result() noexcept;
  bool success;
   ::ignis::rpc::IExecutorException ex;

  _IExecutorServerModule_test_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IExecutorServerModule_test_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IExecutorServerModule_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IExecutorServerModule_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IExecutorServerModule_test_presult__isset {
  _IExecutorServerModule_test_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IExecutorServerModule_test_presult__isset;

class IExecutorServerModule_test_presult {
 public:


  virtual ~IExecutorServerModule_test_presult() noexcept;
  bool* success;
   ::ignis::rpc::IExecutorException ex;

  _IExecutorServerModule_test_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IExecutorServerModuleClient : virtual public IExecutorServerModuleIf {
 public:
  IExecutorServerModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IExecutorServerModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start(const std::map<std::string, std::string> & properties, const std::map<std::string, std::string> & env) override;
  void send_start(const std::map<std::string, std::string> & properties, const std::map<std::string, std::string> & env);
  void recv_start();
  void stop() override;
  void send_stop();
  void recv_stop();
  bool test() override;
  void send_test();
  bool recv_test();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IExecutorServerModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IExecutorServerModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (IExecutorServerModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IExecutorServerModuleProcessor(::std::shared_ptr<IExecutorServerModuleIf> iface) :
    iface_(iface) {
    processMap_["start"] = &IExecutorServerModuleProcessor::process_start;
    processMap_["stop"] = &IExecutorServerModuleProcessor::process_stop;
    processMap_["test"] = &IExecutorServerModuleProcessor::process_test;
  }

  virtual ~IExecutorServerModuleProcessor() {}
};

class IExecutorServerModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IExecutorServerModuleProcessorFactory(const ::std::shared_ptr< IExecutorServerModuleIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< IExecutorServerModuleIfFactory > handlerFactory_;
};

class IExecutorServerModuleMultiface : virtual public IExecutorServerModuleIf {
 public:
  IExecutorServerModuleMultiface(std::vector<std::shared_ptr<IExecutorServerModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IExecutorServerModuleMultiface() {}
 protected:
  std::vector<std::shared_ptr<IExecutorServerModuleIf> > ifaces_;
  IExecutorServerModuleMultiface() {}
  void add(::std::shared_ptr<IExecutorServerModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void start(const std::map<std::string, std::string> & properties, const std::map<std::string, std::string> & env) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(properties, env);
    }
    ifaces_[i]->start(properties, env);
  }

  void stop() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    ifaces_[i]->stop();
  }

  bool test() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test();
    }
    return ifaces_[i]->test();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IExecutorServerModuleConcurrentClient : virtual public IExecutorServerModuleIf {
 public:
  IExecutorServerModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IExecutorServerModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start(const std::map<std::string, std::string> & properties, const std::map<std::string, std::string> & env) override;
  int32_t send_start(const std::map<std::string, std::string> & properties, const std::map<std::string, std::string> & env);
  void recv_start(const int32_t seqid);
  void stop() override;
  int32_t send_stop();
  void recv_stop(const int32_t seqid);
  bool test() override;
  int32_t send_test();
  bool recv_test(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
