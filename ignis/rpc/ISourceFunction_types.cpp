/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ISourceFunction_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ignis { namespace rpc {


ISourceFunction::~ISourceFunction() throw() {
}


void ISourceFunction::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void ISourceFunction::__set_bytes(const std::string& val) {
  this->bytes = val;
__isset.bytes = true;
}
std::ostream& operator<<(std::ostream& out, const ISourceFunction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ISourceFunction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bytes);
          this->__isset.bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ISourceFunction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ISourceFunction");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bytes) {
    xfer += oprot->writeFieldBegin("bytes", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->bytes);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ISourceFunction &a, ISourceFunction &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.bytes, b.bytes);
  swap(a.__isset, b.__isset);
}

ISourceFunction::ISourceFunction(const ISourceFunction& other0) {
  name = other0.name;
  bytes = other0.bytes;
  __isset = other0.__isset;
}
ISourceFunction& ISourceFunction::operator=(const ISourceFunction& other1) {
  name = other1.name;
  bytes = other1.bytes;
  __isset = other1.__isset;
  return *this;
}
void ISourceFunction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ISourceFunction(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "bytes="; (__isset.bytes ? (out << to_string(bytes)) : (out << "<null>"));
  out << ")";
}

}} // namespace
