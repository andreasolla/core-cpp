/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IGeneralModule_H
#define IGeneralModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IGeneralModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IGeneralModuleIf {
 public:
  virtual ~IGeneralModuleIf() {}
  virtual void map_(const  ::ignis::rpc::ISource& src) = 0;
  virtual void filter(const  ::ignis::rpc::ISource& src) = 0;
  virtual void flatmap(const  ::ignis::rpc::ISource& src) = 0;
  virtual void mapPartitions(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) = 0;
  virtual void mapPartitionsWithIndex(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) = 0;
  virtual void applyPartition(const  ::ignis::rpc::ISource& src) = 0;
  virtual void groupBy(const  ::ignis::rpc::ISource& src) = 0;
  virtual void groupBy2(const  ::ignis::rpc::ISource& src, const int64_t numPartitions) = 0;
  virtual void sort(const bool ascending) = 0;
  virtual void sort2(const bool ascending, const int64_t numPartitions) = 0;
  virtual void sortBy(const  ::ignis::rpc::ISource& src, const bool ascending) = 0;
  virtual void sortBy3(const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) = 0;
};

class IGeneralModuleIfFactory {
 public:
  typedef IGeneralModuleIf Handler;

  virtual ~IGeneralModuleIfFactory() {}

  virtual IGeneralModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IGeneralModuleIf* /* handler */) = 0;
};

class IGeneralModuleIfSingletonFactory : virtual public IGeneralModuleIfFactory {
 public:
  IGeneralModuleIfSingletonFactory(const ::std::shared_ptr<IGeneralModuleIf>& iface) : iface_(iface) {}
  virtual ~IGeneralModuleIfSingletonFactory() {}

  virtual IGeneralModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IGeneralModuleIf* /* handler */) {}

 protected:
  ::std::shared_ptr<IGeneralModuleIf> iface_;
};

class IGeneralModuleNull : virtual public IGeneralModuleIf {
 public:
  virtual ~IGeneralModuleNull() {}
  void map_(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void filter(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void flatmap(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void mapPartitions(const  ::ignis::rpc::ISource& /* src */, const bool /* preservesPartitioning */) {
    return;
  }
  void mapPartitionsWithIndex(const  ::ignis::rpc::ISource& /* src */, const bool /* preservesPartitioning */) {
    return;
  }
  void applyPartition(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void groupBy(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void groupBy2(const  ::ignis::rpc::ISource& /* src */, const int64_t /* numPartitions */) {
    return;
  }
  void sort(const bool /* ascending */) {
    return;
  }
  void sort2(const bool /* ascending */, const int64_t /* numPartitions */) {
    return;
  }
  void sortBy(const  ::ignis::rpc::ISource& /* src */, const bool /* ascending */) {
    return;
  }
  void sortBy3(const  ::ignis::rpc::ISource& /* src */, const bool /* ascending */, const int64_t /* numPartitions */) {
    return;
  }
};

typedef struct _IGeneralModule_map__args__isset {
  _IGeneralModule_map__args__isset() : src(false) {}
  bool src :1;
} _IGeneralModule_map__args__isset;

class IGeneralModule_map__args {
 public:

  IGeneralModule_map__args(const IGeneralModule_map__args&);
  IGeneralModule_map__args& operator=(const IGeneralModule_map__args&);
  IGeneralModule_map__args() {
  }

  virtual ~IGeneralModule_map__args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralModule_map__args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralModule_map__args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_map__args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_map__args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_map__pargs {
 public:


  virtual ~IGeneralModule_map__pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_map__result__isset {
  _IGeneralModule_map__result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_map__result__isset;

class IGeneralModule_map__result {
 public:

  IGeneralModule_map__result(const IGeneralModule_map__result&);
  IGeneralModule_map__result& operator=(const IGeneralModule_map__result&);
  IGeneralModule_map__result() {
  }

  virtual ~IGeneralModule_map__result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_map__result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_map__result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_map__result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_map__result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_map__presult__isset {
  _IGeneralModule_map__presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_map__presult__isset;

class IGeneralModule_map__presult {
 public:


  virtual ~IGeneralModule_map__presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_map__presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_filter_args__isset {
  _IGeneralModule_filter_args__isset() : src(false) {}
  bool src :1;
} _IGeneralModule_filter_args__isset;

class IGeneralModule_filter_args {
 public:

  IGeneralModule_filter_args(const IGeneralModule_filter_args&);
  IGeneralModule_filter_args& operator=(const IGeneralModule_filter_args&);
  IGeneralModule_filter_args() {
  }

  virtual ~IGeneralModule_filter_args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralModule_filter_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralModule_filter_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_filter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_filter_pargs {
 public:


  virtual ~IGeneralModule_filter_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_filter_result__isset {
  _IGeneralModule_filter_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_filter_result__isset;

class IGeneralModule_filter_result {
 public:

  IGeneralModule_filter_result(const IGeneralModule_filter_result&);
  IGeneralModule_filter_result& operator=(const IGeneralModule_filter_result&);
  IGeneralModule_filter_result() {
  }

  virtual ~IGeneralModule_filter_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_filter_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_filter_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_filter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_filter_presult__isset {
  _IGeneralModule_filter_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_filter_presult__isset;

class IGeneralModule_filter_presult {
 public:


  virtual ~IGeneralModule_filter_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_filter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_flatmap_args__isset {
  _IGeneralModule_flatmap_args__isset() : src(false) {}
  bool src :1;
} _IGeneralModule_flatmap_args__isset;

class IGeneralModule_flatmap_args {
 public:

  IGeneralModule_flatmap_args(const IGeneralModule_flatmap_args&);
  IGeneralModule_flatmap_args& operator=(const IGeneralModule_flatmap_args&);
  IGeneralModule_flatmap_args() {
  }

  virtual ~IGeneralModule_flatmap_args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralModule_flatmap_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralModule_flatmap_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_flatmap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_flatmap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_flatmap_pargs {
 public:


  virtual ~IGeneralModule_flatmap_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_flatmap_result__isset {
  _IGeneralModule_flatmap_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_flatmap_result__isset;

class IGeneralModule_flatmap_result {
 public:

  IGeneralModule_flatmap_result(const IGeneralModule_flatmap_result&);
  IGeneralModule_flatmap_result& operator=(const IGeneralModule_flatmap_result&);
  IGeneralModule_flatmap_result() {
  }

  virtual ~IGeneralModule_flatmap_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_flatmap_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_flatmap_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_flatmap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_flatmap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_flatmap_presult__isset {
  _IGeneralModule_flatmap_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_flatmap_presult__isset;

class IGeneralModule_flatmap_presult {
 public:


  virtual ~IGeneralModule_flatmap_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_flatmap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_mapPartitions_args__isset {
  _IGeneralModule_mapPartitions_args__isset() : src(false), preservesPartitioning(false) {}
  bool src :1;
  bool preservesPartitioning :1;
} _IGeneralModule_mapPartitions_args__isset;

class IGeneralModule_mapPartitions_args {
 public:

  IGeneralModule_mapPartitions_args(const IGeneralModule_mapPartitions_args&);
  IGeneralModule_mapPartitions_args& operator=(const IGeneralModule_mapPartitions_args&);
  IGeneralModule_mapPartitions_args() : preservesPartitioning(0) {
  }

  virtual ~IGeneralModule_mapPartitions_args() noexcept;
   ::ignis::rpc::ISource src;
  bool preservesPartitioning;

  _IGeneralModule_mapPartitions_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_preservesPartitioning(const bool val);

  bool operator == (const IGeneralModule_mapPartitions_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(preservesPartitioning == rhs.preservesPartitioning))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_mapPartitions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_mapPartitions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_mapPartitions_pargs {
 public:


  virtual ~IGeneralModule_mapPartitions_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;
  const bool* preservesPartitioning;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_mapPartitions_result__isset {
  _IGeneralModule_mapPartitions_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_mapPartitions_result__isset;

class IGeneralModule_mapPartitions_result {
 public:

  IGeneralModule_mapPartitions_result(const IGeneralModule_mapPartitions_result&);
  IGeneralModule_mapPartitions_result& operator=(const IGeneralModule_mapPartitions_result&);
  IGeneralModule_mapPartitions_result() {
  }

  virtual ~IGeneralModule_mapPartitions_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_mapPartitions_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_mapPartitions_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_mapPartitions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_mapPartitions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_mapPartitions_presult__isset {
  _IGeneralModule_mapPartitions_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_mapPartitions_presult__isset;

class IGeneralModule_mapPartitions_presult {
 public:


  virtual ~IGeneralModule_mapPartitions_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_mapPartitions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_mapPartitionsWithIndex_args__isset {
  _IGeneralModule_mapPartitionsWithIndex_args__isset() : src(false), preservesPartitioning(false) {}
  bool src :1;
  bool preservesPartitioning :1;
} _IGeneralModule_mapPartitionsWithIndex_args__isset;

class IGeneralModule_mapPartitionsWithIndex_args {
 public:

  IGeneralModule_mapPartitionsWithIndex_args(const IGeneralModule_mapPartitionsWithIndex_args&);
  IGeneralModule_mapPartitionsWithIndex_args& operator=(const IGeneralModule_mapPartitionsWithIndex_args&);
  IGeneralModule_mapPartitionsWithIndex_args() : preservesPartitioning(0) {
  }

  virtual ~IGeneralModule_mapPartitionsWithIndex_args() noexcept;
   ::ignis::rpc::ISource src;
  bool preservesPartitioning;

  _IGeneralModule_mapPartitionsWithIndex_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_preservesPartitioning(const bool val);

  bool operator == (const IGeneralModule_mapPartitionsWithIndex_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(preservesPartitioning == rhs.preservesPartitioning))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_mapPartitionsWithIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_mapPartitionsWithIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_mapPartitionsWithIndex_pargs {
 public:


  virtual ~IGeneralModule_mapPartitionsWithIndex_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;
  const bool* preservesPartitioning;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_mapPartitionsWithIndex_result__isset {
  _IGeneralModule_mapPartitionsWithIndex_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_mapPartitionsWithIndex_result__isset;

class IGeneralModule_mapPartitionsWithIndex_result {
 public:

  IGeneralModule_mapPartitionsWithIndex_result(const IGeneralModule_mapPartitionsWithIndex_result&);
  IGeneralModule_mapPartitionsWithIndex_result& operator=(const IGeneralModule_mapPartitionsWithIndex_result&);
  IGeneralModule_mapPartitionsWithIndex_result() {
  }

  virtual ~IGeneralModule_mapPartitionsWithIndex_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_mapPartitionsWithIndex_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_mapPartitionsWithIndex_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_mapPartitionsWithIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_mapPartitionsWithIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_mapPartitionsWithIndex_presult__isset {
  _IGeneralModule_mapPartitionsWithIndex_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_mapPartitionsWithIndex_presult__isset;

class IGeneralModule_mapPartitionsWithIndex_presult {
 public:


  virtual ~IGeneralModule_mapPartitionsWithIndex_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_mapPartitionsWithIndex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_applyPartition_args__isset {
  _IGeneralModule_applyPartition_args__isset() : src(false) {}
  bool src :1;
} _IGeneralModule_applyPartition_args__isset;

class IGeneralModule_applyPartition_args {
 public:

  IGeneralModule_applyPartition_args(const IGeneralModule_applyPartition_args&);
  IGeneralModule_applyPartition_args& operator=(const IGeneralModule_applyPartition_args&);
  IGeneralModule_applyPartition_args() {
  }

  virtual ~IGeneralModule_applyPartition_args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralModule_applyPartition_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralModule_applyPartition_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_applyPartition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_applyPartition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_applyPartition_pargs {
 public:


  virtual ~IGeneralModule_applyPartition_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_applyPartition_result__isset {
  _IGeneralModule_applyPartition_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_applyPartition_result__isset;

class IGeneralModule_applyPartition_result {
 public:

  IGeneralModule_applyPartition_result(const IGeneralModule_applyPartition_result&);
  IGeneralModule_applyPartition_result& operator=(const IGeneralModule_applyPartition_result&);
  IGeneralModule_applyPartition_result() {
  }

  virtual ~IGeneralModule_applyPartition_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_applyPartition_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_applyPartition_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_applyPartition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_applyPartition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_applyPartition_presult__isset {
  _IGeneralModule_applyPartition_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_applyPartition_presult__isset;

class IGeneralModule_applyPartition_presult {
 public:


  virtual ~IGeneralModule_applyPartition_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_applyPartition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_groupBy_args__isset {
  _IGeneralModule_groupBy_args__isset() : src(false) {}
  bool src :1;
} _IGeneralModule_groupBy_args__isset;

class IGeneralModule_groupBy_args {
 public:

  IGeneralModule_groupBy_args(const IGeneralModule_groupBy_args&);
  IGeneralModule_groupBy_args& operator=(const IGeneralModule_groupBy_args&);
  IGeneralModule_groupBy_args() {
  }

  virtual ~IGeneralModule_groupBy_args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralModule_groupBy_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralModule_groupBy_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_groupBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_groupBy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_groupBy_pargs {
 public:


  virtual ~IGeneralModule_groupBy_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_groupBy_result__isset {
  _IGeneralModule_groupBy_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_groupBy_result__isset;

class IGeneralModule_groupBy_result {
 public:

  IGeneralModule_groupBy_result(const IGeneralModule_groupBy_result&);
  IGeneralModule_groupBy_result& operator=(const IGeneralModule_groupBy_result&);
  IGeneralModule_groupBy_result() {
  }

  virtual ~IGeneralModule_groupBy_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_groupBy_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_groupBy_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_groupBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_groupBy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_groupBy_presult__isset {
  _IGeneralModule_groupBy_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_groupBy_presult__isset;

class IGeneralModule_groupBy_presult {
 public:


  virtual ~IGeneralModule_groupBy_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_groupBy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_groupBy2_args__isset {
  _IGeneralModule_groupBy2_args__isset() : src(false), numPartitions(false) {}
  bool src :1;
  bool numPartitions :1;
} _IGeneralModule_groupBy2_args__isset;

class IGeneralModule_groupBy2_args {
 public:

  IGeneralModule_groupBy2_args(const IGeneralModule_groupBy2_args&);
  IGeneralModule_groupBy2_args& operator=(const IGeneralModule_groupBy2_args&);
  IGeneralModule_groupBy2_args() : numPartitions(0) {
  }

  virtual ~IGeneralModule_groupBy2_args() noexcept;
   ::ignis::rpc::ISource src;
  int64_t numPartitions;

  _IGeneralModule_groupBy2_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IGeneralModule_groupBy2_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_groupBy2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_groupBy2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_groupBy2_pargs {
 public:


  virtual ~IGeneralModule_groupBy2_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_groupBy2_result__isset {
  _IGeneralModule_groupBy2_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_groupBy2_result__isset;

class IGeneralModule_groupBy2_result {
 public:

  IGeneralModule_groupBy2_result(const IGeneralModule_groupBy2_result&);
  IGeneralModule_groupBy2_result& operator=(const IGeneralModule_groupBy2_result&);
  IGeneralModule_groupBy2_result() {
  }

  virtual ~IGeneralModule_groupBy2_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_groupBy2_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_groupBy2_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_groupBy2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_groupBy2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_groupBy2_presult__isset {
  _IGeneralModule_groupBy2_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_groupBy2_presult__isset;

class IGeneralModule_groupBy2_presult {
 public:


  virtual ~IGeneralModule_groupBy2_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_groupBy2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_sort_args__isset {
  _IGeneralModule_sort_args__isset() : ascending(false) {}
  bool ascending :1;
} _IGeneralModule_sort_args__isset;

class IGeneralModule_sort_args {
 public:

  IGeneralModule_sort_args(const IGeneralModule_sort_args&);
  IGeneralModule_sort_args& operator=(const IGeneralModule_sort_args&);
  IGeneralModule_sort_args() : ascending(0) {
  }

  virtual ~IGeneralModule_sort_args() noexcept;
  bool ascending;

  _IGeneralModule_sort_args__isset __isset;

  void __set_ascending(const bool val);

  bool operator == (const IGeneralModule_sort_args & rhs) const
  {
    if (!(ascending == rhs.ascending))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_sort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_sort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_sort_pargs {
 public:


  virtual ~IGeneralModule_sort_pargs() noexcept;
  const bool* ascending;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_sort_result__isset {
  _IGeneralModule_sort_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_sort_result__isset;

class IGeneralModule_sort_result {
 public:

  IGeneralModule_sort_result(const IGeneralModule_sort_result&);
  IGeneralModule_sort_result& operator=(const IGeneralModule_sort_result&);
  IGeneralModule_sort_result() {
  }

  virtual ~IGeneralModule_sort_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_sort_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_sort_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_sort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_sort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_sort_presult__isset {
  _IGeneralModule_sort_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_sort_presult__isset;

class IGeneralModule_sort_presult {
 public:


  virtual ~IGeneralModule_sort_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_sort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_sort2_args__isset {
  _IGeneralModule_sort2_args__isset() : ascending(false), numPartitions(false) {}
  bool ascending :1;
  bool numPartitions :1;
} _IGeneralModule_sort2_args__isset;

class IGeneralModule_sort2_args {
 public:

  IGeneralModule_sort2_args(const IGeneralModule_sort2_args&);
  IGeneralModule_sort2_args& operator=(const IGeneralModule_sort2_args&);
  IGeneralModule_sort2_args() : ascending(0), numPartitions(0) {
  }

  virtual ~IGeneralModule_sort2_args() noexcept;
  bool ascending;
  int64_t numPartitions;

  _IGeneralModule_sort2_args__isset __isset;

  void __set_ascending(const bool val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IGeneralModule_sort2_args & rhs) const
  {
    if (!(ascending == rhs.ascending))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_sort2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_sort2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_sort2_pargs {
 public:


  virtual ~IGeneralModule_sort2_pargs() noexcept;
  const bool* ascending;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_sort2_result__isset {
  _IGeneralModule_sort2_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_sort2_result__isset;

class IGeneralModule_sort2_result {
 public:

  IGeneralModule_sort2_result(const IGeneralModule_sort2_result&);
  IGeneralModule_sort2_result& operator=(const IGeneralModule_sort2_result&);
  IGeneralModule_sort2_result() {
  }

  virtual ~IGeneralModule_sort2_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_sort2_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_sort2_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_sort2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_sort2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_sort2_presult__isset {
  _IGeneralModule_sort2_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_sort2_presult__isset;

class IGeneralModule_sort2_presult {
 public:


  virtual ~IGeneralModule_sort2_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_sort2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_sortBy_args__isset {
  _IGeneralModule_sortBy_args__isset() : src(false), ascending(false) {}
  bool src :1;
  bool ascending :1;
} _IGeneralModule_sortBy_args__isset;

class IGeneralModule_sortBy_args {
 public:

  IGeneralModule_sortBy_args(const IGeneralModule_sortBy_args&);
  IGeneralModule_sortBy_args& operator=(const IGeneralModule_sortBy_args&);
  IGeneralModule_sortBy_args() : ascending(0) {
  }

  virtual ~IGeneralModule_sortBy_args() noexcept;
   ::ignis::rpc::ISource src;
  bool ascending;

  _IGeneralModule_sortBy_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_ascending(const bool val);

  bool operator == (const IGeneralModule_sortBy_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_sortBy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_sortBy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_sortBy_pargs {
 public:


  virtual ~IGeneralModule_sortBy_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;
  const bool* ascending;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_sortBy_result__isset {
  _IGeneralModule_sortBy_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_sortBy_result__isset;

class IGeneralModule_sortBy_result {
 public:

  IGeneralModule_sortBy_result(const IGeneralModule_sortBy_result&);
  IGeneralModule_sortBy_result& operator=(const IGeneralModule_sortBy_result&);
  IGeneralModule_sortBy_result() {
  }

  virtual ~IGeneralModule_sortBy_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_sortBy_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_sortBy_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_sortBy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_sortBy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_sortBy_presult__isset {
  _IGeneralModule_sortBy_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_sortBy_presult__isset;

class IGeneralModule_sortBy_presult {
 public:


  virtual ~IGeneralModule_sortBy_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_sortBy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralModule_sortBy3_args__isset {
  _IGeneralModule_sortBy3_args__isset() : src(false), ascending(false), numPartitions(false) {}
  bool src :1;
  bool ascending :1;
  bool numPartitions :1;
} _IGeneralModule_sortBy3_args__isset;

class IGeneralModule_sortBy3_args {
 public:

  IGeneralModule_sortBy3_args(const IGeneralModule_sortBy3_args&);
  IGeneralModule_sortBy3_args& operator=(const IGeneralModule_sortBy3_args&);
  IGeneralModule_sortBy3_args() : ascending(0), numPartitions(0) {
  }

  virtual ~IGeneralModule_sortBy3_args() noexcept;
   ::ignis::rpc::ISource src;
  bool ascending;
  int64_t numPartitions;

  _IGeneralModule_sortBy3_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_ascending(const bool val);

  void __set_numPartitions(const int64_t val);

  bool operator == (const IGeneralModule_sortBy3_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(ascending == rhs.ascending))
      return false;
    if (!(numPartitions == rhs.numPartitions))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_sortBy3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_sortBy3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralModule_sortBy3_pargs {
 public:


  virtual ~IGeneralModule_sortBy3_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;
  const bool* ascending;
  const int64_t* numPartitions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_sortBy3_result__isset {
  _IGeneralModule_sortBy3_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_sortBy3_result__isset;

class IGeneralModule_sortBy3_result {
 public:

  IGeneralModule_sortBy3_result(const IGeneralModule_sortBy3_result&);
  IGeneralModule_sortBy3_result& operator=(const IGeneralModule_sortBy3_result&);
  IGeneralModule_sortBy3_result() {
  }

  virtual ~IGeneralModule_sortBy3_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_sortBy3_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralModule_sortBy3_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralModule_sortBy3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralModule_sortBy3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralModule_sortBy3_presult__isset {
  _IGeneralModule_sortBy3_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralModule_sortBy3_presult__isset;

class IGeneralModule_sortBy3_presult {
 public:


  virtual ~IGeneralModule_sortBy3_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralModule_sortBy3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IGeneralModuleClient : virtual public IGeneralModuleIf {
 public:
  IGeneralModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IGeneralModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void map_(const  ::ignis::rpc::ISource& src);
  void send_map_(const  ::ignis::rpc::ISource& src);
  void recv_map_();
  void filter(const  ::ignis::rpc::ISource& src);
  void send_filter(const  ::ignis::rpc::ISource& src);
  void recv_filter();
  void flatmap(const  ::ignis::rpc::ISource& src);
  void send_flatmap(const  ::ignis::rpc::ISource& src);
  void recv_flatmap();
  void mapPartitions(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void send_mapPartitions(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void recv_mapPartitions();
  void mapPartitionsWithIndex(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void send_mapPartitionsWithIndex(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void recv_mapPartitionsWithIndex();
  void applyPartition(const  ::ignis::rpc::ISource& src);
  void send_applyPartition(const  ::ignis::rpc::ISource& src);
  void recv_applyPartition();
  void groupBy(const  ::ignis::rpc::ISource& src);
  void send_groupBy(const  ::ignis::rpc::ISource& src);
  void recv_groupBy();
  void groupBy2(const  ::ignis::rpc::ISource& src, const int64_t numPartitions);
  void send_groupBy2(const  ::ignis::rpc::ISource& src, const int64_t numPartitions);
  void recv_groupBy2();
  void sort(const bool ascending);
  void send_sort(const bool ascending);
  void recv_sort();
  void sort2(const bool ascending, const int64_t numPartitions);
  void send_sort2(const bool ascending, const int64_t numPartitions);
  void recv_sort2();
  void sortBy(const  ::ignis::rpc::ISource& src, const bool ascending);
  void send_sortBy(const  ::ignis::rpc::ISource& src, const bool ascending);
  void recv_sortBy();
  void sortBy3(const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions);
  void send_sortBy3(const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions);
  void recv_sortBy3();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IGeneralModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IGeneralModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IGeneralModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_map_(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_flatmap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mapPartitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mapPartitionsWithIndex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_applyPartition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupBy2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sort2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sortBy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sortBy3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IGeneralModuleProcessor(::std::shared_ptr<IGeneralModuleIf> iface) :
    iface_(iface) {
    processMap_["map_"] = &IGeneralModuleProcessor::process_map_;
    processMap_["filter"] = &IGeneralModuleProcessor::process_filter;
    processMap_["flatmap"] = &IGeneralModuleProcessor::process_flatmap;
    processMap_["mapPartitions"] = &IGeneralModuleProcessor::process_mapPartitions;
    processMap_["mapPartitionsWithIndex"] = &IGeneralModuleProcessor::process_mapPartitionsWithIndex;
    processMap_["applyPartition"] = &IGeneralModuleProcessor::process_applyPartition;
    processMap_["groupBy"] = &IGeneralModuleProcessor::process_groupBy;
    processMap_["groupBy2"] = &IGeneralModuleProcessor::process_groupBy2;
    processMap_["sort"] = &IGeneralModuleProcessor::process_sort;
    processMap_["sort2"] = &IGeneralModuleProcessor::process_sort2;
    processMap_["sortBy"] = &IGeneralModuleProcessor::process_sortBy;
    processMap_["sortBy3"] = &IGeneralModuleProcessor::process_sortBy3;
  }

  virtual ~IGeneralModuleProcessor() {}
};

class IGeneralModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IGeneralModuleProcessorFactory(const ::std::shared_ptr< IGeneralModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< IGeneralModuleIfFactory > handlerFactory_;
};

class IGeneralModuleMultiface : virtual public IGeneralModuleIf {
 public:
  IGeneralModuleMultiface(std::vector<std::shared_ptr<IGeneralModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IGeneralModuleMultiface() {}
 protected:
  std::vector<std::shared_ptr<IGeneralModuleIf> > ifaces_;
  IGeneralModuleMultiface() {}
  void add(::std::shared_ptr<IGeneralModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void map_(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->map_(src);
    }
    ifaces_[i]->map_(src);
  }

  void filter(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filter(src);
    }
    ifaces_[i]->filter(src);
  }

  void flatmap(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->flatmap(src);
    }
    ifaces_[i]->flatmap(src);
  }

  void mapPartitions(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mapPartitions(src, preservesPartitioning);
    }
    ifaces_[i]->mapPartitions(src, preservesPartitioning);
  }

  void mapPartitionsWithIndex(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mapPartitionsWithIndex(src, preservesPartitioning);
    }
    ifaces_[i]->mapPartitionsWithIndex(src, preservesPartitioning);
  }

  void applyPartition(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyPartition(src);
    }
    ifaces_[i]->applyPartition(src);
  }

  void groupBy(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupBy(src);
    }
    ifaces_[i]->groupBy(src);
  }

  void groupBy2(const  ::ignis::rpc::ISource& src, const int64_t numPartitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupBy2(src, numPartitions);
    }
    ifaces_[i]->groupBy2(src, numPartitions);
  }

  void sort(const bool ascending) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sort(ascending);
    }
    ifaces_[i]->sort(ascending);
  }

  void sort2(const bool ascending, const int64_t numPartitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sort2(ascending, numPartitions);
    }
    ifaces_[i]->sort2(ascending, numPartitions);
  }

  void sortBy(const  ::ignis::rpc::ISource& src, const bool ascending) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sortBy(src, ascending);
    }
    ifaces_[i]->sortBy(src, ascending);
  }

  void sortBy3(const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sortBy3(src, ascending, numPartitions);
    }
    ifaces_[i]->sortBy3(src, ascending, numPartitions);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IGeneralModuleConcurrentClient : virtual public IGeneralModuleIf {
 public:
  IGeneralModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IGeneralModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void map_(const  ::ignis::rpc::ISource& src);
  int32_t send_map_(const  ::ignis::rpc::ISource& src);
  void recv_map_(const int32_t seqid);
  void filter(const  ::ignis::rpc::ISource& src);
  int32_t send_filter(const  ::ignis::rpc::ISource& src);
  void recv_filter(const int32_t seqid);
  void flatmap(const  ::ignis::rpc::ISource& src);
  int32_t send_flatmap(const  ::ignis::rpc::ISource& src);
  void recv_flatmap(const int32_t seqid);
  void mapPartitions(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  int32_t send_mapPartitions(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void recv_mapPartitions(const int32_t seqid);
  void mapPartitionsWithIndex(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  int32_t send_mapPartitionsWithIndex(const  ::ignis::rpc::ISource& src, const bool preservesPartitioning);
  void recv_mapPartitionsWithIndex(const int32_t seqid);
  void applyPartition(const  ::ignis::rpc::ISource& src);
  int32_t send_applyPartition(const  ::ignis::rpc::ISource& src);
  void recv_applyPartition(const int32_t seqid);
  void groupBy(const  ::ignis::rpc::ISource& src);
  int32_t send_groupBy(const  ::ignis::rpc::ISource& src);
  void recv_groupBy(const int32_t seqid);
  void groupBy2(const  ::ignis::rpc::ISource& src, const int64_t numPartitions);
  int32_t send_groupBy2(const  ::ignis::rpc::ISource& src, const int64_t numPartitions);
  void recv_groupBy2(const int32_t seqid);
  void sort(const bool ascending);
  int32_t send_sort(const bool ascending);
  void recv_sort(const int32_t seqid);
  void sort2(const bool ascending, const int64_t numPartitions);
  int32_t send_sort2(const bool ascending, const int64_t numPartitions);
  void recv_sort2(const int32_t seqid);
  void sortBy(const  ::ignis::rpc::ISource& src, const bool ascending);
  int32_t send_sortBy(const  ::ignis::rpc::ISource& src, const bool ascending);
  void recv_sortBy(const int32_t seqid);
  void sortBy3(const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions);
  int32_t send_sortBy3(const  ::ignis::rpc::ISource& src, const bool ascending, const int64_t numPartitions);
  void recv_sortBy3(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
