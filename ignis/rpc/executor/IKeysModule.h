/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IKeysModule_H
#define IKeysModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IKeysModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IKeysModuleIf {
 public:
  virtual ~IKeysModuleIf() {}
  virtual void getKeys(std::vector<int64_t> & _return) = 0;
  virtual void getKeysWithCount(std::unordered_map<int64_t, int64_t>& _return) = 0;
  virtual void prepareKeys(const std::vector<IExecutorKeys> & executorKeys) = 0;
  virtual void collectKeys() = 0;
  virtual void reduceByKey(const  ::ignis::rpc::ISource& funct) = 0;
};

class IKeysModuleIfFactory {
 public:
  typedef IKeysModuleIf Handler;

  virtual ~IKeysModuleIfFactory() {}

  virtual IKeysModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IKeysModuleIf* /* handler */) = 0;
};

class IKeysModuleIfSingletonFactory : virtual public IKeysModuleIfFactory {
 public:
  IKeysModuleIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf>& iface) : iface_(iface) {}
  virtual ~IKeysModuleIfSingletonFactory() {}

  virtual IKeysModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IKeysModuleIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> iface_;
};

class IKeysModuleNull : virtual public IKeysModuleIf {
 public:
  virtual ~IKeysModuleNull() {}
  void getKeys(std::vector<int64_t> & /* _return */) {
    return;
  }
  void getKeysWithCount(std::unordered_map<int64_t, int64_t>& /* _return */) {
    return;
  }
  void prepareKeys(const std::vector<IExecutorKeys> & /* executorKeys */) {
    return;
  }
  void collectKeys() {
    return;
  }
  void reduceByKey(const  ::ignis::rpc::ISource& /* funct */) {
    return;
  }
};


class IKeysModule_getKeys_args {
 public:

  IKeysModule_getKeys_args(const IKeysModule_getKeys_args&);
  IKeysModule_getKeys_args& operator=(const IKeysModule_getKeys_args&);
  IKeysModule_getKeys_args() {
  }

  virtual ~IKeysModule_getKeys_args() throw();

  bool operator == (const IKeysModule_getKeys_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IKeysModule_getKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_getKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_getKeys_pargs {
 public:


  virtual ~IKeysModule_getKeys_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_getKeys_result__isset {
  _IKeysModule_getKeys_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IKeysModule_getKeys_result__isset;

class IKeysModule_getKeys_result {
 public:

  IKeysModule_getKeys_result(const IKeysModule_getKeys_result&);
  IKeysModule_getKeys_result& operator=(const IKeysModule_getKeys_result&);
  IKeysModule_getKeys_result() {
  }

  virtual ~IKeysModule_getKeys_result() throw();
  std::vector<int64_t>  success;
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_getKeys_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_getKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_getKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_getKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_getKeys_presult__isset {
  _IKeysModule_getKeys_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IKeysModule_getKeys_presult__isset;

class IKeysModule_getKeys_presult {
 public:


  virtual ~IKeysModule_getKeys_presult() throw();
  std::vector<int64_t> * success;
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_getKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IKeysModule_getKeysWithCount_args {
 public:

  IKeysModule_getKeysWithCount_args(const IKeysModule_getKeysWithCount_args&);
  IKeysModule_getKeysWithCount_args& operator=(const IKeysModule_getKeysWithCount_args&);
  IKeysModule_getKeysWithCount_args() {
  }

  virtual ~IKeysModule_getKeysWithCount_args() throw();

  bool operator == (const IKeysModule_getKeysWithCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IKeysModule_getKeysWithCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_getKeysWithCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_getKeysWithCount_pargs {
 public:


  virtual ~IKeysModule_getKeysWithCount_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_getKeysWithCount_result__isset {
  _IKeysModule_getKeysWithCount_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IKeysModule_getKeysWithCount_result__isset;

class IKeysModule_getKeysWithCount_result {
 public:

  IKeysModule_getKeysWithCount_result(const IKeysModule_getKeysWithCount_result&);
  IKeysModule_getKeysWithCount_result& operator=(const IKeysModule_getKeysWithCount_result&);
  IKeysModule_getKeysWithCount_result() {
  }

  virtual ~IKeysModule_getKeysWithCount_result() throw();
  std::unordered_map<int64_t, int64_t> success;
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_getKeysWithCount_result__isset __isset;

  void __set_success(const std::unordered_map<int64_t, int64_t>& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_getKeysWithCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_getKeysWithCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_getKeysWithCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_getKeysWithCount_presult__isset {
  _IKeysModule_getKeysWithCount_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IKeysModule_getKeysWithCount_presult__isset;

class IKeysModule_getKeysWithCount_presult {
 public:


  virtual ~IKeysModule_getKeysWithCount_presult() throw();
  std::unordered_map<int64_t, int64_t>* success;
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_getKeysWithCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IKeysModule_prepareKeys_args__isset {
  _IKeysModule_prepareKeys_args__isset() : executorKeys(false) {}
  bool executorKeys :1;
} _IKeysModule_prepareKeys_args__isset;

class IKeysModule_prepareKeys_args {
 public:

  IKeysModule_prepareKeys_args(const IKeysModule_prepareKeys_args&);
  IKeysModule_prepareKeys_args& operator=(const IKeysModule_prepareKeys_args&);
  IKeysModule_prepareKeys_args() {
  }

  virtual ~IKeysModule_prepareKeys_args() throw();
  std::vector<IExecutorKeys>  executorKeys;

  _IKeysModule_prepareKeys_args__isset __isset;

  void __set_executorKeys(const std::vector<IExecutorKeys> & val);

  bool operator == (const IKeysModule_prepareKeys_args & rhs) const
  {
    if (!(executorKeys == rhs.executorKeys))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_prepareKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_prepareKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_prepareKeys_pargs {
 public:


  virtual ~IKeysModule_prepareKeys_pargs() throw();
  const std::vector<IExecutorKeys> * executorKeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_prepareKeys_result__isset {
  _IKeysModule_prepareKeys_result__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_prepareKeys_result__isset;

class IKeysModule_prepareKeys_result {
 public:

  IKeysModule_prepareKeys_result(const IKeysModule_prepareKeys_result&);
  IKeysModule_prepareKeys_result& operator=(const IKeysModule_prepareKeys_result&);
  IKeysModule_prepareKeys_result() {
  }

  virtual ~IKeysModule_prepareKeys_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_prepareKeys_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_prepareKeys_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_prepareKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_prepareKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_prepareKeys_presult__isset {
  _IKeysModule_prepareKeys_presult__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_prepareKeys_presult__isset;

class IKeysModule_prepareKeys_presult {
 public:


  virtual ~IKeysModule_prepareKeys_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_prepareKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IKeysModule_collectKeys_args {
 public:

  IKeysModule_collectKeys_args(const IKeysModule_collectKeys_args&);
  IKeysModule_collectKeys_args& operator=(const IKeysModule_collectKeys_args&);
  IKeysModule_collectKeys_args() {
  }

  virtual ~IKeysModule_collectKeys_args() throw();

  bool operator == (const IKeysModule_collectKeys_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IKeysModule_collectKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_collectKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_collectKeys_pargs {
 public:


  virtual ~IKeysModule_collectKeys_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_collectKeys_result__isset {
  _IKeysModule_collectKeys_result__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_collectKeys_result__isset;

class IKeysModule_collectKeys_result {
 public:

  IKeysModule_collectKeys_result(const IKeysModule_collectKeys_result&);
  IKeysModule_collectKeys_result& operator=(const IKeysModule_collectKeys_result&);
  IKeysModule_collectKeys_result() {
  }

  virtual ~IKeysModule_collectKeys_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_collectKeys_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_collectKeys_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_collectKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_collectKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_collectKeys_presult__isset {
  _IKeysModule_collectKeys_presult__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_collectKeys_presult__isset;

class IKeysModule_collectKeys_presult {
 public:


  virtual ~IKeysModule_collectKeys_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_collectKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IKeysModule_reduceByKey_args__isset {
  _IKeysModule_reduceByKey_args__isset() : funct(false) {}
  bool funct :1;
} _IKeysModule_reduceByKey_args__isset;

class IKeysModule_reduceByKey_args {
 public:

  IKeysModule_reduceByKey_args(const IKeysModule_reduceByKey_args&);
  IKeysModule_reduceByKey_args& operator=(const IKeysModule_reduceByKey_args&);
  IKeysModule_reduceByKey_args() {
  }

  virtual ~IKeysModule_reduceByKey_args() throw();
   ::ignis::rpc::ISource funct;

  _IKeysModule_reduceByKey_args__isset __isset;

  void __set_funct(const  ::ignis::rpc::ISource& val);

  bool operator == (const IKeysModule_reduceByKey_args & rhs) const
  {
    if (!(funct == rhs.funct))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_reduceByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_reduceByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_reduceByKey_pargs {
 public:


  virtual ~IKeysModule_reduceByKey_pargs() throw();
  const  ::ignis::rpc::ISource* funct;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_reduceByKey_result__isset {
  _IKeysModule_reduceByKey_result__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_reduceByKey_result__isset;

class IKeysModule_reduceByKey_result {
 public:

  IKeysModule_reduceByKey_result(const IKeysModule_reduceByKey_result&);
  IKeysModule_reduceByKey_result& operator=(const IKeysModule_reduceByKey_result&);
  IKeysModule_reduceByKey_result() {
  }

  virtual ~IKeysModule_reduceByKey_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_reduceByKey_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_reduceByKey_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_reduceByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_reduceByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_reduceByKey_presult__isset {
  _IKeysModule_reduceByKey_presult__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_reduceByKey_presult__isset;

class IKeysModule_reduceByKey_presult {
 public:


  virtual ~IKeysModule_reduceByKey_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_reduceByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IKeysModuleClient : virtual public IKeysModuleIf {
 public:
  IKeysModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IKeysModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getKeys(std::vector<int64_t> & _return);
  void send_getKeys();
  void recv_getKeys(std::vector<int64_t> & _return);
  void getKeysWithCount(std::unordered_map<int64_t, int64_t>& _return);
  void send_getKeysWithCount();
  void recv_getKeysWithCount(std::unordered_map<int64_t, int64_t>& _return);
  void prepareKeys(const std::vector<IExecutorKeys> & executorKeys);
  void send_prepareKeys(const std::vector<IExecutorKeys> & executorKeys);
  void recv_prepareKeys();
  void collectKeys();
  void send_collectKeys();
  void recv_collectKeys();
  void reduceByKey(const  ::ignis::rpc::ISource& funct);
  void send_reduceByKey(const  ::ignis::rpc::ISource& funct);
  void recv_reduceByKey();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IKeysModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IKeysModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getKeysWithCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_collectKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reduceByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IKeysModuleProcessor(::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> iface) :
    iface_(iface) {
    processMap_["getKeys"] = &IKeysModuleProcessor::process_getKeys;
    processMap_["getKeysWithCount"] = &IKeysModuleProcessor::process_getKeysWithCount;
    processMap_["prepareKeys"] = &IKeysModuleProcessor::process_prepareKeys;
    processMap_["collectKeys"] = &IKeysModuleProcessor::process_collectKeys;
    processMap_["reduceByKey"] = &IKeysModuleProcessor::process_reduceByKey;
  }

  virtual ~IKeysModuleProcessor() {}
};

class IKeysModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IKeysModuleProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IKeysModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IKeysModuleIfFactory > handlerFactory_;
};

class IKeysModuleMultiface : virtual public IKeysModuleIf {
 public:
  IKeysModuleMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IKeysModuleMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> > ifaces_;
  IKeysModuleMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getKeys(std::vector<int64_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getKeys(_return);
    }
    ifaces_[i]->getKeys(_return);
    return;
  }

  void getKeysWithCount(std::unordered_map<int64_t, int64_t>& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getKeysWithCount(_return);
    }
    ifaces_[i]->getKeysWithCount(_return);
    return;
  }

  void prepareKeys(const std::vector<IExecutorKeys> & executorKeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareKeys(executorKeys);
    }
    ifaces_[i]->prepareKeys(executorKeys);
  }

  void collectKeys() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->collectKeys();
    }
    ifaces_[i]->collectKeys();
  }

  void reduceByKey(const  ::ignis::rpc::ISource& funct) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reduceByKey(funct);
    }
    ifaces_[i]->reduceByKey(funct);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IKeysModuleConcurrentClient : virtual public IKeysModuleIf {
 public:
  IKeysModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IKeysModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getKeys(std::vector<int64_t> & _return);
  int32_t send_getKeys();
  void recv_getKeys(std::vector<int64_t> & _return, const int32_t seqid);
  void getKeysWithCount(std::unordered_map<int64_t, int64_t>& _return);
  int32_t send_getKeysWithCount();
  void recv_getKeysWithCount(std::unordered_map<int64_t, int64_t>& _return, const int32_t seqid);
  void prepareKeys(const std::vector<IExecutorKeys> & executorKeys);
  int32_t send_prepareKeys(const std::vector<IExecutorKeys> & executorKeys);
  void recv_prepareKeys(const int32_t seqid);
  void collectKeys();
  int32_t send_collectKeys();
  void recv_collectKeys(const int32_t seqid);
  void reduceByKey(const  ::ignis::rpc::ISource& funct);
  int32_t send_reduceByKey(const  ::ignis::rpc::ISource& funct);
  void recv_reduceByKey(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
