/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IKeysModule_H
#define IKeysModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IKeysModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IKeysModuleIf {
 public:
  virtual ~IKeysModuleIf() {}
  virtual void getKeys(std::unordered_map<int64_t, int64_t>& _return, const bool single) = 0;
  virtual void sendPairs(const std::string& addr, const std::vector<int64_t> & keys_id) = 0;
  virtual void joinPairs() = 0;
  virtual void reset() = 0;
};

class IKeysModuleIfFactory {
 public:
  typedef IKeysModuleIf Handler;

  virtual ~IKeysModuleIfFactory() {}

  virtual IKeysModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IKeysModuleIf* /* handler */) = 0;
};

class IKeysModuleIfSingletonFactory : virtual public IKeysModuleIfFactory {
 public:
  IKeysModuleIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf>& iface) : iface_(iface) {}
  virtual ~IKeysModuleIfSingletonFactory() {}

  virtual IKeysModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IKeysModuleIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> iface_;
};

class IKeysModuleNull : virtual public IKeysModuleIf {
 public:
  virtual ~IKeysModuleNull() {}
  void getKeys(std::unordered_map<int64_t, int64_t>& /* _return */, const bool /* single */) {
    return;
  }
  void sendPairs(const std::string& /* addr */, const std::vector<int64_t> & /* keys_id */) {
    return;
  }
  void joinPairs() {
    return;
  }
  void reset() {
    return;
  }
};

typedef struct _IKeysModule_getKeys_args__isset {
  _IKeysModule_getKeys_args__isset() : single(false) {}
  bool single :1;
} _IKeysModule_getKeys_args__isset;

class IKeysModule_getKeys_args {
 public:

  IKeysModule_getKeys_args(const IKeysModule_getKeys_args&);
  IKeysModule_getKeys_args& operator=(const IKeysModule_getKeys_args&);
  IKeysModule_getKeys_args() : single(0) {
  }

  virtual ~IKeysModule_getKeys_args() throw();
  bool single;

  _IKeysModule_getKeys_args__isset __isset;

  void __set_single(const bool val);

  bool operator == (const IKeysModule_getKeys_args & rhs) const
  {
    if (!(single == rhs.single))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_getKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_getKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_getKeys_pargs {
 public:


  virtual ~IKeysModule_getKeys_pargs() throw();
  const bool* single;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_getKeys_result__isset {
  _IKeysModule_getKeys_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IKeysModule_getKeys_result__isset;

class IKeysModule_getKeys_result {
 public:

  IKeysModule_getKeys_result(const IKeysModule_getKeys_result&);
  IKeysModule_getKeys_result& operator=(const IKeysModule_getKeys_result&);
  IKeysModule_getKeys_result() {
  }

  virtual ~IKeysModule_getKeys_result() throw();
  std::unordered_map<int64_t, int64_t> success;
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_getKeys_result__isset __isset;

  void __set_success(const std::unordered_map<int64_t, int64_t>& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_getKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_getKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_getKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_getKeys_presult__isset {
  _IKeysModule_getKeys_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IKeysModule_getKeys_presult__isset;

class IKeysModule_getKeys_presult {
 public:


  virtual ~IKeysModule_getKeys_presult() throw();
  std::unordered_map<int64_t, int64_t>* success;
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_getKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IKeysModule_sendPairs_args__isset {
  _IKeysModule_sendPairs_args__isset() : addr(false), keys_id(false) {}
  bool addr :1;
  bool keys_id :1;
} _IKeysModule_sendPairs_args__isset;

class IKeysModule_sendPairs_args {
 public:

  IKeysModule_sendPairs_args(const IKeysModule_sendPairs_args&);
  IKeysModule_sendPairs_args& operator=(const IKeysModule_sendPairs_args&);
  IKeysModule_sendPairs_args() : addr() {
  }

  virtual ~IKeysModule_sendPairs_args() throw();
  std::string addr;
  std::vector<int64_t>  keys_id;

  _IKeysModule_sendPairs_args__isset __isset;

  void __set_addr(const std::string& val);

  void __set_keys_id(const std::vector<int64_t> & val);

  bool operator == (const IKeysModule_sendPairs_args & rhs) const
  {
    if (!(addr == rhs.addr))
      return false;
    if (!(keys_id == rhs.keys_id))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_sendPairs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_sendPairs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_sendPairs_pargs {
 public:


  virtual ~IKeysModule_sendPairs_pargs() throw();
  const std::string* addr;
  const std::vector<int64_t> * keys_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_sendPairs_result__isset {
  _IKeysModule_sendPairs_result__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_sendPairs_result__isset;

class IKeysModule_sendPairs_result {
 public:

  IKeysModule_sendPairs_result(const IKeysModule_sendPairs_result&);
  IKeysModule_sendPairs_result& operator=(const IKeysModule_sendPairs_result&);
  IKeysModule_sendPairs_result() {
  }

  virtual ~IKeysModule_sendPairs_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_sendPairs_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_sendPairs_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_sendPairs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_sendPairs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_sendPairs_presult__isset {
  _IKeysModule_sendPairs_presult__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_sendPairs_presult__isset;

class IKeysModule_sendPairs_presult {
 public:


  virtual ~IKeysModule_sendPairs_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_sendPairs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IKeysModule_joinPairs_args {
 public:

  IKeysModule_joinPairs_args(const IKeysModule_joinPairs_args&);
  IKeysModule_joinPairs_args& operator=(const IKeysModule_joinPairs_args&);
  IKeysModule_joinPairs_args() {
  }

  virtual ~IKeysModule_joinPairs_args() throw();

  bool operator == (const IKeysModule_joinPairs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IKeysModule_joinPairs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_joinPairs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_joinPairs_pargs {
 public:


  virtual ~IKeysModule_joinPairs_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_joinPairs_result__isset {
  _IKeysModule_joinPairs_result__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_joinPairs_result__isset;

class IKeysModule_joinPairs_result {
 public:

  IKeysModule_joinPairs_result(const IKeysModule_joinPairs_result&);
  IKeysModule_joinPairs_result& operator=(const IKeysModule_joinPairs_result&);
  IKeysModule_joinPairs_result() {
  }

  virtual ~IKeysModule_joinPairs_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_joinPairs_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_joinPairs_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_joinPairs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_joinPairs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_joinPairs_presult__isset {
  _IKeysModule_joinPairs_presult__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_joinPairs_presult__isset;

class IKeysModule_joinPairs_presult {
 public:


  virtual ~IKeysModule_joinPairs_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_joinPairs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IKeysModule_reset_args {
 public:

  IKeysModule_reset_args(const IKeysModule_reset_args&);
  IKeysModule_reset_args& operator=(const IKeysModule_reset_args&);
  IKeysModule_reset_args() {
  }

  virtual ~IKeysModule_reset_args() throw();

  bool operator == (const IKeysModule_reset_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IKeysModule_reset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_reset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IKeysModule_reset_pargs {
 public:


  virtual ~IKeysModule_reset_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_reset_result__isset {
  _IKeysModule_reset_result__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_reset_result__isset;

class IKeysModule_reset_result {
 public:

  IKeysModule_reset_result(const IKeysModule_reset_result&);
  IKeysModule_reset_result& operator=(const IKeysModule_reset_result&);
  IKeysModule_reset_result() {
  }

  virtual ~IKeysModule_reset_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_reset_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IKeysModule_reset_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IKeysModule_reset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IKeysModule_reset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IKeysModule_reset_presult__isset {
  _IKeysModule_reset_presult__isset() : ex(false) {}
  bool ex :1;
} _IKeysModule_reset_presult__isset;

class IKeysModule_reset_presult {
 public:


  virtual ~IKeysModule_reset_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IKeysModule_reset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IKeysModuleClient : virtual public IKeysModuleIf {
 public:
  IKeysModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IKeysModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getKeys(std::unordered_map<int64_t, int64_t>& _return, const bool single);
  void send_getKeys(const bool single);
  void recv_getKeys(std::unordered_map<int64_t, int64_t>& _return);
  void sendPairs(const std::string& addr, const std::vector<int64_t> & keys_id);
  void send_sendPairs(const std::string& addr, const std::vector<int64_t> & keys_id);
  void recv_sendPairs();
  void joinPairs();
  void send_joinPairs();
  void recv_joinPairs();
  void reset();
  void send_reset();
  void recv_reset();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IKeysModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IKeysModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendPairs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_joinPairs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IKeysModuleProcessor(::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> iface) :
    iface_(iface) {
    processMap_["getKeys"] = &IKeysModuleProcessor::process_getKeys;
    processMap_["sendPairs"] = &IKeysModuleProcessor::process_sendPairs;
    processMap_["joinPairs"] = &IKeysModuleProcessor::process_joinPairs;
    processMap_["reset"] = &IKeysModuleProcessor::process_reset;
  }

  virtual ~IKeysModuleProcessor() {}
};

class IKeysModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IKeysModuleProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IKeysModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IKeysModuleIfFactory > handlerFactory_;
};

class IKeysModuleMultiface : virtual public IKeysModuleIf {
 public:
  IKeysModuleMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IKeysModuleMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> > ifaces_;
  IKeysModuleMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IKeysModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getKeys(std::unordered_map<int64_t, int64_t>& _return, const bool single) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getKeys(_return, single);
    }
    ifaces_[i]->getKeys(_return, single);
    return;
  }

  void sendPairs(const std::string& addr, const std::vector<int64_t> & keys_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendPairs(addr, keys_id);
    }
    ifaces_[i]->sendPairs(addr, keys_id);
  }

  void joinPairs() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->joinPairs();
    }
    ifaces_[i]->joinPairs();
  }

  void reset() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset();
    }
    ifaces_[i]->reset();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IKeysModuleConcurrentClient : virtual public IKeysModuleIf {
 public:
  IKeysModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IKeysModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getKeys(std::unordered_map<int64_t, int64_t>& _return, const bool single);
  int32_t send_getKeys(const bool single);
  void recv_getKeys(std::unordered_map<int64_t, int64_t>& _return, const int32_t seqid);
  void sendPairs(const std::string& addr, const std::vector<int64_t> & keys_id);
  int32_t send_sendPairs(const std::string& addr, const std::vector<int64_t> & keys_id);
  void recv_sendPairs(const int32_t seqid);
  void joinPairs();
  int32_t send_joinPairs();
  void recv_joinPairs(const int32_t seqid);
  void reset();
  int32_t send_reset();
  void recv_reset(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
