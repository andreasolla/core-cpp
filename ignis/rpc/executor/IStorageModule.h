/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IStorageModule_H
#define IStorageModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IStorageModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IStorageModuleIf {
 public:
  virtual ~IStorageModuleIf() {}
  virtual int64_t count() = 0;
  virtual void cache(const int64_t id) = 0;
  virtual void uncache(const int64_t id) = 0;
  virtual void loadCache(const int64_t id) = 0;
  virtual void saveContext(const int64_t id) = 0;
  virtual void loadContext(const int64_t id) = 0;
  virtual void take(std::string& _return, const int64_t msg_id, const std::string& addr, const int64_t n, const bool light) = 0;
  virtual void takeSample(std::string& _return, const int64_t msg_id, const std::string& addr, const int64_t n, const bool withRemplacement, const int32_t seed, const bool light) = 0;
  virtual void collect(std::string& _return, const int64_t msg_id, const std::string& addr, const bool light) = 0;
};

class IStorageModuleIfFactory {
 public:
  typedef IStorageModuleIf Handler;

  virtual ~IStorageModuleIfFactory() {}

  virtual IStorageModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IStorageModuleIf* /* handler */) = 0;
};

class IStorageModuleIfSingletonFactory : virtual public IStorageModuleIfFactory {
 public:
  IStorageModuleIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IStorageModuleIf>& iface) : iface_(iface) {}
  virtual ~IStorageModuleIfSingletonFactory() {}

  virtual IStorageModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IStorageModuleIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IStorageModuleIf> iface_;
};

class IStorageModuleNull : virtual public IStorageModuleIf {
 public:
  virtual ~IStorageModuleNull() {}
  int64_t count() {
    int64_t _return = 0;
    return _return;
  }
  void cache(const int64_t /* id */) {
    return;
  }
  void uncache(const int64_t /* id */) {
    return;
  }
  void loadCache(const int64_t /* id */) {
    return;
  }
  void saveContext(const int64_t /* id */) {
    return;
  }
  void loadContext(const int64_t /* id */) {
    return;
  }
  void take(std::string& /* _return */, const int64_t /* msg_id */, const std::string& /* addr */, const int64_t /* n */, const bool /* light */) {
    return;
  }
  void takeSample(std::string& /* _return */, const int64_t /* msg_id */, const std::string& /* addr */, const int64_t /* n */, const bool /* withRemplacement */, const int32_t /* seed */, const bool /* light */) {
    return;
  }
  void collect(std::string& /* _return */, const int64_t /* msg_id */, const std::string& /* addr */, const bool /* light */) {
    return;
  }
};


class IStorageModule_count_args {
 public:

  IStorageModule_count_args(const IStorageModule_count_args&);
  IStorageModule_count_args& operator=(const IStorageModule_count_args&);
  IStorageModule_count_args() {
  }

  virtual ~IStorageModule_count_args() throw();

  bool operator == (const IStorageModule_count_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IStorageModule_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_count_pargs {
 public:


  virtual ~IStorageModule_count_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_count_result__isset {
  _IStorageModule_count_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IStorageModule_count_result__isset;

class IStorageModule_count_result {
 public:

  IStorageModule_count_result(const IStorageModule_count_result&);
  IStorageModule_count_result& operator=(const IStorageModule_count_result&);
  IStorageModule_count_result() : success(0) {
  }

  virtual ~IStorageModule_count_result() throw();
  int64_t success;
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_count_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_count_presult__isset {
  _IStorageModule_count_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IStorageModule_count_presult__isset;

class IStorageModule_count_presult {
 public:


  virtual ~IStorageModule_count_presult() throw();
  int64_t* success;
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IStorageModule_cache_args__isset {
  _IStorageModule_cache_args__isset() : id(false) {}
  bool id :1;
} _IStorageModule_cache_args__isset;

class IStorageModule_cache_args {
 public:

  IStorageModule_cache_args(const IStorageModule_cache_args&);
  IStorageModule_cache_args& operator=(const IStorageModule_cache_args&);
  IStorageModule_cache_args() : id(0) {
  }

  virtual ~IStorageModule_cache_args() throw();
  int64_t id;

  _IStorageModule_cache_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IStorageModule_cache_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_cache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_cache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_cache_pargs {
 public:


  virtual ~IStorageModule_cache_pargs() throw();
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_cache_result__isset {
  _IStorageModule_cache_result__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_cache_result__isset;

class IStorageModule_cache_result {
 public:

  IStorageModule_cache_result(const IStorageModule_cache_result&);
  IStorageModule_cache_result& operator=(const IStorageModule_cache_result&);
  IStorageModule_cache_result() {
  }

  virtual ~IStorageModule_cache_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_cache_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_cache_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_cache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_cache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_cache_presult__isset {
  _IStorageModule_cache_presult__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_cache_presult__isset;

class IStorageModule_cache_presult {
 public:


  virtual ~IStorageModule_cache_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_cache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IStorageModule_uncache_args__isset {
  _IStorageModule_uncache_args__isset() : id(false) {}
  bool id :1;
} _IStorageModule_uncache_args__isset;

class IStorageModule_uncache_args {
 public:

  IStorageModule_uncache_args(const IStorageModule_uncache_args&);
  IStorageModule_uncache_args& operator=(const IStorageModule_uncache_args&);
  IStorageModule_uncache_args() : id(0) {
  }

  virtual ~IStorageModule_uncache_args() throw();
  int64_t id;

  _IStorageModule_uncache_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IStorageModule_uncache_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_uncache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_uncache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_uncache_pargs {
 public:


  virtual ~IStorageModule_uncache_pargs() throw();
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_uncache_result__isset {
  _IStorageModule_uncache_result__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_uncache_result__isset;

class IStorageModule_uncache_result {
 public:

  IStorageModule_uncache_result(const IStorageModule_uncache_result&);
  IStorageModule_uncache_result& operator=(const IStorageModule_uncache_result&);
  IStorageModule_uncache_result() {
  }

  virtual ~IStorageModule_uncache_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_uncache_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_uncache_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_uncache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_uncache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_uncache_presult__isset {
  _IStorageModule_uncache_presult__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_uncache_presult__isset;

class IStorageModule_uncache_presult {
 public:


  virtual ~IStorageModule_uncache_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_uncache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IStorageModule_loadCache_args__isset {
  _IStorageModule_loadCache_args__isset() : id(false) {}
  bool id :1;
} _IStorageModule_loadCache_args__isset;

class IStorageModule_loadCache_args {
 public:

  IStorageModule_loadCache_args(const IStorageModule_loadCache_args&);
  IStorageModule_loadCache_args& operator=(const IStorageModule_loadCache_args&);
  IStorageModule_loadCache_args() : id(0) {
  }

  virtual ~IStorageModule_loadCache_args() throw();
  int64_t id;

  _IStorageModule_loadCache_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IStorageModule_loadCache_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_loadCache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_loadCache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_loadCache_pargs {
 public:


  virtual ~IStorageModule_loadCache_pargs() throw();
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_loadCache_result__isset {
  _IStorageModule_loadCache_result__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_loadCache_result__isset;

class IStorageModule_loadCache_result {
 public:

  IStorageModule_loadCache_result(const IStorageModule_loadCache_result&);
  IStorageModule_loadCache_result& operator=(const IStorageModule_loadCache_result&);
  IStorageModule_loadCache_result() {
  }

  virtual ~IStorageModule_loadCache_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_loadCache_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_loadCache_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_loadCache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_loadCache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_loadCache_presult__isset {
  _IStorageModule_loadCache_presult__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_loadCache_presult__isset;

class IStorageModule_loadCache_presult {
 public:


  virtual ~IStorageModule_loadCache_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_loadCache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IStorageModule_saveContext_args__isset {
  _IStorageModule_saveContext_args__isset() : id(false) {}
  bool id :1;
} _IStorageModule_saveContext_args__isset;

class IStorageModule_saveContext_args {
 public:

  IStorageModule_saveContext_args(const IStorageModule_saveContext_args&);
  IStorageModule_saveContext_args& operator=(const IStorageModule_saveContext_args&);
  IStorageModule_saveContext_args() : id(0) {
  }

  virtual ~IStorageModule_saveContext_args() throw();
  int64_t id;

  _IStorageModule_saveContext_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IStorageModule_saveContext_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_saveContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_saveContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_saveContext_pargs {
 public:


  virtual ~IStorageModule_saveContext_pargs() throw();
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_saveContext_result__isset {
  _IStorageModule_saveContext_result__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_saveContext_result__isset;

class IStorageModule_saveContext_result {
 public:

  IStorageModule_saveContext_result(const IStorageModule_saveContext_result&);
  IStorageModule_saveContext_result& operator=(const IStorageModule_saveContext_result&);
  IStorageModule_saveContext_result() {
  }

  virtual ~IStorageModule_saveContext_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_saveContext_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_saveContext_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_saveContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_saveContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_saveContext_presult__isset {
  _IStorageModule_saveContext_presult__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_saveContext_presult__isset;

class IStorageModule_saveContext_presult {
 public:


  virtual ~IStorageModule_saveContext_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_saveContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IStorageModule_loadContext_args__isset {
  _IStorageModule_loadContext_args__isset() : id(false) {}
  bool id :1;
} _IStorageModule_loadContext_args__isset;

class IStorageModule_loadContext_args {
 public:

  IStorageModule_loadContext_args(const IStorageModule_loadContext_args&);
  IStorageModule_loadContext_args& operator=(const IStorageModule_loadContext_args&);
  IStorageModule_loadContext_args() : id(0) {
  }

  virtual ~IStorageModule_loadContext_args() throw();
  int64_t id;

  _IStorageModule_loadContext_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const IStorageModule_loadContext_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_loadContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_loadContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_loadContext_pargs {
 public:


  virtual ~IStorageModule_loadContext_pargs() throw();
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_loadContext_result__isset {
  _IStorageModule_loadContext_result__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_loadContext_result__isset;

class IStorageModule_loadContext_result {
 public:

  IStorageModule_loadContext_result(const IStorageModule_loadContext_result&);
  IStorageModule_loadContext_result& operator=(const IStorageModule_loadContext_result&);
  IStorageModule_loadContext_result() {
  }

  virtual ~IStorageModule_loadContext_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_loadContext_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_loadContext_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_loadContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_loadContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_loadContext_presult__isset {
  _IStorageModule_loadContext_presult__isset() : ex(false) {}
  bool ex :1;
} _IStorageModule_loadContext_presult__isset;

class IStorageModule_loadContext_presult {
 public:


  virtual ~IStorageModule_loadContext_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_loadContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IStorageModule_take_args__isset {
  _IStorageModule_take_args__isset() : msg_id(false), addr(false), n(false), light(false) {}
  bool msg_id :1;
  bool addr :1;
  bool n :1;
  bool light :1;
} _IStorageModule_take_args__isset;

class IStorageModule_take_args {
 public:

  IStorageModule_take_args(const IStorageModule_take_args&);
  IStorageModule_take_args& operator=(const IStorageModule_take_args&);
  IStorageModule_take_args() : msg_id(0), addr(), n(0), light(0) {
  }

  virtual ~IStorageModule_take_args() throw();
  int64_t msg_id;
  std::string addr;
  int64_t n;
  bool light;

  _IStorageModule_take_args__isset __isset;

  void __set_msg_id(const int64_t val);

  void __set_addr(const std::string& val);

  void __set_n(const int64_t val);

  void __set_light(const bool val);

  bool operator == (const IStorageModule_take_args & rhs) const
  {
    if (!(msg_id == rhs.msg_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(n == rhs.n))
      return false;
    if (!(light == rhs.light))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_take_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_take_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_take_pargs {
 public:


  virtual ~IStorageModule_take_pargs() throw();
  const int64_t* msg_id;
  const std::string* addr;
  const int64_t* n;
  const bool* light;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_take_result__isset {
  _IStorageModule_take_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IStorageModule_take_result__isset;

class IStorageModule_take_result {
 public:

  IStorageModule_take_result(const IStorageModule_take_result&);
  IStorageModule_take_result& operator=(const IStorageModule_take_result&);
  IStorageModule_take_result() : success() {
  }

  virtual ~IStorageModule_take_result() throw();
  std::string success;
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_take_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_take_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_take_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_take_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_take_presult__isset {
  _IStorageModule_take_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IStorageModule_take_presult__isset;

class IStorageModule_take_presult {
 public:


  virtual ~IStorageModule_take_presult() throw();
  std::string* success;
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_take_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IStorageModule_takeSample_args__isset {
  _IStorageModule_takeSample_args__isset() : msg_id(false), addr(false), n(false), withRemplacement(false), seed(false), light(false) {}
  bool msg_id :1;
  bool addr :1;
  bool n :1;
  bool withRemplacement :1;
  bool seed :1;
  bool light :1;
} _IStorageModule_takeSample_args__isset;

class IStorageModule_takeSample_args {
 public:

  IStorageModule_takeSample_args(const IStorageModule_takeSample_args&);
  IStorageModule_takeSample_args& operator=(const IStorageModule_takeSample_args&);
  IStorageModule_takeSample_args() : msg_id(0), addr(), n(0), withRemplacement(0), seed(0), light(0) {
  }

  virtual ~IStorageModule_takeSample_args() throw();
  int64_t msg_id;
  std::string addr;
  int64_t n;
  bool withRemplacement;
  int32_t seed;
  bool light;

  _IStorageModule_takeSample_args__isset __isset;

  void __set_msg_id(const int64_t val);

  void __set_addr(const std::string& val);

  void __set_n(const int64_t val);

  void __set_withRemplacement(const bool val);

  void __set_seed(const int32_t val);

  void __set_light(const bool val);

  bool operator == (const IStorageModule_takeSample_args & rhs) const
  {
    if (!(msg_id == rhs.msg_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(n == rhs.n))
      return false;
    if (!(withRemplacement == rhs.withRemplacement))
      return false;
    if (!(seed == rhs.seed))
      return false;
    if (!(light == rhs.light))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_takeSample_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_takeSample_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_takeSample_pargs {
 public:


  virtual ~IStorageModule_takeSample_pargs() throw();
  const int64_t* msg_id;
  const std::string* addr;
  const int64_t* n;
  const bool* withRemplacement;
  const int32_t* seed;
  const bool* light;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_takeSample_result__isset {
  _IStorageModule_takeSample_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IStorageModule_takeSample_result__isset;

class IStorageModule_takeSample_result {
 public:

  IStorageModule_takeSample_result(const IStorageModule_takeSample_result&);
  IStorageModule_takeSample_result& operator=(const IStorageModule_takeSample_result&);
  IStorageModule_takeSample_result() : success() {
  }

  virtual ~IStorageModule_takeSample_result() throw();
  std::string success;
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_takeSample_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_takeSample_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_takeSample_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_takeSample_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_takeSample_presult__isset {
  _IStorageModule_takeSample_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IStorageModule_takeSample_presult__isset;

class IStorageModule_takeSample_presult {
 public:


  virtual ~IStorageModule_takeSample_presult() throw();
  std::string* success;
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_takeSample_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IStorageModule_collect_args__isset {
  _IStorageModule_collect_args__isset() : msg_id(false), addr(false), light(false) {}
  bool msg_id :1;
  bool addr :1;
  bool light :1;
} _IStorageModule_collect_args__isset;

class IStorageModule_collect_args {
 public:

  IStorageModule_collect_args(const IStorageModule_collect_args&);
  IStorageModule_collect_args& operator=(const IStorageModule_collect_args&);
  IStorageModule_collect_args() : msg_id(0), addr(), light(0) {
  }

  virtual ~IStorageModule_collect_args() throw();
  int64_t msg_id;
  std::string addr;
  bool light;

  _IStorageModule_collect_args__isset __isset;

  void __set_msg_id(const int64_t val);

  void __set_addr(const std::string& val);

  void __set_light(const bool val);

  bool operator == (const IStorageModule_collect_args & rhs) const
  {
    if (!(msg_id == rhs.msg_id))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(light == rhs.light))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_collect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_collect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IStorageModule_collect_pargs {
 public:


  virtual ~IStorageModule_collect_pargs() throw();
  const int64_t* msg_id;
  const std::string* addr;
  const bool* light;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_collect_result__isset {
  _IStorageModule_collect_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IStorageModule_collect_result__isset;

class IStorageModule_collect_result {
 public:

  IStorageModule_collect_result(const IStorageModule_collect_result&);
  IStorageModule_collect_result& operator=(const IStorageModule_collect_result&);
  IStorageModule_collect_result() : success() {
  }

  virtual ~IStorageModule_collect_result() throw();
  std::string success;
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_collect_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IStorageModule_collect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IStorageModule_collect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IStorageModule_collect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IStorageModule_collect_presult__isset {
  _IStorageModule_collect_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IStorageModule_collect_presult__isset;

class IStorageModule_collect_presult {
 public:


  virtual ~IStorageModule_collect_presult() throw();
  std::string* success;
   ::ignis::rpc::IRemoteException ex;

  _IStorageModule_collect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IStorageModuleClient : virtual public IStorageModuleIf {
 public:
  IStorageModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IStorageModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t count();
  void send_count();
  int64_t recv_count();
  void cache(const int64_t id);
  void send_cache(const int64_t id);
  void recv_cache();
  void uncache(const int64_t id);
  void send_uncache(const int64_t id);
  void recv_uncache();
  void loadCache(const int64_t id);
  void send_loadCache(const int64_t id);
  void recv_loadCache();
  void saveContext(const int64_t id);
  void send_saveContext(const int64_t id);
  void recv_saveContext();
  void loadContext(const int64_t id);
  void send_loadContext(const int64_t id);
  void recv_loadContext();
  void take(std::string& _return, const int64_t msg_id, const std::string& addr, const int64_t n, const bool light);
  void send_take(const int64_t msg_id, const std::string& addr, const int64_t n, const bool light);
  void recv_take(std::string& _return);
  void takeSample(std::string& _return, const int64_t msg_id, const std::string& addr, const int64_t n, const bool withRemplacement, const int32_t seed, const bool light);
  void send_takeSample(const int64_t msg_id, const std::string& addr, const int64_t n, const bool withRemplacement, const int32_t seed, const bool light);
  void recv_takeSample(std::string& _return);
  void collect(std::string& _return, const int64_t msg_id, const std::string& addr, const bool light);
  void send_collect(const int64_t msg_id, const std::string& addr, const bool light);
  void recv_collect(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IStorageModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IStorageModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IStorageModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_uncache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadCache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_takeSample(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_collect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IStorageModuleProcessor(::apache::thrift::stdcxx::shared_ptr<IStorageModuleIf> iface) :
    iface_(iface) {
    processMap_["count"] = &IStorageModuleProcessor::process_count;
    processMap_["cache"] = &IStorageModuleProcessor::process_cache;
    processMap_["uncache"] = &IStorageModuleProcessor::process_uncache;
    processMap_["loadCache"] = &IStorageModuleProcessor::process_loadCache;
    processMap_["saveContext"] = &IStorageModuleProcessor::process_saveContext;
    processMap_["loadContext"] = &IStorageModuleProcessor::process_loadContext;
    processMap_["take"] = &IStorageModuleProcessor::process_take;
    processMap_["takeSample"] = &IStorageModuleProcessor::process_takeSample;
    processMap_["collect"] = &IStorageModuleProcessor::process_collect;
  }

  virtual ~IStorageModuleProcessor() {}
};

class IStorageModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IStorageModuleProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IStorageModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IStorageModuleIfFactory > handlerFactory_;
};

class IStorageModuleMultiface : virtual public IStorageModuleIf {
 public:
  IStorageModuleMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IStorageModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IStorageModuleMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IStorageModuleIf> > ifaces_;
  IStorageModuleMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IStorageModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t count() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->count();
    }
    return ifaces_[i]->count();
  }

  void cache(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cache(id);
    }
    ifaces_[i]->cache(id);
  }

  void uncache(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uncache(id);
    }
    ifaces_[i]->uncache(id);
  }

  void loadCache(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadCache(id);
    }
    ifaces_[i]->loadCache(id);
  }

  void saveContext(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveContext(id);
    }
    ifaces_[i]->saveContext(id);
  }

  void loadContext(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadContext(id);
    }
    ifaces_[i]->loadContext(id);
  }

  void take(std::string& _return, const int64_t msg_id, const std::string& addr, const int64_t n, const bool light) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take(_return, msg_id, addr, n, light);
    }
    ifaces_[i]->take(_return, msg_id, addr, n, light);
    return;
  }

  void takeSample(std::string& _return, const int64_t msg_id, const std::string& addr, const int64_t n, const bool withRemplacement, const int32_t seed, const bool light) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->takeSample(_return, msg_id, addr, n, withRemplacement, seed, light);
    }
    ifaces_[i]->takeSample(_return, msg_id, addr, n, withRemplacement, seed, light);
    return;
  }

  void collect(std::string& _return, const int64_t msg_id, const std::string& addr, const bool light) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->collect(_return, msg_id, addr, light);
    }
    ifaces_[i]->collect(_return, msg_id, addr, light);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IStorageModuleConcurrentClient : virtual public IStorageModuleIf {
 public:
  IStorageModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IStorageModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t count();
  int32_t send_count();
  int64_t recv_count(const int32_t seqid);
  void cache(const int64_t id);
  int32_t send_cache(const int64_t id);
  void recv_cache(const int32_t seqid);
  void uncache(const int64_t id);
  int32_t send_uncache(const int64_t id);
  void recv_uncache(const int32_t seqid);
  void loadCache(const int64_t id);
  int32_t send_loadCache(const int64_t id);
  void recv_loadCache(const int32_t seqid);
  void saveContext(const int64_t id);
  int32_t send_saveContext(const int64_t id);
  void recv_saveContext(const int32_t seqid);
  void loadContext(const int64_t id);
  int32_t send_loadContext(const int64_t id);
  void recv_loadContext(const int32_t seqid);
  void take(std::string& _return, const int64_t msg_id, const std::string& addr, const int64_t n, const bool light);
  int32_t send_take(const int64_t msg_id, const std::string& addr, const int64_t n, const bool light);
  void recv_take(std::string& _return, const int32_t seqid);
  void takeSample(std::string& _return, const int64_t msg_id, const std::string& addr, const int64_t n, const bool withRemplacement, const int32_t seed, const bool light);
  int32_t send_takeSample(const int64_t msg_id, const std::string& addr, const int64_t n, const bool withRemplacement, const int32_t seed, const bool light);
  void recv_takeSample(std::string& _return, const int32_t seqid);
  void collect(std::string& _return, const int64_t msg_id, const std::string& addr, const bool light);
  int32_t send_collect(const int64_t msg_id, const std::string& addr, const bool light);
  void recv_collect(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
