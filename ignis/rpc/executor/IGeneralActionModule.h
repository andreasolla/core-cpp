/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IGeneralActionModule_H
#define IGeneralActionModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "IGeneralActionModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IGeneralActionModuleIf {
 public:
  virtual ~IGeneralActionModuleIf() {}
  virtual void reduce(const  ::ignis::rpc::ISource& src) = 0;
  virtual void treeReduce(const  ::ignis::rpc::ISource& src, const int64_t depth) = 0;
  virtual void collect() = 0;
  virtual void aggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp) = 0;
  virtual void treeAggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t depth) = 0;
  virtual void fold(const  ::ignis::rpc::ISource& src) = 0;
  virtual void take(const int64_t num) = 0;
  virtual void foreach_(const  ::ignis::rpc::ISource& src) = 0;
  virtual void foreachPartition(const  ::ignis::rpc::ISource& src) = 0;
  virtual void top(const int64_t num) = 0;
  virtual void top2(const int64_t num, const  ::ignis::rpc::ISource& cmp) = 0;
};

class IGeneralActionModuleIfFactory {
 public:
  typedef IGeneralActionModuleIf Handler;

  virtual ~IGeneralActionModuleIfFactory() {}

  virtual IGeneralActionModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IGeneralActionModuleIf* /* handler */) = 0;
};

class IGeneralActionModuleIfSingletonFactory : virtual public IGeneralActionModuleIfFactory {
 public:
  IGeneralActionModuleIfSingletonFactory(const ::std::shared_ptr<IGeneralActionModuleIf>& iface) : iface_(iface) {}
  virtual ~IGeneralActionModuleIfSingletonFactory() {}

  virtual IGeneralActionModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IGeneralActionModuleIf* /* handler */) {}

 protected:
  ::std::shared_ptr<IGeneralActionModuleIf> iface_;
};

class IGeneralActionModuleNull : virtual public IGeneralActionModuleIf {
 public:
  virtual ~IGeneralActionModuleNull() {}
  void reduce(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void treeReduce(const  ::ignis::rpc::ISource& /* src */, const int64_t /* depth */) {
    return;
  }
  void collect() {
    return;
  }
  void aggregate(const  ::ignis::rpc::ISource& /* seqOp */, const  ::ignis::rpc::ISource& /* combOp */) {
    return;
  }
  void treeAggregate(const  ::ignis::rpc::ISource& /* seqOp */, const  ::ignis::rpc::ISource& /* combOp */, const int64_t /* depth */) {
    return;
  }
  void fold(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void take(const int64_t /* num */) {
    return;
  }
  void foreach_(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void foreachPartition(const  ::ignis::rpc::ISource& /* src */) {
    return;
  }
  void top(const int64_t /* num */) {
    return;
  }
  void top2(const int64_t /* num */, const  ::ignis::rpc::ISource& /* cmp */) {
    return;
  }
};

typedef struct _IGeneralActionModule_reduce_args__isset {
  _IGeneralActionModule_reduce_args__isset() : src(false) {}
  bool src :1;
} _IGeneralActionModule_reduce_args__isset;

class IGeneralActionModule_reduce_args {
 public:

  IGeneralActionModule_reduce_args(const IGeneralActionModule_reduce_args&);
  IGeneralActionModule_reduce_args& operator=(const IGeneralActionModule_reduce_args&);
  IGeneralActionModule_reduce_args() {
  }

  virtual ~IGeneralActionModule_reduce_args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralActionModule_reduce_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralActionModule_reduce_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_reduce_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_reduce_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_reduce_pargs {
 public:


  virtual ~IGeneralActionModule_reduce_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_reduce_result__isset {
  _IGeneralActionModule_reduce_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_reduce_result__isset;

class IGeneralActionModule_reduce_result {
 public:

  IGeneralActionModule_reduce_result(const IGeneralActionModule_reduce_result&);
  IGeneralActionModule_reduce_result& operator=(const IGeneralActionModule_reduce_result&);
  IGeneralActionModule_reduce_result() {
  }

  virtual ~IGeneralActionModule_reduce_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_reduce_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_reduce_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_reduce_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_reduce_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_reduce_presult__isset {
  _IGeneralActionModule_reduce_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_reduce_presult__isset;

class IGeneralActionModule_reduce_presult {
 public:


  virtual ~IGeneralActionModule_reduce_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_reduce_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_treeReduce_args__isset {
  _IGeneralActionModule_treeReduce_args__isset() : src(false), depth(false) {}
  bool src :1;
  bool depth :1;
} _IGeneralActionModule_treeReduce_args__isset;

class IGeneralActionModule_treeReduce_args {
 public:

  IGeneralActionModule_treeReduce_args(const IGeneralActionModule_treeReduce_args&);
  IGeneralActionModule_treeReduce_args& operator=(const IGeneralActionModule_treeReduce_args&);
  IGeneralActionModule_treeReduce_args() : depth(0) {
  }

  virtual ~IGeneralActionModule_treeReduce_args() noexcept;
   ::ignis::rpc::ISource src;
  int64_t depth;

  _IGeneralActionModule_treeReduce_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  void __set_depth(const int64_t val);

  bool operator == (const IGeneralActionModule_treeReduce_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(depth == rhs.depth))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_treeReduce_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_treeReduce_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_treeReduce_pargs {
 public:


  virtual ~IGeneralActionModule_treeReduce_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;
  const int64_t* depth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_treeReduce_result__isset {
  _IGeneralActionModule_treeReduce_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_treeReduce_result__isset;

class IGeneralActionModule_treeReduce_result {
 public:

  IGeneralActionModule_treeReduce_result(const IGeneralActionModule_treeReduce_result&);
  IGeneralActionModule_treeReduce_result& operator=(const IGeneralActionModule_treeReduce_result&);
  IGeneralActionModule_treeReduce_result() {
  }

  virtual ~IGeneralActionModule_treeReduce_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_treeReduce_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_treeReduce_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_treeReduce_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_treeReduce_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_treeReduce_presult__isset {
  _IGeneralActionModule_treeReduce_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_treeReduce_presult__isset;

class IGeneralActionModule_treeReduce_presult {
 public:


  virtual ~IGeneralActionModule_treeReduce_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_treeReduce_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IGeneralActionModule_collect_args {
 public:

  IGeneralActionModule_collect_args(const IGeneralActionModule_collect_args&);
  IGeneralActionModule_collect_args& operator=(const IGeneralActionModule_collect_args&);
  IGeneralActionModule_collect_args() {
  }

  virtual ~IGeneralActionModule_collect_args() noexcept;

  bool operator == (const IGeneralActionModule_collect_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IGeneralActionModule_collect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_collect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_collect_pargs {
 public:


  virtual ~IGeneralActionModule_collect_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_collect_result__isset {
  _IGeneralActionModule_collect_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_collect_result__isset;

class IGeneralActionModule_collect_result {
 public:

  IGeneralActionModule_collect_result(const IGeneralActionModule_collect_result&);
  IGeneralActionModule_collect_result& operator=(const IGeneralActionModule_collect_result&);
  IGeneralActionModule_collect_result() {
  }

  virtual ~IGeneralActionModule_collect_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_collect_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_collect_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_collect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_collect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_collect_presult__isset {
  _IGeneralActionModule_collect_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_collect_presult__isset;

class IGeneralActionModule_collect_presult {
 public:


  virtual ~IGeneralActionModule_collect_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_collect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_aggregate_args__isset {
  _IGeneralActionModule_aggregate_args__isset() : seqOp(false), combOp(false) {}
  bool seqOp :1;
  bool combOp :1;
} _IGeneralActionModule_aggregate_args__isset;

class IGeneralActionModule_aggregate_args {
 public:

  IGeneralActionModule_aggregate_args(const IGeneralActionModule_aggregate_args&);
  IGeneralActionModule_aggregate_args& operator=(const IGeneralActionModule_aggregate_args&);
  IGeneralActionModule_aggregate_args() {
  }

  virtual ~IGeneralActionModule_aggregate_args() noexcept;
   ::ignis::rpc::ISource seqOp;
   ::ignis::rpc::ISource combOp;

  _IGeneralActionModule_aggregate_args__isset __isset;

  void __set_seqOp(const  ::ignis::rpc::ISource& val);

  void __set_combOp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralActionModule_aggregate_args & rhs) const
  {
    if (!(seqOp == rhs.seqOp))
      return false;
    if (!(combOp == rhs.combOp))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_aggregate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_aggregate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_aggregate_pargs {
 public:


  virtual ~IGeneralActionModule_aggregate_pargs() noexcept;
  const  ::ignis::rpc::ISource* seqOp;
  const  ::ignis::rpc::ISource* combOp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_aggregate_result__isset {
  _IGeneralActionModule_aggregate_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_aggregate_result__isset;

class IGeneralActionModule_aggregate_result {
 public:

  IGeneralActionModule_aggregate_result(const IGeneralActionModule_aggregate_result&);
  IGeneralActionModule_aggregate_result& operator=(const IGeneralActionModule_aggregate_result&);
  IGeneralActionModule_aggregate_result() {
  }

  virtual ~IGeneralActionModule_aggregate_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_aggregate_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_aggregate_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_aggregate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_aggregate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_aggregate_presult__isset {
  _IGeneralActionModule_aggregate_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_aggregate_presult__isset;

class IGeneralActionModule_aggregate_presult {
 public:


  virtual ~IGeneralActionModule_aggregate_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_aggregate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_treeAggregate_args__isset {
  _IGeneralActionModule_treeAggregate_args__isset() : seqOp(false), combOp(false), depth(false) {}
  bool seqOp :1;
  bool combOp :1;
  bool depth :1;
} _IGeneralActionModule_treeAggregate_args__isset;

class IGeneralActionModule_treeAggregate_args {
 public:

  IGeneralActionModule_treeAggregate_args(const IGeneralActionModule_treeAggregate_args&);
  IGeneralActionModule_treeAggregate_args& operator=(const IGeneralActionModule_treeAggregate_args&);
  IGeneralActionModule_treeAggregate_args() : depth(0) {
  }

  virtual ~IGeneralActionModule_treeAggregate_args() noexcept;
   ::ignis::rpc::ISource seqOp;
   ::ignis::rpc::ISource combOp;
  int64_t depth;

  _IGeneralActionModule_treeAggregate_args__isset __isset;

  void __set_seqOp(const  ::ignis::rpc::ISource& val);

  void __set_combOp(const  ::ignis::rpc::ISource& val);

  void __set_depth(const int64_t val);

  bool operator == (const IGeneralActionModule_treeAggregate_args & rhs) const
  {
    if (!(seqOp == rhs.seqOp))
      return false;
    if (!(combOp == rhs.combOp))
      return false;
    if (!(depth == rhs.depth))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_treeAggregate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_treeAggregate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_treeAggregate_pargs {
 public:


  virtual ~IGeneralActionModule_treeAggregate_pargs() noexcept;
  const  ::ignis::rpc::ISource* seqOp;
  const  ::ignis::rpc::ISource* combOp;
  const int64_t* depth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_treeAggregate_result__isset {
  _IGeneralActionModule_treeAggregate_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_treeAggregate_result__isset;

class IGeneralActionModule_treeAggregate_result {
 public:

  IGeneralActionModule_treeAggregate_result(const IGeneralActionModule_treeAggregate_result&);
  IGeneralActionModule_treeAggregate_result& operator=(const IGeneralActionModule_treeAggregate_result&);
  IGeneralActionModule_treeAggregate_result() {
  }

  virtual ~IGeneralActionModule_treeAggregate_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_treeAggregate_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_treeAggregate_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_treeAggregate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_treeAggregate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_treeAggregate_presult__isset {
  _IGeneralActionModule_treeAggregate_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_treeAggregate_presult__isset;

class IGeneralActionModule_treeAggregate_presult {
 public:


  virtual ~IGeneralActionModule_treeAggregate_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_treeAggregate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_fold_args__isset {
  _IGeneralActionModule_fold_args__isset() : src(false) {}
  bool src :1;
} _IGeneralActionModule_fold_args__isset;

class IGeneralActionModule_fold_args {
 public:

  IGeneralActionModule_fold_args(const IGeneralActionModule_fold_args&);
  IGeneralActionModule_fold_args& operator=(const IGeneralActionModule_fold_args&);
  IGeneralActionModule_fold_args() {
  }

  virtual ~IGeneralActionModule_fold_args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralActionModule_fold_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralActionModule_fold_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_fold_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_fold_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_fold_pargs {
 public:


  virtual ~IGeneralActionModule_fold_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_fold_result__isset {
  _IGeneralActionModule_fold_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_fold_result__isset;

class IGeneralActionModule_fold_result {
 public:

  IGeneralActionModule_fold_result(const IGeneralActionModule_fold_result&);
  IGeneralActionModule_fold_result& operator=(const IGeneralActionModule_fold_result&);
  IGeneralActionModule_fold_result() {
  }

  virtual ~IGeneralActionModule_fold_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_fold_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_fold_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_fold_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_fold_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_fold_presult__isset {
  _IGeneralActionModule_fold_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_fold_presult__isset;

class IGeneralActionModule_fold_presult {
 public:


  virtual ~IGeneralActionModule_fold_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_fold_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_take_args__isset {
  _IGeneralActionModule_take_args__isset() : num(false) {}
  bool num :1;
} _IGeneralActionModule_take_args__isset;

class IGeneralActionModule_take_args {
 public:

  IGeneralActionModule_take_args(const IGeneralActionModule_take_args&);
  IGeneralActionModule_take_args& operator=(const IGeneralActionModule_take_args&);
  IGeneralActionModule_take_args() : num(0) {
  }

  virtual ~IGeneralActionModule_take_args() noexcept;
  int64_t num;

  _IGeneralActionModule_take_args__isset __isset;

  void __set_num(const int64_t val);

  bool operator == (const IGeneralActionModule_take_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_take_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_take_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_take_pargs {
 public:


  virtual ~IGeneralActionModule_take_pargs() noexcept;
  const int64_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_take_result__isset {
  _IGeneralActionModule_take_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_take_result__isset;

class IGeneralActionModule_take_result {
 public:

  IGeneralActionModule_take_result(const IGeneralActionModule_take_result&);
  IGeneralActionModule_take_result& operator=(const IGeneralActionModule_take_result&);
  IGeneralActionModule_take_result() {
  }

  virtual ~IGeneralActionModule_take_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_take_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_take_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_take_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_take_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_take_presult__isset {
  _IGeneralActionModule_take_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_take_presult__isset;

class IGeneralActionModule_take_presult {
 public:


  virtual ~IGeneralActionModule_take_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_take_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_foreach__args__isset {
  _IGeneralActionModule_foreach__args__isset() : src(false) {}
  bool src :1;
} _IGeneralActionModule_foreach__args__isset;

class IGeneralActionModule_foreach__args {
 public:

  IGeneralActionModule_foreach__args(const IGeneralActionModule_foreach__args&);
  IGeneralActionModule_foreach__args& operator=(const IGeneralActionModule_foreach__args&);
  IGeneralActionModule_foreach__args() {
  }

  virtual ~IGeneralActionModule_foreach__args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralActionModule_foreach__args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralActionModule_foreach__args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_foreach__args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_foreach__args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_foreach__pargs {
 public:


  virtual ~IGeneralActionModule_foreach__pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_foreach__result__isset {
  _IGeneralActionModule_foreach__result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_foreach__result__isset;

class IGeneralActionModule_foreach__result {
 public:

  IGeneralActionModule_foreach__result(const IGeneralActionModule_foreach__result&);
  IGeneralActionModule_foreach__result& operator=(const IGeneralActionModule_foreach__result&);
  IGeneralActionModule_foreach__result() {
  }

  virtual ~IGeneralActionModule_foreach__result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_foreach__result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_foreach__result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_foreach__result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_foreach__result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_foreach__presult__isset {
  _IGeneralActionModule_foreach__presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_foreach__presult__isset;

class IGeneralActionModule_foreach__presult {
 public:


  virtual ~IGeneralActionModule_foreach__presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_foreach__presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_foreachPartition_args__isset {
  _IGeneralActionModule_foreachPartition_args__isset() : src(false) {}
  bool src :1;
} _IGeneralActionModule_foreachPartition_args__isset;

class IGeneralActionModule_foreachPartition_args {
 public:

  IGeneralActionModule_foreachPartition_args(const IGeneralActionModule_foreachPartition_args&);
  IGeneralActionModule_foreachPartition_args& operator=(const IGeneralActionModule_foreachPartition_args&);
  IGeneralActionModule_foreachPartition_args() {
  }

  virtual ~IGeneralActionModule_foreachPartition_args() noexcept;
   ::ignis::rpc::ISource src;

  _IGeneralActionModule_foreachPartition_args__isset __isset;

  void __set_src(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralActionModule_foreachPartition_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_foreachPartition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_foreachPartition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_foreachPartition_pargs {
 public:


  virtual ~IGeneralActionModule_foreachPartition_pargs() noexcept;
  const  ::ignis::rpc::ISource* src;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_foreachPartition_result__isset {
  _IGeneralActionModule_foreachPartition_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_foreachPartition_result__isset;

class IGeneralActionModule_foreachPartition_result {
 public:

  IGeneralActionModule_foreachPartition_result(const IGeneralActionModule_foreachPartition_result&);
  IGeneralActionModule_foreachPartition_result& operator=(const IGeneralActionModule_foreachPartition_result&);
  IGeneralActionModule_foreachPartition_result() {
  }

  virtual ~IGeneralActionModule_foreachPartition_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_foreachPartition_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_foreachPartition_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_foreachPartition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_foreachPartition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_foreachPartition_presult__isset {
  _IGeneralActionModule_foreachPartition_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_foreachPartition_presult__isset;

class IGeneralActionModule_foreachPartition_presult {
 public:


  virtual ~IGeneralActionModule_foreachPartition_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_foreachPartition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_top_args__isset {
  _IGeneralActionModule_top_args__isset() : num(false) {}
  bool num :1;
} _IGeneralActionModule_top_args__isset;

class IGeneralActionModule_top_args {
 public:

  IGeneralActionModule_top_args(const IGeneralActionModule_top_args&);
  IGeneralActionModule_top_args& operator=(const IGeneralActionModule_top_args&);
  IGeneralActionModule_top_args() : num(0) {
  }

  virtual ~IGeneralActionModule_top_args() noexcept;
  int64_t num;

  _IGeneralActionModule_top_args__isset __isset;

  void __set_num(const int64_t val);

  bool operator == (const IGeneralActionModule_top_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_top_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_top_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_top_pargs {
 public:


  virtual ~IGeneralActionModule_top_pargs() noexcept;
  const int64_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_top_result__isset {
  _IGeneralActionModule_top_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_top_result__isset;

class IGeneralActionModule_top_result {
 public:

  IGeneralActionModule_top_result(const IGeneralActionModule_top_result&);
  IGeneralActionModule_top_result& operator=(const IGeneralActionModule_top_result&);
  IGeneralActionModule_top_result() {
  }

  virtual ~IGeneralActionModule_top_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_top_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_top_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_top_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_top_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_top_presult__isset {
  _IGeneralActionModule_top_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_top_presult__isset;

class IGeneralActionModule_top_presult {
 public:


  virtual ~IGeneralActionModule_top_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_top_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IGeneralActionModule_top2_args__isset {
  _IGeneralActionModule_top2_args__isset() : num(false), cmp(false) {}
  bool num :1;
  bool cmp :1;
} _IGeneralActionModule_top2_args__isset;

class IGeneralActionModule_top2_args {
 public:

  IGeneralActionModule_top2_args(const IGeneralActionModule_top2_args&);
  IGeneralActionModule_top2_args& operator=(const IGeneralActionModule_top2_args&);
  IGeneralActionModule_top2_args() : num(0) {
  }

  virtual ~IGeneralActionModule_top2_args() noexcept;
  int64_t num;
   ::ignis::rpc::ISource cmp;

  _IGeneralActionModule_top2_args__isset __isset;

  void __set_num(const int64_t val);

  void __set_cmp(const  ::ignis::rpc::ISource& val);

  bool operator == (const IGeneralActionModule_top2_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    if (!(cmp == rhs.cmp))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_top2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_top2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IGeneralActionModule_top2_pargs {
 public:


  virtual ~IGeneralActionModule_top2_pargs() noexcept;
  const int64_t* num;
  const  ::ignis::rpc::ISource* cmp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_top2_result__isset {
  _IGeneralActionModule_top2_result__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_top2_result__isset;

class IGeneralActionModule_top2_result {
 public:

  IGeneralActionModule_top2_result(const IGeneralActionModule_top2_result&);
  IGeneralActionModule_top2_result& operator=(const IGeneralActionModule_top2_result&);
  IGeneralActionModule_top2_result() {
  }

  virtual ~IGeneralActionModule_top2_result() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_top2_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IExecutorException& val);

  bool operator == (const IGeneralActionModule_top2_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IGeneralActionModule_top2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IGeneralActionModule_top2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IGeneralActionModule_top2_presult__isset {
  _IGeneralActionModule_top2_presult__isset() : ex(false) {}
  bool ex :1;
} _IGeneralActionModule_top2_presult__isset;

class IGeneralActionModule_top2_presult {
 public:


  virtual ~IGeneralActionModule_top2_presult() noexcept;
   ::ignis::rpc::IExecutorException ex;

  _IGeneralActionModule_top2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IGeneralActionModuleClient : virtual public IGeneralActionModuleIf {
 public:
  IGeneralActionModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IGeneralActionModuleClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void reduce(const  ::ignis::rpc::ISource& src);
  void send_reduce(const  ::ignis::rpc::ISource& src);
  void recv_reduce();
  void treeReduce(const  ::ignis::rpc::ISource& src, const int64_t depth);
  void send_treeReduce(const  ::ignis::rpc::ISource& src, const int64_t depth);
  void recv_treeReduce();
  void collect();
  void send_collect();
  void recv_collect();
  void aggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp);
  void send_aggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp);
  void recv_aggregate();
  void treeAggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t depth);
  void send_treeAggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t depth);
  void recv_treeAggregate();
  void fold(const  ::ignis::rpc::ISource& src);
  void send_fold(const  ::ignis::rpc::ISource& src);
  void recv_fold();
  void take(const int64_t num);
  void send_take(const int64_t num);
  void recv_take();
  void foreach_(const  ::ignis::rpc::ISource& src);
  void send_foreach_(const  ::ignis::rpc::ISource& src);
  void recv_foreach_();
  void foreachPartition(const  ::ignis::rpc::ISource& src);
  void send_foreachPartition(const  ::ignis::rpc::ISource& src);
  void recv_foreachPartition();
  void top(const int64_t num);
  void send_top(const int64_t num);
  void recv_top();
  void top2(const int64_t num, const  ::ignis::rpc::ISource& cmp);
  void send_top2(const int64_t num, const  ::ignis::rpc::ISource& cmp);
  void recv_top2();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IGeneralActionModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<IGeneralActionModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IGeneralActionModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_reduce(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_treeReduce(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_collect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aggregate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_treeAggregate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_take(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_foreach_(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_foreachPartition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_top(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_top2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IGeneralActionModuleProcessor(::std::shared_ptr<IGeneralActionModuleIf> iface) :
    iface_(iface) {
    processMap_["reduce"] = &IGeneralActionModuleProcessor::process_reduce;
    processMap_["treeReduce"] = &IGeneralActionModuleProcessor::process_treeReduce;
    processMap_["collect"] = &IGeneralActionModuleProcessor::process_collect;
    processMap_["aggregate"] = &IGeneralActionModuleProcessor::process_aggregate;
    processMap_["treeAggregate"] = &IGeneralActionModuleProcessor::process_treeAggregate;
    processMap_["fold"] = &IGeneralActionModuleProcessor::process_fold;
    processMap_["take"] = &IGeneralActionModuleProcessor::process_take;
    processMap_["foreach_"] = &IGeneralActionModuleProcessor::process_foreach_;
    processMap_["foreachPartition"] = &IGeneralActionModuleProcessor::process_foreachPartition;
    processMap_["top"] = &IGeneralActionModuleProcessor::process_top;
    processMap_["top2"] = &IGeneralActionModuleProcessor::process_top2;
  }

  virtual ~IGeneralActionModuleProcessor() {}
};

class IGeneralActionModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IGeneralActionModuleProcessorFactory(const ::std::shared_ptr< IGeneralActionModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< IGeneralActionModuleIfFactory > handlerFactory_;
};

class IGeneralActionModuleMultiface : virtual public IGeneralActionModuleIf {
 public:
  IGeneralActionModuleMultiface(std::vector<std::shared_ptr<IGeneralActionModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IGeneralActionModuleMultiface() {}
 protected:
  std::vector<std::shared_ptr<IGeneralActionModuleIf> > ifaces_;
  IGeneralActionModuleMultiface() {}
  void add(::std::shared_ptr<IGeneralActionModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void reduce(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reduce(src);
    }
    ifaces_[i]->reduce(src);
  }

  void treeReduce(const  ::ignis::rpc::ISource& src, const int64_t depth) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->treeReduce(src, depth);
    }
    ifaces_[i]->treeReduce(src, depth);
  }

  void collect() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->collect();
    }
    ifaces_[i]->collect();
  }

  void aggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->aggregate(seqOp, combOp);
    }
    ifaces_[i]->aggregate(seqOp, combOp);
  }

  void treeAggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t depth) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->treeAggregate(seqOp, combOp, depth);
    }
    ifaces_[i]->treeAggregate(seqOp, combOp, depth);
  }

  void fold(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fold(src);
    }
    ifaces_[i]->fold(src);
  }

  void take(const int64_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->take(num);
    }
    ifaces_[i]->take(num);
  }

  void foreach_(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->foreach_(src);
    }
    ifaces_[i]->foreach_(src);
  }

  void foreachPartition(const  ::ignis::rpc::ISource& src) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->foreachPartition(src);
    }
    ifaces_[i]->foreachPartition(src);
  }

  void top(const int64_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->top(num);
    }
    ifaces_[i]->top(num);
  }

  void top2(const int64_t num, const  ::ignis::rpc::ISource& cmp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->top2(num, cmp);
    }
    ifaces_[i]->top2(num, cmp);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IGeneralActionModuleConcurrentClient : virtual public IGeneralActionModuleIf {
 public:
  IGeneralActionModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  IGeneralActionModuleConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void reduce(const  ::ignis::rpc::ISource& src);
  int32_t send_reduce(const  ::ignis::rpc::ISource& src);
  void recv_reduce(const int32_t seqid);
  void treeReduce(const  ::ignis::rpc::ISource& src, const int64_t depth);
  int32_t send_treeReduce(const  ::ignis::rpc::ISource& src, const int64_t depth);
  void recv_treeReduce(const int32_t seqid);
  void collect();
  int32_t send_collect();
  void recv_collect(const int32_t seqid);
  void aggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp);
  int32_t send_aggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp);
  void recv_aggregate(const int32_t seqid);
  void treeAggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t depth);
  int32_t send_treeAggregate(const  ::ignis::rpc::ISource& seqOp, const  ::ignis::rpc::ISource& combOp, const int64_t depth);
  void recv_treeAggregate(const int32_t seqid);
  void fold(const  ::ignis::rpc::ISource& src);
  int32_t send_fold(const  ::ignis::rpc::ISource& src);
  void recv_fold(const int32_t seqid);
  void take(const int64_t num);
  int32_t send_take(const int64_t num);
  void recv_take(const int32_t seqid);
  void foreach_(const  ::ignis::rpc::ISource& src);
  int32_t send_foreach_(const  ::ignis::rpc::ISource& src);
  void recv_foreach_(const int32_t seqid);
  void foreachPartition(const  ::ignis::rpc::ISource& src);
  int32_t send_foreachPartition(const  ::ignis::rpc::ISource& src);
  void recv_foreachPartition(const int32_t seqid);
  void top(const int64_t num);
  int32_t send_top(const int64_t num);
  void recv_top(const int32_t seqid);
  void top2(const int64_t num, const  ::ignis::rpc::ISource& cmp);
  int32_t send_top2(const int64_t num, const  ::ignis::rpc::ISource& cmp);
  void recv_top2(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
