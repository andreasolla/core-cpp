/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IPostmanModule_H
#define IPostmanModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IPostmanModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IPostmanModuleIf {
 public:
  virtual ~IPostmanModuleIf() {}
  virtual void start() = 0;
  virtual void stop() = 0;
  virtual void sendAll() = 0;
  virtual void clearAll() = 0;
};

class IPostmanModuleIfFactory {
 public:
  typedef IPostmanModuleIf Handler;

  virtual ~IPostmanModuleIfFactory() {}

  virtual IPostmanModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IPostmanModuleIf* /* handler */) = 0;
};

class IPostmanModuleIfSingletonFactory : virtual public IPostmanModuleIfFactory {
 public:
  IPostmanModuleIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IPostmanModuleIf>& iface) : iface_(iface) {}
  virtual ~IPostmanModuleIfSingletonFactory() {}

  virtual IPostmanModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IPostmanModuleIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IPostmanModuleIf> iface_;
};

class IPostmanModuleNull : virtual public IPostmanModuleIf {
 public:
  virtual ~IPostmanModuleNull() {}
  void start() {
    return;
  }
  void stop() {
    return;
  }
  void sendAll() {
    return;
  }
  void clearAll() {
    return;
  }
};


class IPostmanModule_start_args {
 public:

  IPostmanModule_start_args(const IPostmanModule_start_args&);
  IPostmanModule_start_args& operator=(const IPostmanModule_start_args&);
  IPostmanModule_start_args() {
  }

  virtual ~IPostmanModule_start_args() throw();

  bool operator == (const IPostmanModule_start_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IPostmanModule_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPostmanModule_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPostmanModule_start_pargs {
 public:


  virtual ~IPostmanModule_start_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPostmanModule_start_result__isset {
  _IPostmanModule_start_result__isset() : ex(false) {}
  bool ex :1;
} _IPostmanModule_start_result__isset;

class IPostmanModule_start_result {
 public:

  IPostmanModule_start_result(const IPostmanModule_start_result&);
  IPostmanModule_start_result& operator=(const IPostmanModule_start_result&);
  IPostmanModule_start_result() {
  }

  virtual ~IPostmanModule_start_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IPostmanModule_start_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IPostmanModule_start_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPostmanModule_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPostmanModule_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPostmanModule_start_presult__isset {
  _IPostmanModule_start_presult__isset() : ex(false) {}
  bool ex :1;
} _IPostmanModule_start_presult__isset;

class IPostmanModule_start_presult {
 public:


  virtual ~IPostmanModule_start_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IPostmanModule_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IPostmanModule_stop_args {
 public:

  IPostmanModule_stop_args(const IPostmanModule_stop_args&);
  IPostmanModule_stop_args& operator=(const IPostmanModule_stop_args&);
  IPostmanModule_stop_args() {
  }

  virtual ~IPostmanModule_stop_args() throw();

  bool operator == (const IPostmanModule_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IPostmanModule_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPostmanModule_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPostmanModule_stop_pargs {
 public:


  virtual ~IPostmanModule_stop_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPostmanModule_stop_result__isset {
  _IPostmanModule_stop_result__isset() : ex(false) {}
  bool ex :1;
} _IPostmanModule_stop_result__isset;

class IPostmanModule_stop_result {
 public:

  IPostmanModule_stop_result(const IPostmanModule_stop_result&);
  IPostmanModule_stop_result& operator=(const IPostmanModule_stop_result&);
  IPostmanModule_stop_result() {
  }

  virtual ~IPostmanModule_stop_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IPostmanModule_stop_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IPostmanModule_stop_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPostmanModule_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPostmanModule_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPostmanModule_stop_presult__isset {
  _IPostmanModule_stop_presult__isset() : ex(false) {}
  bool ex :1;
} _IPostmanModule_stop_presult__isset;

class IPostmanModule_stop_presult {
 public:


  virtual ~IPostmanModule_stop_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IPostmanModule_stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IPostmanModule_sendAll_args {
 public:

  IPostmanModule_sendAll_args(const IPostmanModule_sendAll_args&);
  IPostmanModule_sendAll_args& operator=(const IPostmanModule_sendAll_args&);
  IPostmanModule_sendAll_args() {
  }

  virtual ~IPostmanModule_sendAll_args() throw();

  bool operator == (const IPostmanModule_sendAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IPostmanModule_sendAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPostmanModule_sendAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPostmanModule_sendAll_pargs {
 public:


  virtual ~IPostmanModule_sendAll_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPostmanModule_sendAll_result__isset {
  _IPostmanModule_sendAll_result__isset() : ex(false) {}
  bool ex :1;
} _IPostmanModule_sendAll_result__isset;

class IPostmanModule_sendAll_result {
 public:

  IPostmanModule_sendAll_result(const IPostmanModule_sendAll_result&);
  IPostmanModule_sendAll_result& operator=(const IPostmanModule_sendAll_result&);
  IPostmanModule_sendAll_result() {
  }

  virtual ~IPostmanModule_sendAll_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IPostmanModule_sendAll_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IPostmanModule_sendAll_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPostmanModule_sendAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPostmanModule_sendAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPostmanModule_sendAll_presult__isset {
  _IPostmanModule_sendAll_presult__isset() : ex(false) {}
  bool ex :1;
} _IPostmanModule_sendAll_presult__isset;

class IPostmanModule_sendAll_presult {
 public:


  virtual ~IPostmanModule_sendAll_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IPostmanModule_sendAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IPostmanModule_clearAll_args {
 public:

  IPostmanModule_clearAll_args(const IPostmanModule_clearAll_args&);
  IPostmanModule_clearAll_args& operator=(const IPostmanModule_clearAll_args&);
  IPostmanModule_clearAll_args() {
  }

  virtual ~IPostmanModule_clearAll_args() throw();

  bool operator == (const IPostmanModule_clearAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IPostmanModule_clearAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPostmanModule_clearAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IPostmanModule_clearAll_pargs {
 public:


  virtual ~IPostmanModule_clearAll_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPostmanModule_clearAll_result__isset {
  _IPostmanModule_clearAll_result__isset() : ex(false) {}
  bool ex :1;
} _IPostmanModule_clearAll_result__isset;

class IPostmanModule_clearAll_result {
 public:

  IPostmanModule_clearAll_result(const IPostmanModule_clearAll_result&);
  IPostmanModule_clearAll_result& operator=(const IPostmanModule_clearAll_result&);
  IPostmanModule_clearAll_result() {
  }

  virtual ~IPostmanModule_clearAll_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IPostmanModule_clearAll_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IPostmanModule_clearAll_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IPostmanModule_clearAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPostmanModule_clearAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IPostmanModule_clearAll_presult__isset {
  _IPostmanModule_clearAll_presult__isset() : ex(false) {}
  bool ex :1;
} _IPostmanModule_clearAll_presult__isset;

class IPostmanModule_clearAll_presult {
 public:


  virtual ~IPostmanModule_clearAll_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IPostmanModule_clearAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IPostmanModuleClient : virtual public IPostmanModuleIf {
 public:
  IPostmanModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IPostmanModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start();
  void send_start();
  void recv_start();
  void stop();
  void send_stop();
  void recv_stop();
  void sendAll();
  void send_sendAll();
  void recv_sendAll();
  void clearAll();
  void send_clearAll();
  void recv_clearAll();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IPostmanModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IPostmanModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IPostmanModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clearAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IPostmanModuleProcessor(::apache::thrift::stdcxx::shared_ptr<IPostmanModuleIf> iface) :
    iface_(iface) {
    processMap_["start"] = &IPostmanModuleProcessor::process_start;
    processMap_["stop"] = &IPostmanModuleProcessor::process_stop;
    processMap_["sendAll"] = &IPostmanModuleProcessor::process_sendAll;
    processMap_["clearAll"] = &IPostmanModuleProcessor::process_clearAll;
  }

  virtual ~IPostmanModuleProcessor() {}
};

class IPostmanModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IPostmanModuleProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IPostmanModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IPostmanModuleIfFactory > handlerFactory_;
};

class IPostmanModuleMultiface : virtual public IPostmanModuleIf {
 public:
  IPostmanModuleMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IPostmanModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IPostmanModuleMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IPostmanModuleIf> > ifaces_;
  IPostmanModuleMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IPostmanModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void start() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start();
    }
    ifaces_[i]->start();
  }

  void stop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    ifaces_[i]->stop();
  }

  void sendAll() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendAll();
    }
    ifaces_[i]->sendAll();
  }

  void clearAll() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clearAll();
    }
    ifaces_[i]->clearAll();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IPostmanModuleConcurrentClient : virtual public IPostmanModuleIf {
 public:
  IPostmanModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IPostmanModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start();
  int32_t send_start();
  void recv_start(const int32_t seqid);
  void stop();
  int32_t send_stop();
  void recv_stop(const int32_t seqid);
  void sendAll();
  int32_t send_sendAll();
  void recv_sendAll(const int32_t seqid);
  void clearAll();
  int32_t send_clearAll();
  void recv_clearAll(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
