/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IReducerModule_H
#define IReducerModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IReducerModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IReducerModuleIf {
 public:
  virtual ~IReducerModuleIf() {}
  virtual void getKeys(std::vector<int64_t> & _return, const  ::ignis::rpc::executor::IFunction& funct) = 0;
  virtual void setExecutorKeys(const std::string& host, const int32_t port, const std::vector<int64_t> & keys_id, const int64_t msg_id) = 0;
  virtual void joinData(const std::vector<int64_t> & msg_ids) = 0;
  virtual void reduceByKey() = 0;
  virtual void reset() = 0;
};

class IReducerModuleIfFactory {
 public:
  typedef IReducerModuleIf Handler;

  virtual ~IReducerModuleIfFactory() {}

  virtual IReducerModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IReducerModuleIf* /* handler */) = 0;
};

class IReducerModuleIfSingletonFactory : virtual public IReducerModuleIfFactory {
 public:
  IReducerModuleIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf>& iface) : iface_(iface) {}
  virtual ~IReducerModuleIfSingletonFactory() {}

  virtual IReducerModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IReducerModuleIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> iface_;
};

class IReducerModuleNull : virtual public IReducerModuleIf {
 public:
  virtual ~IReducerModuleNull() {}
  void getKeys(std::vector<int64_t> & /* _return */, const  ::ignis::rpc::executor::IFunction& /* funct */) {
    return;
  }
  void setExecutorKeys(const std::string& /* host */, const int32_t /* port */, const std::vector<int64_t> & /* keys_id */, const int64_t /* msg_id */) {
    return;
  }
  void joinData(const std::vector<int64_t> & /* msg_ids */) {
    return;
  }
  void reduceByKey() {
    return;
  }
  void reset() {
    return;
  }
};

typedef struct _IReducerModule_getKeys_args__isset {
  _IReducerModule_getKeys_args__isset() : funct(false) {}
  bool funct :1;
} _IReducerModule_getKeys_args__isset;

class IReducerModule_getKeys_args {
 public:

  IReducerModule_getKeys_args(const IReducerModule_getKeys_args&);
  IReducerModule_getKeys_args& operator=(const IReducerModule_getKeys_args&);
  IReducerModule_getKeys_args() {
  }

  virtual ~IReducerModule_getKeys_args() throw();
   ::ignis::rpc::executor::IFunction funct;

  _IReducerModule_getKeys_args__isset __isset;

  void __set_funct(const  ::ignis::rpc::executor::IFunction& val);

  bool operator == (const IReducerModule_getKeys_args & rhs) const
  {
    if (!(funct == rhs.funct))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_getKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_getKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IReducerModule_getKeys_pargs {
 public:


  virtual ~IReducerModule_getKeys_pargs() throw();
  const  ::ignis::rpc::executor::IFunction* funct;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_getKeys_result__isset {
  _IReducerModule_getKeys_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IReducerModule_getKeys_result__isset;

class IReducerModule_getKeys_result {
 public:

  IReducerModule_getKeys_result(const IReducerModule_getKeys_result&);
  IReducerModule_getKeys_result& operator=(const IReducerModule_getKeys_result&);
  IReducerModule_getKeys_result() {
  }

  virtual ~IReducerModule_getKeys_result() throw();
  std::vector<int64_t>  success;
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_getKeys_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IReducerModule_getKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_getKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_getKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_getKeys_presult__isset {
  _IReducerModule_getKeys_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IReducerModule_getKeys_presult__isset;

class IReducerModule_getKeys_presult {
 public:


  virtual ~IReducerModule_getKeys_presult() throw();
  std::vector<int64_t> * success;
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_getKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IReducerModule_setExecutorKeys_args__isset {
  _IReducerModule_setExecutorKeys_args__isset() : host(false), port(false), keys_id(false), msg_id(false) {}
  bool host :1;
  bool port :1;
  bool keys_id :1;
  bool msg_id :1;
} _IReducerModule_setExecutorKeys_args__isset;

class IReducerModule_setExecutorKeys_args {
 public:

  IReducerModule_setExecutorKeys_args(const IReducerModule_setExecutorKeys_args&);
  IReducerModule_setExecutorKeys_args& operator=(const IReducerModule_setExecutorKeys_args&);
  IReducerModule_setExecutorKeys_args() : host(), port(0), msg_id(0) {
  }

  virtual ~IReducerModule_setExecutorKeys_args() throw();
  std::string host;
  int32_t port;
  std::vector<int64_t>  keys_id;
  int64_t msg_id;

  _IReducerModule_setExecutorKeys_args__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  void __set_keys_id(const std::vector<int64_t> & val);

  void __set_msg_id(const int64_t val);

  bool operator == (const IReducerModule_setExecutorKeys_args & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(keys_id == rhs.keys_id))
      return false;
    if (!(msg_id == rhs.msg_id))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_setExecutorKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_setExecutorKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IReducerModule_setExecutorKeys_pargs {
 public:


  virtual ~IReducerModule_setExecutorKeys_pargs() throw();
  const std::string* host;
  const int32_t* port;
  const std::vector<int64_t> * keys_id;
  const int64_t* msg_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_setExecutorKeys_result__isset {
  _IReducerModule_setExecutorKeys_result__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_setExecutorKeys_result__isset;

class IReducerModule_setExecutorKeys_result {
 public:

  IReducerModule_setExecutorKeys_result(const IReducerModule_setExecutorKeys_result&);
  IReducerModule_setExecutorKeys_result& operator=(const IReducerModule_setExecutorKeys_result&);
  IReducerModule_setExecutorKeys_result() {
  }

  virtual ~IReducerModule_setExecutorKeys_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_setExecutorKeys_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IReducerModule_setExecutorKeys_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_setExecutorKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_setExecutorKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_setExecutorKeys_presult__isset {
  _IReducerModule_setExecutorKeys_presult__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_setExecutorKeys_presult__isset;

class IReducerModule_setExecutorKeys_presult {
 public:


  virtual ~IReducerModule_setExecutorKeys_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_setExecutorKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IReducerModule_joinData_args__isset {
  _IReducerModule_joinData_args__isset() : msg_ids(false) {}
  bool msg_ids :1;
} _IReducerModule_joinData_args__isset;

class IReducerModule_joinData_args {
 public:

  IReducerModule_joinData_args(const IReducerModule_joinData_args&);
  IReducerModule_joinData_args& operator=(const IReducerModule_joinData_args&);
  IReducerModule_joinData_args() {
  }

  virtual ~IReducerModule_joinData_args() throw();
  std::vector<int64_t>  msg_ids;

  _IReducerModule_joinData_args__isset __isset;

  void __set_msg_ids(const std::vector<int64_t> & val);

  bool operator == (const IReducerModule_joinData_args & rhs) const
  {
    if (!(msg_ids == rhs.msg_ids))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_joinData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_joinData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IReducerModule_joinData_pargs {
 public:


  virtual ~IReducerModule_joinData_pargs() throw();
  const std::vector<int64_t> * msg_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_joinData_result__isset {
  _IReducerModule_joinData_result__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_joinData_result__isset;

class IReducerModule_joinData_result {
 public:

  IReducerModule_joinData_result(const IReducerModule_joinData_result&);
  IReducerModule_joinData_result& operator=(const IReducerModule_joinData_result&);
  IReducerModule_joinData_result() {
  }

  virtual ~IReducerModule_joinData_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_joinData_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IReducerModule_joinData_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_joinData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_joinData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_joinData_presult__isset {
  _IReducerModule_joinData_presult__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_joinData_presult__isset;

class IReducerModule_joinData_presult {
 public:


  virtual ~IReducerModule_joinData_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_joinData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IReducerModule_reduceByKey_args {
 public:

  IReducerModule_reduceByKey_args(const IReducerModule_reduceByKey_args&);
  IReducerModule_reduceByKey_args& operator=(const IReducerModule_reduceByKey_args&);
  IReducerModule_reduceByKey_args() {
  }

  virtual ~IReducerModule_reduceByKey_args() throw();

  bool operator == (const IReducerModule_reduceByKey_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IReducerModule_reduceByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_reduceByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IReducerModule_reduceByKey_pargs {
 public:


  virtual ~IReducerModule_reduceByKey_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_reduceByKey_result__isset {
  _IReducerModule_reduceByKey_result__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_reduceByKey_result__isset;

class IReducerModule_reduceByKey_result {
 public:

  IReducerModule_reduceByKey_result(const IReducerModule_reduceByKey_result&);
  IReducerModule_reduceByKey_result& operator=(const IReducerModule_reduceByKey_result&);
  IReducerModule_reduceByKey_result() {
  }

  virtual ~IReducerModule_reduceByKey_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_reduceByKey_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IReducerModule_reduceByKey_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_reduceByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_reduceByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_reduceByKey_presult__isset {
  _IReducerModule_reduceByKey_presult__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_reduceByKey_presult__isset;

class IReducerModule_reduceByKey_presult {
 public:


  virtual ~IReducerModule_reduceByKey_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_reduceByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IReducerModule_reset_args {
 public:

  IReducerModule_reset_args(const IReducerModule_reset_args&);
  IReducerModule_reset_args& operator=(const IReducerModule_reset_args&);
  IReducerModule_reset_args() {
  }

  virtual ~IReducerModule_reset_args() throw();

  bool operator == (const IReducerModule_reset_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IReducerModule_reset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_reset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IReducerModule_reset_pargs {
 public:


  virtual ~IReducerModule_reset_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_reset_result__isset {
  _IReducerModule_reset_result__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_reset_result__isset;

class IReducerModule_reset_result {
 public:

  IReducerModule_reset_result(const IReducerModule_reset_result&);
  IReducerModule_reset_result& operator=(const IReducerModule_reset_result&);
  IReducerModule_reset_result() {
  }

  virtual ~IReducerModule_reset_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_reset_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IReducerModule_reset_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_reset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_reset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_reset_presult__isset {
  _IReducerModule_reset_presult__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_reset_presult__isset;

class IReducerModule_reset_presult {
 public:


  virtual ~IReducerModule_reset_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_reset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IReducerModuleClient : virtual public IReducerModuleIf {
 public:
  IReducerModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IReducerModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getKeys(std::vector<int64_t> & _return, const  ::ignis::rpc::executor::IFunction& funct);
  void send_getKeys(const  ::ignis::rpc::executor::IFunction& funct);
  void recv_getKeys(std::vector<int64_t> & _return);
  void setExecutorKeys(const std::string& host, const int32_t port, const std::vector<int64_t> & keys_id, const int64_t msg_id);
  void send_setExecutorKeys(const std::string& host, const int32_t port, const std::vector<int64_t> & keys_id, const int64_t msg_id);
  void recv_setExecutorKeys();
  void joinData(const std::vector<int64_t> & msg_ids);
  void send_joinData(const std::vector<int64_t> & msg_ids);
  void recv_joinData();
  void reduceByKey();
  void send_reduceByKey();
  void recv_reduceByKey();
  void reset();
  void send_reset();
  void recv_reset();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IReducerModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IReducerModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setExecutorKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_joinData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reduceByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IReducerModuleProcessor(::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> iface) :
    iface_(iface) {
    processMap_["getKeys"] = &IReducerModuleProcessor::process_getKeys;
    processMap_["setExecutorKeys"] = &IReducerModuleProcessor::process_setExecutorKeys;
    processMap_["joinData"] = &IReducerModuleProcessor::process_joinData;
    processMap_["reduceByKey"] = &IReducerModuleProcessor::process_reduceByKey;
    processMap_["reset"] = &IReducerModuleProcessor::process_reset;
  }

  virtual ~IReducerModuleProcessor() {}
};

class IReducerModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IReducerModuleProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IReducerModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IReducerModuleIfFactory > handlerFactory_;
};

class IReducerModuleMultiface : virtual public IReducerModuleIf {
 public:
  IReducerModuleMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IReducerModuleMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> > ifaces_;
  IReducerModuleMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getKeys(std::vector<int64_t> & _return, const  ::ignis::rpc::executor::IFunction& funct) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getKeys(_return, funct);
    }
    ifaces_[i]->getKeys(_return, funct);
    return;
  }

  void setExecutorKeys(const std::string& host, const int32_t port, const std::vector<int64_t> & keys_id, const int64_t msg_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setExecutorKeys(host, port, keys_id, msg_id);
    }
    ifaces_[i]->setExecutorKeys(host, port, keys_id, msg_id);
  }

  void joinData(const std::vector<int64_t> & msg_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->joinData(msg_ids);
    }
    ifaces_[i]->joinData(msg_ids);
  }

  void reduceByKey() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reduceByKey();
    }
    ifaces_[i]->reduceByKey();
  }

  void reset() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset();
    }
    ifaces_[i]->reset();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IReducerModuleConcurrentClient : virtual public IReducerModuleIf {
 public:
  IReducerModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IReducerModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getKeys(std::vector<int64_t> & _return, const  ::ignis::rpc::executor::IFunction& funct);
  int32_t send_getKeys(const  ::ignis::rpc::executor::IFunction& funct);
  void recv_getKeys(std::vector<int64_t> & _return, const int32_t seqid);
  void setExecutorKeys(const std::string& host, const int32_t port, const std::vector<int64_t> & keys_id, const int64_t msg_id);
  int32_t send_setExecutorKeys(const std::string& host, const int32_t port, const std::vector<int64_t> & keys_id, const int64_t msg_id);
  void recv_setExecutorKeys(const int32_t seqid);
  void joinData(const std::vector<int64_t> & msg_ids);
  int32_t send_joinData(const std::vector<int64_t> & msg_ids);
  void recv_joinData(const int32_t seqid);
  void reduceByKey();
  int32_t send_reduceByKey();
  void recv_reduceByKey(const int32_t seqid);
  void reset();
  int32_t send_reset();
  void recv_reset(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
