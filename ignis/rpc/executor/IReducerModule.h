/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IReducerModule_H
#define IReducerModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IReducerModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IReducerModuleIf {
 public:
  virtual ~IReducerModuleIf() {}
  virtual void reduceByKey(const  ::ignis::rpc::ISourceFunction& funct) = 0;
  virtual void groupByKey() = 0;
};

class IReducerModuleIfFactory {
 public:
  typedef IReducerModuleIf Handler;

  virtual ~IReducerModuleIfFactory() {}

  virtual IReducerModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IReducerModuleIf* /* handler */) = 0;
};

class IReducerModuleIfSingletonFactory : virtual public IReducerModuleIfFactory {
 public:
  IReducerModuleIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf>& iface) : iface_(iface) {}
  virtual ~IReducerModuleIfSingletonFactory() {}

  virtual IReducerModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IReducerModuleIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> iface_;
};

class IReducerModuleNull : virtual public IReducerModuleIf {
 public:
  virtual ~IReducerModuleNull() {}
  void reduceByKey(const  ::ignis::rpc::ISourceFunction& /* funct */) {
    return;
  }
  void groupByKey() {
    return;
  }
};

typedef struct _IReducerModule_reduceByKey_args__isset {
  _IReducerModule_reduceByKey_args__isset() : funct(false) {}
  bool funct :1;
} _IReducerModule_reduceByKey_args__isset;

class IReducerModule_reduceByKey_args {
 public:

  IReducerModule_reduceByKey_args(const IReducerModule_reduceByKey_args&);
  IReducerModule_reduceByKey_args& operator=(const IReducerModule_reduceByKey_args&);
  IReducerModule_reduceByKey_args() {
  }

  virtual ~IReducerModule_reduceByKey_args() throw();
   ::ignis::rpc::ISourceFunction funct;

  _IReducerModule_reduceByKey_args__isset __isset;

  void __set_funct(const  ::ignis::rpc::ISourceFunction& val);

  bool operator == (const IReducerModule_reduceByKey_args & rhs) const
  {
    if (!(funct == rhs.funct))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_reduceByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_reduceByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IReducerModule_reduceByKey_pargs {
 public:


  virtual ~IReducerModule_reduceByKey_pargs() throw();
  const  ::ignis::rpc::ISourceFunction* funct;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_reduceByKey_result__isset {
  _IReducerModule_reduceByKey_result__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_reduceByKey_result__isset;

class IReducerModule_reduceByKey_result {
 public:

  IReducerModule_reduceByKey_result(const IReducerModule_reduceByKey_result&);
  IReducerModule_reduceByKey_result& operator=(const IReducerModule_reduceByKey_result&);
  IReducerModule_reduceByKey_result() {
  }

  virtual ~IReducerModule_reduceByKey_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_reduceByKey_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IReducerModule_reduceByKey_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_reduceByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_reduceByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_reduceByKey_presult__isset {
  _IReducerModule_reduceByKey_presult__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_reduceByKey_presult__isset;

class IReducerModule_reduceByKey_presult {
 public:


  virtual ~IReducerModule_reduceByKey_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_reduceByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IReducerModule_groupByKey_args {
 public:

  IReducerModule_groupByKey_args(const IReducerModule_groupByKey_args&);
  IReducerModule_groupByKey_args& operator=(const IReducerModule_groupByKey_args&);
  IReducerModule_groupByKey_args() {
  }

  virtual ~IReducerModule_groupByKey_args() throw();

  bool operator == (const IReducerModule_groupByKey_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IReducerModule_groupByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_groupByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IReducerModule_groupByKey_pargs {
 public:


  virtual ~IReducerModule_groupByKey_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_groupByKey_result__isset {
  _IReducerModule_groupByKey_result__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_groupByKey_result__isset;

class IReducerModule_groupByKey_result {
 public:

  IReducerModule_groupByKey_result(const IReducerModule_groupByKey_result&);
  IReducerModule_groupByKey_result& operator=(const IReducerModule_groupByKey_result&);
  IReducerModule_groupByKey_result() {
  }

  virtual ~IReducerModule_groupByKey_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_groupByKey_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IReducerModule_groupByKey_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IReducerModule_groupByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IReducerModule_groupByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IReducerModule_groupByKey_presult__isset {
  _IReducerModule_groupByKey_presult__isset() : ex(false) {}
  bool ex :1;
} _IReducerModule_groupByKey_presult__isset;

class IReducerModule_groupByKey_presult {
 public:


  virtual ~IReducerModule_groupByKey_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IReducerModule_groupByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IReducerModuleClient : virtual public IReducerModuleIf {
 public:
  IReducerModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IReducerModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void reduceByKey(const  ::ignis::rpc::ISourceFunction& funct);
  void send_reduceByKey(const  ::ignis::rpc::ISourceFunction& funct);
  void recv_reduceByKey();
  void groupByKey();
  void send_groupByKey();
  void recv_groupByKey();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IReducerModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IReducerModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_reduceByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_groupByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IReducerModuleProcessor(::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> iface) :
    iface_(iface) {
    processMap_["reduceByKey"] = &IReducerModuleProcessor::process_reduceByKey;
    processMap_["groupByKey"] = &IReducerModuleProcessor::process_groupByKey;
  }

  virtual ~IReducerModuleProcessor() {}
};

class IReducerModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IReducerModuleProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IReducerModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IReducerModuleIfFactory > handlerFactory_;
};

class IReducerModuleMultiface : virtual public IReducerModuleIf {
 public:
  IReducerModuleMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IReducerModuleMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> > ifaces_;
  IReducerModuleMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IReducerModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void reduceByKey(const  ::ignis::rpc::ISourceFunction& funct) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reduceByKey(funct);
    }
    ifaces_[i]->reduceByKey(funct);
  }

  void groupByKey() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->groupByKey();
    }
    ifaces_[i]->groupByKey();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IReducerModuleConcurrentClient : virtual public IReducerModuleIf {
 public:
  IReducerModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IReducerModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void reduceByKey(const  ::ignis::rpc::ISourceFunction& funct);
  int32_t send_reduceByKey(const  ::ignis::rpc::ISourceFunction& funct);
  void recv_reduceByKey(const int32_t seqid);
  void groupByKey();
  int32_t send_groupByKey();
  void recv_groupByKey(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
