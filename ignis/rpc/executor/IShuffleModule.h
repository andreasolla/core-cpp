/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IShuffleModule_H
#define IShuffleModule_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IShuffleModule_types.h"

namespace ignis { namespace rpc { namespace executor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IShuffleModuleIf {
 public:
  virtual ~IShuffleModuleIf() {}
  virtual void createSplits() = 0;
  virtual void nextSplit(const std::string& host, const int32_t port, const int64_t length, const bool local) = 0;
  virtual void finishSplits() = 0;
  virtual void joinSplits(const std::vector<int64_t> & order) = 0;
};

class IShuffleModuleIfFactory {
 public:
  typedef IShuffleModuleIf Handler;

  virtual ~IShuffleModuleIfFactory() {}

  virtual IShuffleModuleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IShuffleModuleIf* /* handler */) = 0;
};

class IShuffleModuleIfSingletonFactory : virtual public IShuffleModuleIfFactory {
 public:
  IShuffleModuleIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IShuffleModuleIf>& iface) : iface_(iface) {}
  virtual ~IShuffleModuleIfSingletonFactory() {}

  virtual IShuffleModuleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IShuffleModuleIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IShuffleModuleIf> iface_;
};

class IShuffleModuleNull : virtual public IShuffleModuleIf {
 public:
  virtual ~IShuffleModuleNull() {}
  void createSplits() {
    return;
  }
  void nextSplit(const std::string& /* host */, const int32_t /* port */, const int64_t /* length */, const bool /* local */) {
    return;
  }
  void finishSplits() {
    return;
  }
  void joinSplits(const std::vector<int64_t> & /* order */) {
    return;
  }
};


class IShuffleModule_createSplits_args {
 public:

  IShuffleModule_createSplits_args(const IShuffleModule_createSplits_args&);
  IShuffleModule_createSplits_args& operator=(const IShuffleModule_createSplits_args&);
  IShuffleModule_createSplits_args() {
  }

  virtual ~IShuffleModule_createSplits_args() throw();

  bool operator == (const IShuffleModule_createSplits_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IShuffleModule_createSplits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IShuffleModule_createSplits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IShuffleModule_createSplits_pargs {
 public:


  virtual ~IShuffleModule_createSplits_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IShuffleModule_createSplits_result__isset {
  _IShuffleModule_createSplits_result__isset() : ex(false) {}
  bool ex :1;
} _IShuffleModule_createSplits_result__isset;

class IShuffleModule_createSplits_result {
 public:

  IShuffleModule_createSplits_result(const IShuffleModule_createSplits_result&);
  IShuffleModule_createSplits_result& operator=(const IShuffleModule_createSplits_result&);
  IShuffleModule_createSplits_result() {
  }

  virtual ~IShuffleModule_createSplits_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IShuffleModule_createSplits_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IShuffleModule_createSplits_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IShuffleModule_createSplits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IShuffleModule_createSplits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IShuffleModule_createSplits_presult__isset {
  _IShuffleModule_createSplits_presult__isset() : ex(false) {}
  bool ex :1;
} _IShuffleModule_createSplits_presult__isset;

class IShuffleModule_createSplits_presult {
 public:


  virtual ~IShuffleModule_createSplits_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IShuffleModule_createSplits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IShuffleModule_nextSplit_args__isset {
  _IShuffleModule_nextSplit_args__isset() : host(false), port(false), length(false), local(false) {}
  bool host :1;
  bool port :1;
  bool length :1;
  bool local :1;
} _IShuffleModule_nextSplit_args__isset;

class IShuffleModule_nextSplit_args {
 public:

  IShuffleModule_nextSplit_args(const IShuffleModule_nextSplit_args&);
  IShuffleModule_nextSplit_args& operator=(const IShuffleModule_nextSplit_args&);
  IShuffleModule_nextSplit_args() : host(), port(0), length(0), local(0) {
  }

  virtual ~IShuffleModule_nextSplit_args() throw();
  std::string host;
  int32_t port;
  int64_t length;
  bool local;

  _IShuffleModule_nextSplit_args__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  void __set_length(const int64_t val);

  void __set_local(const bool val);

  bool operator == (const IShuffleModule_nextSplit_args & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(local == rhs.local))
      return false;
    return true;
  }
  bool operator != (const IShuffleModule_nextSplit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IShuffleModule_nextSplit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IShuffleModule_nextSplit_pargs {
 public:


  virtual ~IShuffleModule_nextSplit_pargs() throw();
  const std::string* host;
  const int32_t* port;
  const int64_t* length;
  const bool* local;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IShuffleModule_nextSplit_result__isset {
  _IShuffleModule_nextSplit_result__isset() : ex(false) {}
  bool ex :1;
} _IShuffleModule_nextSplit_result__isset;

class IShuffleModule_nextSplit_result {
 public:

  IShuffleModule_nextSplit_result(const IShuffleModule_nextSplit_result&);
  IShuffleModule_nextSplit_result& operator=(const IShuffleModule_nextSplit_result&);
  IShuffleModule_nextSplit_result() {
  }

  virtual ~IShuffleModule_nextSplit_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IShuffleModule_nextSplit_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IShuffleModule_nextSplit_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IShuffleModule_nextSplit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IShuffleModule_nextSplit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IShuffleModule_nextSplit_presult__isset {
  _IShuffleModule_nextSplit_presult__isset() : ex(false) {}
  bool ex :1;
} _IShuffleModule_nextSplit_presult__isset;

class IShuffleModule_nextSplit_presult {
 public:


  virtual ~IShuffleModule_nextSplit_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IShuffleModule_nextSplit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IShuffleModule_finishSplits_args {
 public:

  IShuffleModule_finishSplits_args(const IShuffleModule_finishSplits_args&);
  IShuffleModule_finishSplits_args& operator=(const IShuffleModule_finishSplits_args&);
  IShuffleModule_finishSplits_args() {
  }

  virtual ~IShuffleModule_finishSplits_args() throw();

  bool operator == (const IShuffleModule_finishSplits_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IShuffleModule_finishSplits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IShuffleModule_finishSplits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IShuffleModule_finishSplits_pargs {
 public:


  virtual ~IShuffleModule_finishSplits_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IShuffleModule_finishSplits_result__isset {
  _IShuffleModule_finishSplits_result__isset() : ex(false) {}
  bool ex :1;
} _IShuffleModule_finishSplits_result__isset;

class IShuffleModule_finishSplits_result {
 public:

  IShuffleModule_finishSplits_result(const IShuffleModule_finishSplits_result&);
  IShuffleModule_finishSplits_result& operator=(const IShuffleModule_finishSplits_result&);
  IShuffleModule_finishSplits_result() {
  }

  virtual ~IShuffleModule_finishSplits_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IShuffleModule_finishSplits_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IShuffleModule_finishSplits_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IShuffleModule_finishSplits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IShuffleModule_finishSplits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IShuffleModule_finishSplits_presult__isset {
  _IShuffleModule_finishSplits_presult__isset() : ex(false) {}
  bool ex :1;
} _IShuffleModule_finishSplits_presult__isset;

class IShuffleModule_finishSplits_presult {
 public:


  virtual ~IShuffleModule_finishSplits_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IShuffleModule_finishSplits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IShuffleModule_joinSplits_args__isset {
  _IShuffleModule_joinSplits_args__isset() : order(false) {}
  bool order :1;
} _IShuffleModule_joinSplits_args__isset;

class IShuffleModule_joinSplits_args {
 public:

  IShuffleModule_joinSplits_args(const IShuffleModule_joinSplits_args&);
  IShuffleModule_joinSplits_args& operator=(const IShuffleModule_joinSplits_args&);
  IShuffleModule_joinSplits_args() {
  }

  virtual ~IShuffleModule_joinSplits_args() throw();
  std::vector<int64_t>  order;

  _IShuffleModule_joinSplits_args__isset __isset;

  void __set_order(const std::vector<int64_t> & val);

  bool operator == (const IShuffleModule_joinSplits_args & rhs) const
  {
    if (!(order == rhs.order))
      return false;
    return true;
  }
  bool operator != (const IShuffleModule_joinSplits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IShuffleModule_joinSplits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IShuffleModule_joinSplits_pargs {
 public:


  virtual ~IShuffleModule_joinSplits_pargs() throw();
  const std::vector<int64_t> * order;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IShuffleModule_joinSplits_result__isset {
  _IShuffleModule_joinSplits_result__isset() : ex(false) {}
  bool ex :1;
} _IShuffleModule_joinSplits_result__isset;

class IShuffleModule_joinSplits_result {
 public:

  IShuffleModule_joinSplits_result(const IShuffleModule_joinSplits_result&);
  IShuffleModule_joinSplits_result& operator=(const IShuffleModule_joinSplits_result&);
  IShuffleModule_joinSplits_result() {
  }

  virtual ~IShuffleModule_joinSplits_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IShuffleModule_joinSplits_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IShuffleModule_joinSplits_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IShuffleModule_joinSplits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IShuffleModule_joinSplits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IShuffleModule_joinSplits_presult__isset {
  _IShuffleModule_joinSplits_presult__isset() : ex(false) {}
  bool ex :1;
} _IShuffleModule_joinSplits_presult__isset;

class IShuffleModule_joinSplits_presult {
 public:


  virtual ~IShuffleModule_joinSplits_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IShuffleModule_joinSplits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IShuffleModuleClient : virtual public IShuffleModuleIf {
 public:
  IShuffleModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IShuffleModuleClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createSplits();
  void send_createSplits();
  void recv_createSplits();
  void nextSplit(const std::string& host, const int32_t port, const int64_t length, const bool local);
  void send_nextSplit(const std::string& host, const int32_t port, const int64_t length, const bool local);
  void recv_nextSplit();
  void finishSplits();
  void send_finishSplits();
  void recv_finishSplits();
  void joinSplits(const std::vector<int64_t> & order);
  void send_joinSplits(const std::vector<int64_t> & order);
  void recv_joinSplits();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IShuffleModuleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IShuffleModuleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IShuffleModuleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createSplits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_nextSplit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_finishSplits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_joinSplits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IShuffleModuleProcessor(::apache::thrift::stdcxx::shared_ptr<IShuffleModuleIf> iface) :
    iface_(iface) {
    processMap_["createSplits"] = &IShuffleModuleProcessor::process_createSplits;
    processMap_["nextSplit"] = &IShuffleModuleProcessor::process_nextSplit;
    processMap_["finishSplits"] = &IShuffleModuleProcessor::process_finishSplits;
    processMap_["joinSplits"] = &IShuffleModuleProcessor::process_joinSplits;
  }

  virtual ~IShuffleModuleProcessor() {}
};

class IShuffleModuleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IShuffleModuleProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IShuffleModuleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IShuffleModuleIfFactory > handlerFactory_;
};

class IShuffleModuleMultiface : virtual public IShuffleModuleIf {
 public:
  IShuffleModuleMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IShuffleModuleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IShuffleModuleMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IShuffleModuleIf> > ifaces_;
  IShuffleModuleMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IShuffleModuleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createSplits() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createSplits();
    }
    ifaces_[i]->createSplits();
  }

  void nextSplit(const std::string& host, const int32_t port, const int64_t length, const bool local) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nextSplit(host, port, length, local);
    }
    ifaces_[i]->nextSplit(host, port, length, local);
  }

  void finishSplits() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->finishSplits();
    }
    ifaces_[i]->finishSplits();
  }

  void joinSplits(const std::vector<int64_t> & order) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->joinSplits(order);
    }
    ifaces_[i]->joinSplits(order);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IShuffleModuleConcurrentClient : virtual public IShuffleModuleIf {
 public:
  IShuffleModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IShuffleModuleConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createSplits();
  int32_t send_createSplits();
  void recv_createSplits(const int32_t seqid);
  void nextSplit(const std::string& host, const int32_t port, const int64_t length, const bool local);
  int32_t send_nextSplit(const std::string& host, const int32_t port, const int64_t length, const bool local);
  void recv_nextSplit(const int32_t seqid);
  void finishSplits();
  int32_t send_finishSplits();
  void recv_finishSplits(const int32_t seqid);
  void joinSplits(const std::vector<int64_t> & order);
  int32_t send_joinSplits(const std::vector<int64_t> & order);
  void recv_joinSplits(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
