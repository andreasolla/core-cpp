/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IDataService_H
#define IDataService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IDataService_types.h"

namespace ignis { namespace rpc { namespace driver {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IDataServiceIf {
 public:
  virtual ~IDataServiceIf() {}
  virtual void keep(const IDataId& data, const int8_t level) = 0;
  virtual void setName(const IDataId& data, const std::string& name) = 0;
  virtual void _map(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function) = 0;
  virtual void flatmap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function) = 0;
  virtual void filter(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function) = 0;
  virtual void streamingMap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered) = 0;
  virtual void streamingFlatmap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered) = 0;
  virtual void streamingFilter(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered) = 0;
  virtual void reduceByKey(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function) = 0;
  virtual void shuffle(IDataId& _return, const IDataId& data) = 0;
  virtual void saveAsTextFile(const IDataId& data, const std::string& path, const bool join) = 0;
  virtual void saveAsJsonFile(const IDataId& data, const std::string& path, const bool join) = 0;
};

class IDataServiceIfFactory {
 public:
  typedef IDataServiceIf Handler;

  virtual ~IDataServiceIfFactory() {}

  virtual IDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IDataServiceIf* /* handler */) = 0;
};

class IDataServiceIfSingletonFactory : virtual public IDataServiceIfFactory {
 public:
  IDataServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IDataServiceIf>& iface) : iface_(iface) {}
  virtual ~IDataServiceIfSingletonFactory() {}

  virtual IDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IDataServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IDataServiceIf> iface_;
};

class IDataServiceNull : virtual public IDataServiceIf {
 public:
  virtual ~IDataServiceNull() {}
  void keep(const IDataId& /* data */, const int8_t /* level */) {
    return;
  }
  void setName(const IDataId& /* data */, const std::string& /* name */) {
    return;
  }
  void _map(IDataId& /* _return */, const IDataId& /* data */, const  ::ignis::rpc::ISource& /* _function */) {
    return;
  }
  void flatmap(IDataId& /* _return */, const IDataId& /* data */, const  ::ignis::rpc::ISource& /* _function */) {
    return;
  }
  void filter(IDataId& /* _return */, const IDataId& /* data */, const  ::ignis::rpc::ISource& /* _function */) {
    return;
  }
  void streamingMap(IDataId& /* _return */, const IDataId& /* data */, const  ::ignis::rpc::ISource& /* _function */, const bool /* ordered */) {
    return;
  }
  void streamingFlatmap(IDataId& /* _return */, const IDataId& /* data */, const  ::ignis::rpc::ISource& /* _function */, const bool /* ordered */) {
    return;
  }
  void streamingFilter(IDataId& /* _return */, const IDataId& /* data */, const  ::ignis::rpc::ISource& /* _function */, const bool /* ordered */) {
    return;
  }
  void reduceByKey(IDataId& /* _return */, const IDataId& /* data */, const  ::ignis::rpc::ISource& /* _function */) {
    return;
  }
  void shuffle(IDataId& /* _return */, const IDataId& /* data */) {
    return;
  }
  void saveAsTextFile(const IDataId& /* data */, const std::string& /* path */, const bool /* join */) {
    return;
  }
  void saveAsJsonFile(const IDataId& /* data */, const std::string& /* path */, const bool /* join */) {
    return;
  }
};

typedef struct _IDataService_keep_args__isset {
  _IDataService_keep_args__isset() : data(false), level(false) {}
  bool data :1;
  bool level :1;
} _IDataService_keep_args__isset;

class IDataService_keep_args {
 public:

  IDataService_keep_args(const IDataService_keep_args&);
  IDataService_keep_args& operator=(const IDataService_keep_args&);
  IDataService_keep_args() : level(0) {
  }

  virtual ~IDataService_keep_args() throw();
  IDataId data;
  int8_t level;

  _IDataService_keep_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set_level(const int8_t val);

  bool operator == (const IDataService_keep_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const IDataService_keep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_keep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_keep_pargs {
 public:


  virtual ~IDataService_keep_pargs() throw();
  const IDataId* data;
  const int8_t* level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_keep_result__isset {
  _IDataService_keep_result__isset() : ex(false) {}
  bool ex :1;
} _IDataService_keep_result__isset;

class IDataService_keep_result {
 public:

  IDataService_keep_result(const IDataService_keep_result&);
  IDataService_keep_result& operator=(const IDataService_keep_result&);
  IDataService_keep_result() {
  }

  virtual ~IDataService_keep_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IDataService_keep_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_keep_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_keep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_keep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_keep_presult__isset {
  _IDataService_keep_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataService_keep_presult__isset;

class IDataService_keep_presult {
 public:


  virtual ~IDataService_keep_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IDataService_keep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_setName_args__isset {
  _IDataService_setName_args__isset() : data(false), name(false) {}
  bool data :1;
  bool name :1;
} _IDataService_setName_args__isset;

class IDataService_setName_args {
 public:

  IDataService_setName_args(const IDataService_setName_args&);
  IDataService_setName_args& operator=(const IDataService_setName_args&);
  IDataService_setName_args() : name() {
  }

  virtual ~IDataService_setName_args() throw();
  IDataId data;
  std::string name;

  _IDataService_setName_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set_name(const std::string& val);

  bool operator == (const IDataService_setName_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const IDataService_setName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_setName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_setName_pargs {
 public:


  virtual ~IDataService_setName_pargs() throw();
  const IDataId* data;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_setName_result__isset {
  _IDataService_setName_result__isset() : ex(false) {}
  bool ex :1;
} _IDataService_setName_result__isset;

class IDataService_setName_result {
 public:

  IDataService_setName_result(const IDataService_setName_result&);
  IDataService_setName_result& operator=(const IDataService_setName_result&);
  IDataService_setName_result() {
  }

  virtual ~IDataService_setName_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IDataService_setName_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_setName_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_setName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_setName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_setName_presult__isset {
  _IDataService_setName_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataService_setName_presult__isset;

class IDataService_setName_presult {
 public:


  virtual ~IDataService_setName_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IDataService_setName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService__map_args__isset {
  _IDataService__map_args__isset() : data(false), _function(false) {}
  bool data :1;
  bool _function :1;
} _IDataService__map_args__isset;

class IDataService__map_args {
 public:

  IDataService__map_args(const IDataService__map_args&);
  IDataService__map_args& operator=(const IDataService__map_args&);
  IDataService__map_args() {
  }

  virtual ~IDataService__map_args() throw();
  IDataId data;
   ::ignis::rpc::ISource _function;

  _IDataService__map_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set__function(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataService__map_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(_function == rhs._function))
      return false;
    return true;
  }
  bool operator != (const IDataService__map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService__map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService__map_pargs {
 public:


  virtual ~IDataService__map_pargs() throw();
  const IDataId* data;
  const  ::ignis::rpc::ISource* _function;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService__map_result__isset {
  _IDataService__map_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService__map_result__isset;

class IDataService__map_result {
 public:

  IDataService__map_result(const IDataService__map_result&);
  IDataService__map_result& operator=(const IDataService__map_result&);
  IDataService__map_result() {
  }

  virtual ~IDataService__map_result() throw();
  IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService__map_result__isset __isset;

  void __set_success(const IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService__map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService__map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService__map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService__map_presult__isset {
  _IDataService__map_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService__map_presult__isset;

class IDataService__map_presult {
 public:


  virtual ~IDataService__map_presult() throw();
  IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService__map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_flatmap_args__isset {
  _IDataService_flatmap_args__isset() : data(false), _function(false) {}
  bool data :1;
  bool _function :1;
} _IDataService_flatmap_args__isset;

class IDataService_flatmap_args {
 public:

  IDataService_flatmap_args(const IDataService_flatmap_args&);
  IDataService_flatmap_args& operator=(const IDataService_flatmap_args&);
  IDataService_flatmap_args() {
  }

  virtual ~IDataService_flatmap_args() throw();
  IDataId data;
   ::ignis::rpc::ISource _function;

  _IDataService_flatmap_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set__function(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataService_flatmap_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(_function == rhs._function))
      return false;
    return true;
  }
  bool operator != (const IDataService_flatmap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_flatmap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_flatmap_pargs {
 public:


  virtual ~IDataService_flatmap_pargs() throw();
  const IDataId* data;
  const  ::ignis::rpc::ISource* _function;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_flatmap_result__isset {
  _IDataService_flatmap_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_flatmap_result__isset;

class IDataService_flatmap_result {
 public:

  IDataService_flatmap_result(const IDataService_flatmap_result&);
  IDataService_flatmap_result& operator=(const IDataService_flatmap_result&);
  IDataService_flatmap_result() {
  }

  virtual ~IDataService_flatmap_result() throw();
  IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_flatmap_result__isset __isset;

  void __set_success(const IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_flatmap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_flatmap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_flatmap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_flatmap_presult__isset {
  _IDataService_flatmap_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_flatmap_presult__isset;

class IDataService_flatmap_presult {
 public:


  virtual ~IDataService_flatmap_presult() throw();
  IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_flatmap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_filter_args__isset {
  _IDataService_filter_args__isset() : data(false), _function(false) {}
  bool data :1;
  bool _function :1;
} _IDataService_filter_args__isset;

class IDataService_filter_args {
 public:

  IDataService_filter_args(const IDataService_filter_args&);
  IDataService_filter_args& operator=(const IDataService_filter_args&);
  IDataService_filter_args() {
  }

  virtual ~IDataService_filter_args() throw();
  IDataId data;
   ::ignis::rpc::ISource _function;

  _IDataService_filter_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set__function(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataService_filter_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(_function == rhs._function))
      return false;
    return true;
  }
  bool operator != (const IDataService_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_filter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_filter_pargs {
 public:


  virtual ~IDataService_filter_pargs() throw();
  const IDataId* data;
  const  ::ignis::rpc::ISource* _function;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_filter_result__isset {
  _IDataService_filter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_filter_result__isset;

class IDataService_filter_result {
 public:

  IDataService_filter_result(const IDataService_filter_result&);
  IDataService_filter_result& operator=(const IDataService_filter_result&);
  IDataService_filter_result() {
  }

  virtual ~IDataService_filter_result() throw();
  IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_filter_result__isset __isset;

  void __set_success(const IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_filter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_filter_presult__isset {
  _IDataService_filter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_filter_presult__isset;

class IDataService_filter_presult {
 public:


  virtual ~IDataService_filter_presult() throw();
  IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_filter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_streamingMap_args__isset {
  _IDataService_streamingMap_args__isset() : data(false), _function(false), ordered(false) {}
  bool data :1;
  bool _function :1;
  bool ordered :1;
} _IDataService_streamingMap_args__isset;

class IDataService_streamingMap_args {
 public:

  IDataService_streamingMap_args(const IDataService_streamingMap_args&);
  IDataService_streamingMap_args& operator=(const IDataService_streamingMap_args&);
  IDataService_streamingMap_args() : ordered(0) {
  }

  virtual ~IDataService_streamingMap_args() throw();
  IDataId data;
   ::ignis::rpc::ISource _function;
  bool ordered;

  _IDataService_streamingMap_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set__function(const  ::ignis::rpc::ISource& val);

  void __set_ordered(const bool val);

  bool operator == (const IDataService_streamingMap_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(_function == rhs._function))
      return false;
    if (!(ordered == rhs.ordered))
      return false;
    return true;
  }
  bool operator != (const IDataService_streamingMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_streamingMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_streamingMap_pargs {
 public:


  virtual ~IDataService_streamingMap_pargs() throw();
  const IDataId* data;
  const  ::ignis::rpc::ISource* _function;
  const bool* ordered;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_streamingMap_result__isset {
  _IDataService_streamingMap_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_streamingMap_result__isset;

class IDataService_streamingMap_result {
 public:

  IDataService_streamingMap_result(const IDataService_streamingMap_result&);
  IDataService_streamingMap_result& operator=(const IDataService_streamingMap_result&);
  IDataService_streamingMap_result() {
  }

  virtual ~IDataService_streamingMap_result() throw();
  IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_streamingMap_result__isset __isset;

  void __set_success(const IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_streamingMap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_streamingMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_streamingMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_streamingMap_presult__isset {
  _IDataService_streamingMap_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_streamingMap_presult__isset;

class IDataService_streamingMap_presult {
 public:


  virtual ~IDataService_streamingMap_presult() throw();
  IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_streamingMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_streamingFlatmap_args__isset {
  _IDataService_streamingFlatmap_args__isset() : data(false), _function(false), ordered(false) {}
  bool data :1;
  bool _function :1;
  bool ordered :1;
} _IDataService_streamingFlatmap_args__isset;

class IDataService_streamingFlatmap_args {
 public:

  IDataService_streamingFlatmap_args(const IDataService_streamingFlatmap_args&);
  IDataService_streamingFlatmap_args& operator=(const IDataService_streamingFlatmap_args&);
  IDataService_streamingFlatmap_args() : ordered(0) {
  }

  virtual ~IDataService_streamingFlatmap_args() throw();
  IDataId data;
   ::ignis::rpc::ISource _function;
  bool ordered;

  _IDataService_streamingFlatmap_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set__function(const  ::ignis::rpc::ISource& val);

  void __set_ordered(const bool val);

  bool operator == (const IDataService_streamingFlatmap_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(_function == rhs._function))
      return false;
    if (!(ordered == rhs.ordered))
      return false;
    return true;
  }
  bool operator != (const IDataService_streamingFlatmap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_streamingFlatmap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_streamingFlatmap_pargs {
 public:


  virtual ~IDataService_streamingFlatmap_pargs() throw();
  const IDataId* data;
  const  ::ignis::rpc::ISource* _function;
  const bool* ordered;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_streamingFlatmap_result__isset {
  _IDataService_streamingFlatmap_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_streamingFlatmap_result__isset;

class IDataService_streamingFlatmap_result {
 public:

  IDataService_streamingFlatmap_result(const IDataService_streamingFlatmap_result&);
  IDataService_streamingFlatmap_result& operator=(const IDataService_streamingFlatmap_result&);
  IDataService_streamingFlatmap_result() {
  }

  virtual ~IDataService_streamingFlatmap_result() throw();
  IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_streamingFlatmap_result__isset __isset;

  void __set_success(const IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_streamingFlatmap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_streamingFlatmap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_streamingFlatmap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_streamingFlatmap_presult__isset {
  _IDataService_streamingFlatmap_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_streamingFlatmap_presult__isset;

class IDataService_streamingFlatmap_presult {
 public:


  virtual ~IDataService_streamingFlatmap_presult() throw();
  IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_streamingFlatmap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_streamingFilter_args__isset {
  _IDataService_streamingFilter_args__isset() : data(false), _function(false), ordered(false) {}
  bool data :1;
  bool _function :1;
  bool ordered :1;
} _IDataService_streamingFilter_args__isset;

class IDataService_streamingFilter_args {
 public:

  IDataService_streamingFilter_args(const IDataService_streamingFilter_args&);
  IDataService_streamingFilter_args& operator=(const IDataService_streamingFilter_args&);
  IDataService_streamingFilter_args() : ordered(0) {
  }

  virtual ~IDataService_streamingFilter_args() throw();
  IDataId data;
   ::ignis::rpc::ISource _function;
  bool ordered;

  _IDataService_streamingFilter_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set__function(const  ::ignis::rpc::ISource& val);

  void __set_ordered(const bool val);

  bool operator == (const IDataService_streamingFilter_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(_function == rhs._function))
      return false;
    if (!(ordered == rhs.ordered))
      return false;
    return true;
  }
  bool operator != (const IDataService_streamingFilter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_streamingFilter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_streamingFilter_pargs {
 public:


  virtual ~IDataService_streamingFilter_pargs() throw();
  const IDataId* data;
  const  ::ignis::rpc::ISource* _function;
  const bool* ordered;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_streamingFilter_result__isset {
  _IDataService_streamingFilter_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_streamingFilter_result__isset;

class IDataService_streamingFilter_result {
 public:

  IDataService_streamingFilter_result(const IDataService_streamingFilter_result&);
  IDataService_streamingFilter_result& operator=(const IDataService_streamingFilter_result&);
  IDataService_streamingFilter_result() {
  }

  virtual ~IDataService_streamingFilter_result() throw();
  IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_streamingFilter_result__isset __isset;

  void __set_success(const IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_streamingFilter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_streamingFilter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_streamingFilter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_streamingFilter_presult__isset {
  _IDataService_streamingFilter_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_streamingFilter_presult__isset;

class IDataService_streamingFilter_presult {
 public:


  virtual ~IDataService_streamingFilter_presult() throw();
  IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_streamingFilter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_reduceByKey_args__isset {
  _IDataService_reduceByKey_args__isset() : data(false), _function(false) {}
  bool data :1;
  bool _function :1;
} _IDataService_reduceByKey_args__isset;

class IDataService_reduceByKey_args {
 public:

  IDataService_reduceByKey_args(const IDataService_reduceByKey_args&);
  IDataService_reduceByKey_args& operator=(const IDataService_reduceByKey_args&);
  IDataService_reduceByKey_args() {
  }

  virtual ~IDataService_reduceByKey_args() throw();
  IDataId data;
   ::ignis::rpc::ISource _function;

  _IDataService_reduceByKey_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set__function(const  ::ignis::rpc::ISource& val);

  bool operator == (const IDataService_reduceByKey_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(_function == rhs._function))
      return false;
    return true;
  }
  bool operator != (const IDataService_reduceByKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_reduceByKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_reduceByKey_pargs {
 public:


  virtual ~IDataService_reduceByKey_pargs() throw();
  const IDataId* data;
  const  ::ignis::rpc::ISource* _function;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_reduceByKey_result__isset {
  _IDataService_reduceByKey_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_reduceByKey_result__isset;

class IDataService_reduceByKey_result {
 public:

  IDataService_reduceByKey_result(const IDataService_reduceByKey_result&);
  IDataService_reduceByKey_result& operator=(const IDataService_reduceByKey_result&);
  IDataService_reduceByKey_result() {
  }

  virtual ~IDataService_reduceByKey_result() throw();
  IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_reduceByKey_result__isset __isset;

  void __set_success(const IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_reduceByKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_reduceByKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_reduceByKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_reduceByKey_presult__isset {
  _IDataService_reduceByKey_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_reduceByKey_presult__isset;

class IDataService_reduceByKey_presult {
 public:


  virtual ~IDataService_reduceByKey_presult() throw();
  IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_reduceByKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_shuffle_args__isset {
  _IDataService_shuffle_args__isset() : data(false) {}
  bool data :1;
} _IDataService_shuffle_args__isset;

class IDataService_shuffle_args {
 public:

  IDataService_shuffle_args(const IDataService_shuffle_args&);
  IDataService_shuffle_args& operator=(const IDataService_shuffle_args&);
  IDataService_shuffle_args() {
  }

  virtual ~IDataService_shuffle_args() throw();
  IDataId data;

  _IDataService_shuffle_args__isset __isset;

  void __set_data(const IDataId& val);

  bool operator == (const IDataService_shuffle_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const IDataService_shuffle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_shuffle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_shuffle_pargs {
 public:


  virtual ~IDataService_shuffle_pargs() throw();
  const IDataId* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_shuffle_result__isset {
  _IDataService_shuffle_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_shuffle_result__isset;

class IDataService_shuffle_result {
 public:

  IDataService_shuffle_result(const IDataService_shuffle_result&);
  IDataService_shuffle_result& operator=(const IDataService_shuffle_result&);
  IDataService_shuffle_result() {
  }

  virtual ~IDataService_shuffle_result() throw();
  IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_shuffle_result__isset __isset;

  void __set_success(const IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_shuffle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_shuffle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_shuffle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_shuffle_presult__isset {
  _IDataService_shuffle_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IDataService_shuffle_presult__isset;

class IDataService_shuffle_presult {
 public:


  virtual ~IDataService_shuffle_presult() throw();
  IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IDataService_shuffle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_saveAsTextFile_args__isset {
  _IDataService_saveAsTextFile_args__isset() : data(false), path(false), join(false) {}
  bool data :1;
  bool path :1;
  bool join :1;
} _IDataService_saveAsTextFile_args__isset;

class IDataService_saveAsTextFile_args {
 public:

  IDataService_saveAsTextFile_args(const IDataService_saveAsTextFile_args&);
  IDataService_saveAsTextFile_args& operator=(const IDataService_saveAsTextFile_args&);
  IDataService_saveAsTextFile_args() : path(), join(0) {
  }

  virtual ~IDataService_saveAsTextFile_args() throw();
  IDataId data;
  std::string path;
  bool join;

  _IDataService_saveAsTextFile_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set_path(const std::string& val);

  void __set_join(const bool val);

  bool operator == (const IDataService_saveAsTextFile_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(join == rhs.join))
      return false;
    return true;
  }
  bool operator != (const IDataService_saveAsTextFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_saveAsTextFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_saveAsTextFile_pargs {
 public:


  virtual ~IDataService_saveAsTextFile_pargs() throw();
  const IDataId* data;
  const std::string* path;
  const bool* join;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_saveAsTextFile_result__isset {
  _IDataService_saveAsTextFile_result__isset() : ex(false) {}
  bool ex :1;
} _IDataService_saveAsTextFile_result__isset;

class IDataService_saveAsTextFile_result {
 public:

  IDataService_saveAsTextFile_result(const IDataService_saveAsTextFile_result&);
  IDataService_saveAsTextFile_result& operator=(const IDataService_saveAsTextFile_result&);
  IDataService_saveAsTextFile_result() {
  }

  virtual ~IDataService_saveAsTextFile_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IDataService_saveAsTextFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_saveAsTextFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_saveAsTextFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_saveAsTextFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_saveAsTextFile_presult__isset {
  _IDataService_saveAsTextFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataService_saveAsTextFile_presult__isset;

class IDataService_saveAsTextFile_presult {
 public:


  virtual ~IDataService_saveAsTextFile_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IDataService_saveAsTextFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IDataService_saveAsJsonFile_args__isset {
  _IDataService_saveAsJsonFile_args__isset() : data(false), path(false), join(false) {}
  bool data :1;
  bool path :1;
  bool join :1;
} _IDataService_saveAsJsonFile_args__isset;

class IDataService_saveAsJsonFile_args {
 public:

  IDataService_saveAsJsonFile_args(const IDataService_saveAsJsonFile_args&);
  IDataService_saveAsJsonFile_args& operator=(const IDataService_saveAsJsonFile_args&);
  IDataService_saveAsJsonFile_args() : path(), join(0) {
  }

  virtual ~IDataService_saveAsJsonFile_args() throw();
  IDataId data;
  std::string path;
  bool join;

  _IDataService_saveAsJsonFile_args__isset __isset;

  void __set_data(const IDataId& val);

  void __set_path(const std::string& val);

  void __set_join(const bool val);

  bool operator == (const IDataService_saveAsJsonFile_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(join == rhs.join))
      return false;
    return true;
  }
  bool operator != (const IDataService_saveAsJsonFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_saveAsJsonFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IDataService_saveAsJsonFile_pargs {
 public:


  virtual ~IDataService_saveAsJsonFile_pargs() throw();
  const IDataId* data;
  const std::string* path;
  const bool* join;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_saveAsJsonFile_result__isset {
  _IDataService_saveAsJsonFile_result__isset() : ex(false) {}
  bool ex :1;
} _IDataService_saveAsJsonFile_result__isset;

class IDataService_saveAsJsonFile_result {
 public:

  IDataService_saveAsJsonFile_result(const IDataService_saveAsJsonFile_result&);
  IDataService_saveAsJsonFile_result& operator=(const IDataService_saveAsJsonFile_result&);
  IDataService_saveAsJsonFile_result() {
  }

  virtual ~IDataService_saveAsJsonFile_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IDataService_saveAsJsonFile_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IDataService_saveAsJsonFile_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IDataService_saveAsJsonFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataService_saveAsJsonFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IDataService_saveAsJsonFile_presult__isset {
  _IDataService_saveAsJsonFile_presult__isset() : ex(false) {}
  bool ex :1;
} _IDataService_saveAsJsonFile_presult__isset;

class IDataService_saveAsJsonFile_presult {
 public:


  virtual ~IDataService_saveAsJsonFile_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IDataService_saveAsJsonFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IDataServiceClient : virtual public IDataServiceIf {
 public:
  IDataServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IDataServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void keep(const IDataId& data, const int8_t level);
  void send_keep(const IDataId& data, const int8_t level);
  void recv_keep();
  void setName(const IDataId& data, const std::string& name);
  void send_setName(const IDataId& data, const std::string& name);
  void recv_setName();
  void _map(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void send__map(const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void recv__map(IDataId& _return);
  void flatmap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void send_flatmap(const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void recv_flatmap(IDataId& _return);
  void filter(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void send_filter(const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void recv_filter(IDataId& _return);
  void streamingMap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void send_streamingMap(const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void recv_streamingMap(IDataId& _return);
  void streamingFlatmap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void send_streamingFlatmap(const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void recv_streamingFlatmap(IDataId& _return);
  void streamingFilter(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void send_streamingFilter(const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void recv_streamingFilter(IDataId& _return);
  void reduceByKey(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void send_reduceByKey(const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void recv_reduceByKey(IDataId& _return);
  void shuffle(IDataId& _return, const IDataId& data);
  void send_shuffle(const IDataId& data);
  void recv_shuffle(IDataId& _return);
  void saveAsTextFile(const IDataId& data, const std::string& path, const bool join);
  void send_saveAsTextFile(const IDataId& data, const std::string& path, const bool join);
  void recv_saveAsTextFile();
  void saveAsJsonFile(const IDataId& data, const std::string& path, const bool join);
  void send_saveAsJsonFile(const IDataId& data, const std::string& path, const bool join);
  void recv_saveAsJsonFile();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IDataServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IDataServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IDataServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_keep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process__map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_flatmap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_streamingMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_streamingFlatmap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_streamingFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reduceByKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shuffle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsTextFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAsJsonFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IDataServiceProcessor(::apache::thrift::stdcxx::shared_ptr<IDataServiceIf> iface) :
    iface_(iface) {
    processMap_["keep"] = &IDataServiceProcessor::process_keep;
    processMap_["setName"] = &IDataServiceProcessor::process_setName;
    processMap_["_map"] = &IDataServiceProcessor::process__map;
    processMap_["flatmap"] = &IDataServiceProcessor::process_flatmap;
    processMap_["filter"] = &IDataServiceProcessor::process_filter;
    processMap_["streamingMap"] = &IDataServiceProcessor::process_streamingMap;
    processMap_["streamingFlatmap"] = &IDataServiceProcessor::process_streamingFlatmap;
    processMap_["streamingFilter"] = &IDataServiceProcessor::process_streamingFilter;
    processMap_["reduceByKey"] = &IDataServiceProcessor::process_reduceByKey;
    processMap_["shuffle"] = &IDataServiceProcessor::process_shuffle;
    processMap_["saveAsTextFile"] = &IDataServiceProcessor::process_saveAsTextFile;
    processMap_["saveAsJsonFile"] = &IDataServiceProcessor::process_saveAsJsonFile;
  }

  virtual ~IDataServiceProcessor() {}
};

class IDataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IDataServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IDataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IDataServiceIfFactory > handlerFactory_;
};

class IDataServiceMultiface : virtual public IDataServiceIf {
 public:
  IDataServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IDataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IDataServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IDataServiceIf> > ifaces_;
  IDataServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IDataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void keep(const IDataId& data, const int8_t level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keep(data, level);
    }
    ifaces_[i]->keep(data, level);
  }

  void setName(const IDataId& data, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setName(data, name);
    }
    ifaces_[i]->setName(data, name);
  }

  void _map(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->_map(_return, data, _function);
    }
    ifaces_[i]->_map(_return, data, _function);
    return;
  }

  void flatmap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->flatmap(_return, data, _function);
    }
    ifaces_[i]->flatmap(_return, data, _function);
    return;
  }

  void filter(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filter(_return, data, _function);
    }
    ifaces_[i]->filter(_return, data, _function);
    return;
  }

  void streamingMap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->streamingMap(_return, data, _function, ordered);
    }
    ifaces_[i]->streamingMap(_return, data, _function, ordered);
    return;
  }

  void streamingFlatmap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->streamingFlatmap(_return, data, _function, ordered);
    }
    ifaces_[i]->streamingFlatmap(_return, data, _function, ordered);
    return;
  }

  void streamingFilter(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->streamingFilter(_return, data, _function, ordered);
    }
    ifaces_[i]->streamingFilter(_return, data, _function, ordered);
    return;
  }

  void reduceByKey(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reduceByKey(_return, data, _function);
    }
    ifaces_[i]->reduceByKey(_return, data, _function);
    return;
  }

  void shuffle(IDataId& _return, const IDataId& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shuffle(_return, data);
    }
    ifaces_[i]->shuffle(_return, data);
    return;
  }

  void saveAsTextFile(const IDataId& data, const std::string& path, const bool join) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsTextFile(data, path, join);
    }
    ifaces_[i]->saveAsTextFile(data, path, join);
  }

  void saveAsJsonFile(const IDataId& data, const std::string& path, const bool join) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAsJsonFile(data, path, join);
    }
    ifaces_[i]->saveAsJsonFile(data, path, join);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IDataServiceConcurrentClient : virtual public IDataServiceIf {
 public:
  IDataServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IDataServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void keep(const IDataId& data, const int8_t level);
  int32_t send_keep(const IDataId& data, const int8_t level);
  void recv_keep(const int32_t seqid);
  void setName(const IDataId& data, const std::string& name);
  int32_t send_setName(const IDataId& data, const std::string& name);
  void recv_setName(const int32_t seqid);
  void _map(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function);
  int32_t send__map(const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void recv__map(IDataId& _return, const int32_t seqid);
  void flatmap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function);
  int32_t send_flatmap(const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void recv_flatmap(IDataId& _return, const int32_t seqid);
  void filter(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function);
  int32_t send_filter(const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void recv_filter(IDataId& _return, const int32_t seqid);
  void streamingMap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  int32_t send_streamingMap(const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void recv_streamingMap(IDataId& _return, const int32_t seqid);
  void streamingFlatmap(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  int32_t send_streamingFlatmap(const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void recv_streamingFlatmap(IDataId& _return, const int32_t seqid);
  void streamingFilter(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  int32_t send_streamingFilter(const IDataId& data, const  ::ignis::rpc::ISource& _function, const bool ordered);
  void recv_streamingFilter(IDataId& _return, const int32_t seqid);
  void reduceByKey(IDataId& _return, const IDataId& data, const  ::ignis::rpc::ISource& _function);
  int32_t send_reduceByKey(const IDataId& data, const  ::ignis::rpc::ISource& _function);
  void recv_reduceByKey(IDataId& _return, const int32_t seqid);
  void shuffle(IDataId& _return, const IDataId& data);
  int32_t send_shuffle(const IDataId& data);
  void recv_shuffle(IDataId& _return, const int32_t seqid);
  void saveAsTextFile(const IDataId& data, const std::string& path, const bool join);
  int32_t send_saveAsTextFile(const IDataId& data, const std::string& path, const bool join);
  void recv_saveAsTextFile(const int32_t seqid);
  void saveAsJsonFile(const IDataId& data, const std::string& path, const bool join);
  int32_t send_saveAsJsonFile(const IDataId& data, const std::string& path, const bool join);
  void recv_saveAsJsonFile(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
