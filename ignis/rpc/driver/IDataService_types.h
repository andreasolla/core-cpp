/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IDataService_TYPES_H
#define IDataService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "../IRemoteException_types.h"
#include "../ISourceFunction_types.h"


namespace ignis { namespace rpc { namespace driver {

class IDataId;


class IDataId : public virtual ::apache::thrift::TBase {
 public:

  IDataId(const IDataId&);
  IDataId& operator=(const IDataId&);
  IDataId() : cluster(0), job(0), data(0) {
  }

  virtual ~IDataId() throw();
  int64_t cluster;
  int64_t job;
  int64_t data;

  void __set_cluster(const int64_t val);

  void __set_job(const int64_t val);

  void __set_data(const int64_t val);

  bool operator == (const IDataId & rhs) const
  {
    if (!(cluster == rhs.cluster))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const IDataId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDataId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IDataId &a, IDataId &b);

std::ostream& operator<<(std::ostream& out, const IDataId& obj);

}}} // namespace

#endif
