/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IJobService_H
#define IJobService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "IJobService_types.h"

namespace ignis { namespace rpc { namespace driver {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IJobServiceIf {
 public:
  virtual ~IJobServiceIf() {}
  virtual void newInstance(IJobId& _return, const int64_t cluster, const std::string& type) = 0;
  virtual void newInstance3(IJobId& _return, const int64_t cluster, const std::string& type, const int64_t properties) = 0;
  virtual void keep(const IJobId& job) = 0;
  virtual void importData( ::ignis::rpc::driver::IDataId& _return, const IJobId& job, const  ::ignis::rpc::driver::IDataId& data) = 0;
  virtual void readFile( ::ignis::rpc::driver::IDataId& _return, const IJobId& job, const std::string& path) = 0;
};

class IJobServiceIfFactory {
 public:
  typedef IJobServiceIf Handler;

  virtual ~IJobServiceIfFactory() {}

  virtual IJobServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IJobServiceIf* /* handler */) = 0;
};

class IJobServiceIfSingletonFactory : virtual public IJobServiceIfFactory {
 public:
  IJobServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<IJobServiceIf>& iface) : iface_(iface) {}
  virtual ~IJobServiceIfSingletonFactory() {}

  virtual IJobServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IJobServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<IJobServiceIf> iface_;
};

class IJobServiceNull : virtual public IJobServiceIf {
 public:
  virtual ~IJobServiceNull() {}
  void newInstance(IJobId& /* _return */, const int64_t /* cluster */, const std::string& /* type */) {
    return;
  }
  void newInstance3(IJobId& /* _return */, const int64_t /* cluster */, const std::string& /* type */, const int64_t /* properties */) {
    return;
  }
  void keep(const IJobId& /* job */) {
    return;
  }
  void importData( ::ignis::rpc::driver::IDataId& /* _return */, const IJobId& /* job */, const  ::ignis::rpc::driver::IDataId& /* data */) {
    return;
  }
  void readFile( ::ignis::rpc::driver::IDataId& /* _return */, const IJobId& /* job */, const std::string& /* path */) {
    return;
  }
};

typedef struct _IJobService_newInstance_args__isset {
  _IJobService_newInstance_args__isset() : cluster(false), type(false) {}
  bool cluster :1;
  bool type :1;
} _IJobService_newInstance_args__isset;

class IJobService_newInstance_args {
 public:

  IJobService_newInstance_args(const IJobService_newInstance_args&);
  IJobService_newInstance_args& operator=(const IJobService_newInstance_args&);
  IJobService_newInstance_args() : cluster(0), type() {
  }

  virtual ~IJobService_newInstance_args() throw();
  int64_t cluster;
  std::string type;

  _IJobService_newInstance_args__isset __isset;

  void __set_cluster(const int64_t val);

  void __set_type(const std::string& val);

  bool operator == (const IJobService_newInstance_args & rhs) const
  {
    if (!(cluster == rhs.cluster))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const IJobService_newInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_newInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IJobService_newInstance_pargs {
 public:


  virtual ~IJobService_newInstance_pargs() throw();
  const int64_t* cluster;
  const std::string* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_newInstance_result__isset {
  _IJobService_newInstance_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IJobService_newInstance_result__isset;

class IJobService_newInstance_result {
 public:

  IJobService_newInstance_result(const IJobService_newInstance_result&);
  IJobService_newInstance_result& operator=(const IJobService_newInstance_result&);
  IJobService_newInstance_result() {
  }

  virtual ~IJobService_newInstance_result() throw();
  IJobId success;
   ::ignis::rpc::IRemoteException ex;

  _IJobService_newInstance_result__isset __isset;

  void __set_success(const IJobId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IJobService_newInstance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IJobService_newInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_newInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_newInstance_presult__isset {
  _IJobService_newInstance_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IJobService_newInstance_presult__isset;

class IJobService_newInstance_presult {
 public:


  virtual ~IJobService_newInstance_presult() throw();
  IJobId* success;
   ::ignis::rpc::IRemoteException ex;

  _IJobService_newInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IJobService_newInstance3_args__isset {
  _IJobService_newInstance3_args__isset() : cluster(false), type(false), properties(false) {}
  bool cluster :1;
  bool type :1;
  bool properties :1;
} _IJobService_newInstance3_args__isset;

class IJobService_newInstance3_args {
 public:

  IJobService_newInstance3_args(const IJobService_newInstance3_args&);
  IJobService_newInstance3_args& operator=(const IJobService_newInstance3_args&);
  IJobService_newInstance3_args() : cluster(0), type(), properties(0) {
  }

  virtual ~IJobService_newInstance3_args() throw();
  int64_t cluster;
  std::string type;
  int64_t properties;

  _IJobService_newInstance3_args__isset __isset;

  void __set_cluster(const int64_t val);

  void __set_type(const std::string& val);

  void __set_properties(const int64_t val);

  bool operator == (const IJobService_newInstance3_args & rhs) const
  {
    if (!(cluster == rhs.cluster))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const IJobService_newInstance3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_newInstance3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IJobService_newInstance3_pargs {
 public:


  virtual ~IJobService_newInstance3_pargs() throw();
  const int64_t* cluster;
  const std::string* type;
  const int64_t* properties;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_newInstance3_result__isset {
  _IJobService_newInstance3_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IJobService_newInstance3_result__isset;

class IJobService_newInstance3_result {
 public:

  IJobService_newInstance3_result(const IJobService_newInstance3_result&);
  IJobService_newInstance3_result& operator=(const IJobService_newInstance3_result&);
  IJobService_newInstance3_result() {
  }

  virtual ~IJobService_newInstance3_result() throw();
  IJobId success;
   ::ignis::rpc::IRemoteException ex;

  _IJobService_newInstance3_result__isset __isset;

  void __set_success(const IJobId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IJobService_newInstance3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IJobService_newInstance3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_newInstance3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_newInstance3_presult__isset {
  _IJobService_newInstance3_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IJobService_newInstance3_presult__isset;

class IJobService_newInstance3_presult {
 public:


  virtual ~IJobService_newInstance3_presult() throw();
  IJobId* success;
   ::ignis::rpc::IRemoteException ex;

  _IJobService_newInstance3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IJobService_keep_args__isset {
  _IJobService_keep_args__isset() : job(false) {}
  bool job :1;
} _IJobService_keep_args__isset;

class IJobService_keep_args {
 public:

  IJobService_keep_args(const IJobService_keep_args&);
  IJobService_keep_args& operator=(const IJobService_keep_args&);
  IJobService_keep_args() {
  }

  virtual ~IJobService_keep_args() throw();
  IJobId job;

  _IJobService_keep_args__isset __isset;

  void __set_job(const IJobId& val);

  bool operator == (const IJobService_keep_args & rhs) const
  {
    if (!(job == rhs.job))
      return false;
    return true;
  }
  bool operator != (const IJobService_keep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_keep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IJobService_keep_pargs {
 public:


  virtual ~IJobService_keep_pargs() throw();
  const IJobId* job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_keep_result__isset {
  _IJobService_keep_result__isset() : ex(false) {}
  bool ex :1;
} _IJobService_keep_result__isset;

class IJobService_keep_result {
 public:

  IJobService_keep_result(const IJobService_keep_result&);
  IJobService_keep_result& operator=(const IJobService_keep_result&);
  IJobService_keep_result() {
  }

  virtual ~IJobService_keep_result() throw();
   ::ignis::rpc::IRemoteException ex;

  _IJobService_keep_result__isset __isset;

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IJobService_keep_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IJobService_keep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_keep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_keep_presult__isset {
  _IJobService_keep_presult__isset() : ex(false) {}
  bool ex :1;
} _IJobService_keep_presult__isset;

class IJobService_keep_presult {
 public:


  virtual ~IJobService_keep_presult() throw();
   ::ignis::rpc::IRemoteException ex;

  _IJobService_keep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IJobService_importData_args__isset {
  _IJobService_importData_args__isset() : job(false), data(false) {}
  bool job :1;
  bool data :1;
} _IJobService_importData_args__isset;

class IJobService_importData_args {
 public:

  IJobService_importData_args(const IJobService_importData_args&);
  IJobService_importData_args& operator=(const IJobService_importData_args&);
  IJobService_importData_args() {
  }

  virtual ~IJobService_importData_args() throw();
  IJobId job;
   ::ignis::rpc::driver::IDataId data;

  _IJobService_importData_args__isset __isset;

  void __set_job(const IJobId& val);

  void __set_data(const  ::ignis::rpc::driver::IDataId& val);

  bool operator == (const IJobService_importData_args & rhs) const
  {
    if (!(job == rhs.job))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const IJobService_importData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_importData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IJobService_importData_pargs {
 public:


  virtual ~IJobService_importData_pargs() throw();
  const IJobId* job;
  const  ::ignis::rpc::driver::IDataId* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_importData_result__isset {
  _IJobService_importData_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IJobService_importData_result__isset;

class IJobService_importData_result {
 public:

  IJobService_importData_result(const IJobService_importData_result&);
  IJobService_importData_result& operator=(const IJobService_importData_result&);
  IJobService_importData_result() {
  }

  virtual ~IJobService_importData_result() throw();
   ::ignis::rpc::driver::IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IJobService_importData_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IJobService_importData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IJobService_importData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_importData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_importData_presult__isset {
  _IJobService_importData_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IJobService_importData_presult__isset;

class IJobService_importData_presult {
 public:


  virtual ~IJobService_importData_presult() throw();
   ::ignis::rpc::driver::IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IJobService_importData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _IJobService_readFile_args__isset {
  _IJobService_readFile_args__isset() : job(false), path(false) {}
  bool job :1;
  bool path :1;
} _IJobService_readFile_args__isset;

class IJobService_readFile_args {
 public:

  IJobService_readFile_args(const IJobService_readFile_args&);
  IJobService_readFile_args& operator=(const IJobService_readFile_args&);
  IJobService_readFile_args() : path() {
  }

  virtual ~IJobService_readFile_args() throw();
  IJobId job;
  std::string path;

  _IJobService_readFile_args__isset __isset;

  void __set_job(const IJobId& val);

  void __set_path(const std::string& val);

  bool operator == (const IJobService_readFile_args & rhs) const
  {
    if (!(job == rhs.job))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const IJobService_readFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_readFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IJobService_readFile_pargs {
 public:


  virtual ~IJobService_readFile_pargs() throw();
  const IJobId* job;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_readFile_result__isset {
  _IJobService_readFile_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IJobService_readFile_result__isset;

class IJobService_readFile_result {
 public:

  IJobService_readFile_result(const IJobService_readFile_result&);
  IJobService_readFile_result& operator=(const IJobService_readFile_result&);
  IJobService_readFile_result() {
  }

  virtual ~IJobService_readFile_result() throw();
   ::ignis::rpc::driver::IDataId success;
   ::ignis::rpc::IRemoteException ex;

  _IJobService_readFile_result__isset __isset;

  void __set_success(const  ::ignis::rpc::driver::IDataId& val);

  void __set_ex(const  ::ignis::rpc::IRemoteException& val);

  bool operator == (const IJobService_readFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const IJobService_readFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IJobService_readFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IJobService_readFile_presult__isset {
  _IJobService_readFile_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _IJobService_readFile_presult__isset;

class IJobService_readFile_presult {
 public:


  virtual ~IJobService_readFile_presult() throw();
   ::ignis::rpc::driver::IDataId* success;
   ::ignis::rpc::IRemoteException ex;

  _IJobService_readFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IJobServiceClient : virtual public IJobServiceIf {
 public:
  IJobServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IJobServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void newInstance(IJobId& _return, const int64_t cluster, const std::string& type);
  void send_newInstance(const int64_t cluster, const std::string& type);
  void recv_newInstance(IJobId& _return);
  void newInstance3(IJobId& _return, const int64_t cluster, const std::string& type, const int64_t properties);
  void send_newInstance3(const int64_t cluster, const std::string& type, const int64_t properties);
  void recv_newInstance3(IJobId& _return);
  void keep(const IJobId& job);
  void send_keep(const IJobId& job);
  void recv_keep();
  void importData( ::ignis::rpc::driver::IDataId& _return, const IJobId& job, const  ::ignis::rpc::driver::IDataId& data);
  void send_importData(const IJobId& job, const  ::ignis::rpc::driver::IDataId& data);
  void recv_importData( ::ignis::rpc::driver::IDataId& _return);
  void readFile( ::ignis::rpc::driver::IDataId& _return, const IJobId& job, const std::string& path);
  void send_readFile(const IJobId& job, const std::string& path);
  void recv_readFile( ::ignis::rpc::driver::IDataId& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IJobServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<IJobServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IJobServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_newInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_newInstance3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_keep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_importData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IJobServiceProcessor(::apache::thrift::stdcxx::shared_ptr<IJobServiceIf> iface) :
    iface_(iface) {
    processMap_["newInstance"] = &IJobServiceProcessor::process_newInstance;
    processMap_["newInstance3"] = &IJobServiceProcessor::process_newInstance3;
    processMap_["keep"] = &IJobServiceProcessor::process_keep;
    processMap_["importData"] = &IJobServiceProcessor::process_importData;
    processMap_["readFile"] = &IJobServiceProcessor::process_readFile;
  }

  virtual ~IJobServiceProcessor() {}
};

class IJobServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IJobServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< IJobServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< IJobServiceIfFactory > handlerFactory_;
};

class IJobServiceMultiface : virtual public IJobServiceIf {
 public:
  IJobServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<IJobServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IJobServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<IJobServiceIf> > ifaces_;
  IJobServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<IJobServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void newInstance(IJobId& _return, const int64_t cluster, const std::string& type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance(_return, cluster, type);
    }
    ifaces_[i]->newInstance(_return, cluster, type);
    return;
  }

  void newInstance3(IJobId& _return, const int64_t cluster, const std::string& type, const int64_t properties) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->newInstance3(_return, cluster, type, properties);
    }
    ifaces_[i]->newInstance3(_return, cluster, type, properties);
    return;
  }

  void keep(const IJobId& job) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keep(job);
    }
    ifaces_[i]->keep(job);
  }

  void importData( ::ignis::rpc::driver::IDataId& _return, const IJobId& job, const  ::ignis::rpc::driver::IDataId& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->importData(_return, job, data);
    }
    ifaces_[i]->importData(_return, job, data);
    return;
  }

  void readFile( ::ignis::rpc::driver::IDataId& _return, const IJobId& job, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readFile(_return, job, path);
    }
    ifaces_[i]->readFile(_return, job, path);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IJobServiceConcurrentClient : virtual public IJobServiceIf {
 public:
  IJobServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IJobServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void newInstance(IJobId& _return, const int64_t cluster, const std::string& type);
  int32_t send_newInstance(const int64_t cluster, const std::string& type);
  void recv_newInstance(IJobId& _return, const int32_t seqid);
  void newInstance3(IJobId& _return, const int64_t cluster, const std::string& type, const int64_t properties);
  int32_t send_newInstance3(const int64_t cluster, const std::string& type, const int64_t properties);
  void recv_newInstance3(IJobId& _return, const int32_t seqid);
  void keep(const IJobId& job);
  int32_t send_keep(const IJobId& job);
  void recv_keep(const int32_t seqid);
  void importData( ::ignis::rpc::driver::IDataId& _return, const IJobId& job, const  ::ignis::rpc::driver::IDataId& data);
  int32_t send_importData(const IJobId& job, const  ::ignis::rpc::driver::IDataId& data);
  void recv_importData( ::ignis::rpc::driver::IDataId& _return, const int32_t seqid);
  void readFile( ::ignis::rpc::driver::IDataId& _return, const IJobId& job, const std::string& path);
  int32_t send_readFile(const IJobId& job, const std::string& path);
  void recv_readFile( ::ignis::rpc::driver::IDataId& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
