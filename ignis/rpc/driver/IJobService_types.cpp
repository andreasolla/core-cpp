/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "IJobService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ignis { namespace rpc { namespace driver {


IJobId::~IJobId() throw() {
}


void IJobId::__set_cluster(const int64_t val) {
  this->cluster = val;
}

void IJobId::__set_job(const int64_t val) {
  this->job = val;
}
std::ostream& operator<<(std::ostream& out, const IJobId& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IJobId::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_cluster = false;
  bool isset_job = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cluster);
          isset_cluster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->job);
          isset_job = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_cluster)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_job)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IJobId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IJobId");

  xfer += oprot->writeFieldBegin("cluster", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->cluster);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("job", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->job);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IJobId &a, IJobId &b) {
  using ::std::swap;
  swap(a.cluster, b.cluster);
  swap(a.job, b.job);
}

IJobId::IJobId(const IJobId& other0) {
  cluster = other0.cluster;
  job = other0.job;
}
IJobId& IJobId::operator=(const IJobId& other1) {
  cluster = other1.cluster;
  job = other1.job;
  return *this;
}
void IJobId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IJobId(";
  out << "cluster=" << to_string(cluster);
  out << ", " << "job=" << to_string(job);
  out << ")";
}

}}} // namespace
