/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IRemoteException_TYPES_H
#define IRemoteException_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace ignis { namespace rpc {

class IRemoteException;


class IRemoteException : public ::apache::thrift::TException {
 public:

  IRemoteException(const IRemoteException&);
  IRemoteException& operator=(const IRemoteException&);
  IRemoteException() : message(), stack() {
  }

  virtual ~IRemoteException() throw();
  std::string message;
  std::string stack;

  void __set_message(const std::string& val);

  void __set_stack(const std::string& val);

  bool operator == (const IRemoteException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(stack == rhs.stack))
      return false;
    return true;
  }
  bool operator != (const IRemoteException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IRemoteException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(IRemoteException &a, IRemoteException &b);

std::ostream& operator<<(std::ostream& out, const IRemoteException& obj);

}} // namespace

#endif
