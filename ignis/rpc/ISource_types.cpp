/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ISource_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ignis { namespace rpc {


ISource::~ISource() throw() {
}


void ISource::__set_name(const std::string& val) {
  this->name = val;
}

void ISource::__set_bytes(const std::string& val) {
  this->bytes = val;
}

void ISource::__set__args(const std::map<std::string, std::string> & val) {
  this->_args = val;
}
std::ostream& operator<<(std::ostream& out, const ISource& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ISource::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bytes);
          this->__isset.bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->_args.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->_args[_key5];
              xfer += iprot->readBinary(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset._args = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ISource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ISource");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bytes", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->bytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_args", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->_args.size()));
    std::map<std::string, std::string> ::const_iterator _iter7;
    for (_iter7 = this->_args.begin(); _iter7 != this->_args.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeBinary(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ISource &a, ISource &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.bytes, b.bytes);
  swap(a._args, b._args);
  swap(a.__isset, b.__isset);
}

ISource::ISource(const ISource& other8) {
  name = other8.name;
  bytes = other8.bytes;
  _args = other8._args;
  __isset = other8.__isset;
}
ISource& ISource::operator=(const ISource& other9) {
  name = other9.name;
  bytes = other9.bytes;
  _args = other9._args;
  __isset = other9.__isset;
  return *this;
}
void ISource::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ISource(";
  out << "name=" << to_string(name);
  out << ", " << "bytes=" << to_string(bytes);
  out << ", " << "_args=" << to_string(_args);
  out << ")";
}

}} // namespace
